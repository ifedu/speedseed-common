'use strict';
var path = require('path');
var globby = require('globby');
var isPathCwd = require('is-path-cwd');
var isPathInCwd = require('is-path-in-cwd');
var pify = require('pify');
var rimraf = require('rimraf');
var pMap = require('p-map');
var rimrafP = pify(rimraf);
function safeCheck(file) {
    if (isPathCwd(file)) {
        throw new Error('Cannot delete the current working directory. Can be overriden with the `force` option.');
    }
    if (!isPathInCwd(file)) {
        throw new Error('Cannot delete files/folders outside the current working directory. Can be overriden with the `force` option.');
    }
}
module.exports = function (patterns, opts) {
    opts = Object.assign({}, opts);
    var force = opts.force;
    delete opts.force;
    var dryRun = opts.dryRun;
    delete opts.dryRun;
    var mapper = function (file) {
        if (!force) {
            safeCheck(file);
        }
        file = path.resolve(opts.cwd || '', file);
        if (dryRun) {
            return file;
        }
        return rimrafP(file, { glob: false }).then(function () { return file; });
    };
    return globby(patterns, opts).then(function (files) { return pMap(files, mapper, opts); });
};
module.exports.sync = function (patterns, opts) {
    opts = Object.assign({}, opts);
    var force = opts.force;
    delete opts.force;
    var dryRun = opts.dryRun;
    delete opts.dryRun;
    return globby.sync(patterns, opts).map(function (file) {
        if (!force) {
            safeCheck(file);
        }
        file = path.resolve(opts.cwd || '', file);
        if (!dryRun) {
            rimraf.sync(file, { glob: false });
        }
        return file;
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxkZWxcXGluZGV4LmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGRlbFxcaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDekMsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFOUIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTdCLG1CQUFtQixJQUFJO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RkFBd0YsQ0FBQyxDQUFDO0lBQzNHLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4R0FBOEcsQ0FBQyxDQUFDO0lBQ2pJLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLFFBQVEsRUFBRSxJQUFJO0lBQy9CLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUUvQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUVsQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUVuQixJQUFNLE1BQU0sR0FBRyxVQUFBLElBQUk7UUFDbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUxQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxDQUFDLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7QUFDeEUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsVUFBQyxRQUFRLEVBQUUsSUFBSTtJQUNwQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFL0IsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFFbEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFbkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUk7UUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2IsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZ2xvYmJ5ID0gcmVxdWlyZSgnZ2xvYmJ5Jyk7XG5jb25zdCBpc1BhdGhDd2QgPSByZXF1aXJlKCdpcy1wYXRoLWN3ZCcpO1xuY29uc3QgaXNQYXRoSW5Dd2QgPSByZXF1aXJlKCdpcy1wYXRoLWluLWN3ZCcpO1xuY29uc3QgcGlmeSA9IHJlcXVpcmUoJ3BpZnknKTtcbmNvbnN0IHJpbXJhZiA9IHJlcXVpcmUoJ3JpbXJhZicpO1xuY29uc3QgcE1hcCA9IHJlcXVpcmUoJ3AtbWFwJyk7XG5cbmNvbnN0IHJpbXJhZlAgPSBwaWZ5KHJpbXJhZik7XG5cbmZ1bmN0aW9uIHNhZmVDaGVjayhmaWxlKSB7XG5cdGlmIChpc1BhdGhDd2QoZmlsZSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWxldGUgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuIENhbiBiZSBvdmVycmlkZW4gd2l0aCB0aGUgYGZvcmNlYCBvcHRpb24uJyk7XG5cdH1cblxuXHRpZiAoIWlzUGF0aEluQ3dkKGZpbGUpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVsZXRlIGZpbGVzL2ZvbGRlcnMgb3V0c2lkZSB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS4gQ2FuIGJlIG92ZXJyaWRlbiB3aXRoIHRoZSBgZm9yY2VgIG9wdGlvbi4nKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChwYXR0ZXJucywgb3B0cykgPT4ge1xuXHRvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG5cblx0Y29uc3QgZm9yY2UgPSBvcHRzLmZvcmNlO1xuXHRkZWxldGUgb3B0cy5mb3JjZTtcblxuXHRjb25zdCBkcnlSdW4gPSBvcHRzLmRyeVJ1bjtcblx0ZGVsZXRlIG9wdHMuZHJ5UnVuO1xuXG5cdGNvbnN0IG1hcHBlciA9IGZpbGUgPT4ge1xuXHRcdGlmICghZm9yY2UpIHtcblx0XHRcdHNhZmVDaGVjayhmaWxlKTtcblx0XHR9XG5cblx0XHRmaWxlID0gcGF0aC5yZXNvbHZlKG9wdHMuY3dkIHx8ICcnLCBmaWxlKTtcblxuXHRcdGlmIChkcnlSdW4pIHtcblx0XHRcdHJldHVybiBmaWxlO1xuXHRcdH1cblxuXHRcdHJldHVybiByaW1yYWZQKGZpbGUsIHtnbG9iOiBmYWxzZX0pLnRoZW4oKCkgPT4gZmlsZSk7XG5cdH07XG5cblx0cmV0dXJuIGdsb2JieShwYXR0ZXJucywgb3B0cykudGhlbihmaWxlcyA9PiBwTWFwKGZpbGVzLCBtYXBwZXIsIG9wdHMpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnN5bmMgPSAocGF0dGVybnMsIG9wdHMpID0+IHtcblx0b3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpO1xuXG5cdGNvbnN0IGZvcmNlID0gb3B0cy5mb3JjZTtcblx0ZGVsZXRlIG9wdHMuZm9yY2U7XG5cblx0Y29uc3QgZHJ5UnVuID0gb3B0cy5kcnlSdW47XG5cdGRlbGV0ZSBvcHRzLmRyeVJ1bjtcblxuXHRyZXR1cm4gZ2xvYmJ5LnN5bmMocGF0dGVybnMsIG9wdHMpLm1hcChmaWxlID0+IHtcblx0XHRpZiAoIWZvcmNlKSB7XG5cdFx0XHRzYWZlQ2hlY2soZmlsZSk7XG5cdFx0fVxuXG5cdFx0ZmlsZSA9IHBhdGgucmVzb2x2ZShvcHRzLmN3ZCB8fCAnJywgZmlsZSk7XG5cblx0XHRpZiAoIWRyeVJ1bikge1xuXHRcdFx0cmltcmFmLnN5bmMoZmlsZSwge2dsb2I6IGZhbHNlfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbGU7XG5cdH0pO1xufTtcbiJdfQ==