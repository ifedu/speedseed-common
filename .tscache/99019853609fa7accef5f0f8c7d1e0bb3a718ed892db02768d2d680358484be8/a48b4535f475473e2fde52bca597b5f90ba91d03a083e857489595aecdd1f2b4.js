var parse = require('spdx-expression-parse');
var correct = require('spdx-correct');
var genericWarning = ('license should be ' +
    'a valid SPDX license expression (without "LicenseRef"), ' +
    '"UNLICENSED", or ' +
    '"SEE LICENSE IN <filename>"');
var fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;
function startsWith(prefix, string) {
    return string.slice(0, prefix.length) === prefix;
}
function usesLicenseRef(ast) {
    if (ast.hasOwnProperty('license')) {
        var license = ast.license;
        return (startsWith('LicenseRef', license) ||
            startsWith('DocumentRef', license));
    }
    else {
        return (usesLicenseRef(ast.left) ||
            usesLicenseRef(ast.right));
    }
}
module.exports = function (argument) {
    var ast;
    try {
        ast = parse(argument);
    }
    catch (e) {
        var match;
        if (argument === 'UNLICENSED' ||
            argument === 'UNLICENCED') {
            return {
                validForOldPackages: true,
                validForNewPackages: true,
                unlicensed: true
            };
        }
        else if (match = fileReferenceRE.exec(argument)) {
            return {
                validForOldPackages: true,
                validForNewPackages: true,
                inFile: match[1]
            };
        }
        else {
            var result = {
                validForOldPackages: false,
                validForNewPackages: false,
                warnings: [genericWarning]
            };
            var corrected = correct(argument);
            if (corrected) {
                result.warnings.push('license is similar to the valid expression "' + corrected + '"');
            }
            return result;
        }
    }
    if (usesLicenseRef(ast)) {
        return {
            validForNewPackages: false,
            validForOldPackages: false,
            spdx: true,
            warnings: [genericWarning]
        };
    }
    else {
        return {
            validForNewPackages: true,
            validForOldPackages: true,
            spdx: true
        };
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx2YWxpZGF0ZS1ucG0tcGFja2FnZS1saWNlbnNlXFxpbmRleC5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx2YWxpZGF0ZS1ucG0tcGFja2FnZS1saWNlbnNlXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUM3QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFdEMsSUFBSSxjQUFjLEdBQUcsQ0FDbkIsb0JBQW9CO0lBQ3BCLDBEQUEwRDtJQUMxRCxtQkFBbUI7SUFDbkIsNkJBQTZCLENBQzlCLENBQUM7QUFFRixJQUFJLGVBQWUsR0FBRywwQkFBMEIsQ0FBQztBQUVqRCxvQkFBb0IsTUFBTSxFQUFFLE1BQU07SUFDaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUM7QUFDbkQsQ0FBQztBQUVELHdCQUF3QixHQUFHO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDMUIsTUFBTSxDQUFDLENBQ0wsVUFBVSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUM7WUFDakMsVUFBVSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FDbkMsQ0FBQztJQUNKLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxDQUNMLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3hCLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxRQUFRO0lBQ2hDLElBQUksR0FBRyxDQUFDO0lBRVIsSUFBSSxDQUFDO1FBQ0gsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLElBQUksS0FBSyxDQUFBO1FBQ1QsRUFBRSxDQUFDLENBQ0QsUUFBUSxLQUFLLFlBQVk7WUFDekIsUUFBUSxLQUFLLFlBQ2YsQ0FBQyxDQUFDLENBQUM7WUFDRCxNQUFNLENBQUM7Z0JBQ0wsbUJBQW1CLEVBQUUsSUFBSTtnQkFDekIsbUJBQW1CLEVBQUUsSUFBSTtnQkFDekIsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztRQUNKLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQztnQkFDTCxtQkFBbUIsRUFBRSxJQUFJO2dCQUN6QixtQkFBbUIsRUFBRSxJQUFJO2dCQUN6QixNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNqQixDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxNQUFNLEdBQUc7Z0JBQ1gsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsbUJBQW1CLEVBQUUsS0FBSztnQkFDMUIsUUFBUSxFQUFFLENBQUMsY0FBYyxDQUFDO2FBQzNCLENBQUM7WUFDRixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDZCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbEIsOENBQThDLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FDakUsQ0FBQztZQUNKLENBQUM7WUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hCLENBQUM7SUFDSCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUM7WUFDTCxtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsQ0FBQyxjQUFjLENBQUM7U0FDM0IsQ0FBQztJQUNKLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQztZQUNMLG1CQUFtQixFQUFFLElBQUk7WUFDekIsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhcnNlID0gcmVxdWlyZSgnc3BkeC1leHByZXNzaW9uLXBhcnNlJyk7XG52YXIgY29ycmVjdCA9IHJlcXVpcmUoJ3NwZHgtY29ycmVjdCcpO1xuXG52YXIgZ2VuZXJpY1dhcm5pbmcgPSAoXG4gICdsaWNlbnNlIHNob3VsZCBiZSAnICtcbiAgJ2EgdmFsaWQgU1BEWCBsaWNlbnNlIGV4cHJlc3Npb24gKHdpdGhvdXQgXCJMaWNlbnNlUmVmXCIpLCAnICtcbiAgJ1wiVU5MSUNFTlNFRFwiLCBvciAnICtcbiAgJ1wiU0VFIExJQ0VOU0UgSU4gPGZpbGVuYW1lPlwiJ1xuKTtcblxudmFyIGZpbGVSZWZlcmVuY2VSRSA9IC9eU0VFIExJQ0VOW0NTXUUgSU4gKC4rKSQvO1xuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHByZWZpeCwgc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgcHJlZml4Lmxlbmd0aCkgPT09IHByZWZpeDtcbn1cblxuZnVuY3Rpb24gdXNlc0xpY2Vuc2VSZWYoYXN0KSB7XG4gIGlmIChhc3QuaGFzT3duUHJvcGVydHkoJ2xpY2Vuc2UnKSkge1xuICAgIHZhciBsaWNlbnNlID0gYXN0LmxpY2Vuc2U7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0YXJ0c1dpdGgoJ0xpY2Vuc2VSZWYnLCBsaWNlbnNlKSB8fFxuICAgICAgc3RhcnRzV2l0aCgnRG9jdW1lbnRSZWYnLCBsaWNlbnNlKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHVzZXNMaWNlbnNlUmVmKGFzdC5sZWZ0KSB8fFxuICAgICAgdXNlc0xpY2Vuc2VSZWYoYXN0LnJpZ2h0KVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICB2YXIgYXN0O1xuXG4gIHRyeSB7XG4gICAgYXN0ID0gcGFyc2UoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIG1hdGNoXG4gICAgaWYgKFxuICAgICAgYXJndW1lbnQgPT09ICdVTkxJQ0VOU0VEJyB8fFxuICAgICAgYXJndW1lbnQgPT09ICdVTkxJQ0VOQ0VEJ1xuICAgICkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWRGb3JPbGRQYWNrYWdlczogdHJ1ZSxcbiAgICAgICAgdmFsaWRGb3JOZXdQYWNrYWdlczogdHJ1ZSxcbiAgICAgICAgdW5saWNlbnNlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG1hdGNoID0gZmlsZVJlZmVyZW5jZVJFLmV4ZWMoYXJndW1lbnQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWxpZEZvck9sZFBhY2thZ2VzOiB0cnVlLFxuICAgICAgICB2YWxpZEZvck5ld1BhY2thZ2VzOiB0cnVlLFxuICAgICAgICBpbkZpbGU6IG1hdGNoWzFdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB2YWxpZEZvck9sZFBhY2thZ2VzOiBmYWxzZSxcbiAgICAgICAgdmFsaWRGb3JOZXdQYWNrYWdlczogZmFsc2UsXG4gICAgICAgIHdhcm5pbmdzOiBbZ2VuZXJpY1dhcm5pbmddXG4gICAgICB9O1xuICAgICAgdmFyIGNvcnJlY3RlZCA9IGNvcnJlY3QoYXJndW1lbnQpO1xuICAgICAgaWYgKGNvcnJlY3RlZCkge1xuICAgICAgICByZXN1bHQud2FybmluZ3MucHVzaChcbiAgICAgICAgICAnbGljZW5zZSBpcyBzaW1pbGFyIHRvIHRoZSB2YWxpZCBleHByZXNzaW9uIFwiJyArIGNvcnJlY3RlZCArICdcIidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHVzZXNMaWNlbnNlUmVmKGFzdCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsaWRGb3JOZXdQYWNrYWdlczogZmFsc2UsXG4gICAgICB2YWxpZEZvck9sZFBhY2thZ2VzOiBmYWxzZSxcbiAgICAgIHNwZHg6IHRydWUsXG4gICAgICB3YXJuaW5nczogW2dlbmVyaWNXYXJuaW5nXVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkRm9yTmV3UGFja2FnZXM6IHRydWUsXG4gICAgICB2YWxpZEZvck9sZFBhY2thZ2VzOiB0cnVlLFxuICAgICAgc3BkeDogdHJ1ZVxuICAgIH07XG4gIH1cbn07XG4iXX0=