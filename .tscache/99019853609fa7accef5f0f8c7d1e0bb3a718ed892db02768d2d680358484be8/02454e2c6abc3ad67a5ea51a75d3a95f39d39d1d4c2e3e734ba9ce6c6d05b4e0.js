'use strict';
var _ = require('lodash');
/**
 * Choice object
 * Normalize input as choice object
 * @constructor
 * @param {String|Object} val  Choice value. If an object is passed, it should contains
 *                             at least one of `value` or `name` property
 */
var Choice = module.exports = function (val, answers) {
    // Don't process Choice and Separator object
    if (val instanceof Choice || val.type === 'separator') {
        return val;
    }
    if (_.isString(val)) {
        this.name = val;
        this.value = val;
        this.short = val;
    }
    else {
        _.extend(this, val, {
            name: val.name || val.value,
            value: val.hasOwnProperty('value') ? val.value : val.name,
            short: val.short || val.name || val.value
        });
    }
    if (_.isFunction(val.disabled)) {
        this.disabled = val.disabled(answers);
    }
    else {
        this.disabled = val.disabled;
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxvYmplY3RzXFxjaG9pY2UuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcaW5xdWlyZXJcXGxpYlxcb2JqZWN0c1xcY2hvaWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUxQjs7Ozs7O0dBTUc7QUFFSCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsR0FBRyxFQUFFLE9BQU87SUFDbEQsNENBQTRDO0lBQzVDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsWUFBWSxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDbkIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO1lBQ2xCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQzNCLEtBQUssRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUk7WUFDekQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSztTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbi8qKlxuICogQ2hvaWNlIG9iamVjdFxuICogTm9ybWFsaXplIGlucHV0IGFzIGNob2ljZSBvYmplY3RcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB2YWwgIENob2ljZSB2YWx1ZS4gSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCwgaXQgc2hvdWxkIGNvbnRhaW5zXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXQgbGVhc3Qgb25lIG9mIGB2YWx1ZWAgb3IgYG5hbWVgIHByb3BlcnR5XG4gKi9cblxudmFyIENob2ljZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbCwgYW5zd2Vycykge1xuICAvLyBEb24ndCBwcm9jZXNzIENob2ljZSBhbmQgU2VwYXJhdG9yIG9iamVjdFxuICBpZiAodmFsIGluc3RhbmNlb2YgQ2hvaWNlIHx8IHZhbC50eXBlID09PSAnc2VwYXJhdG9yJykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBpZiAoXy5pc1N0cmluZyh2YWwpKSB7XG4gICAgdGhpcy5uYW1lID0gdmFsO1xuICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgdGhpcy5zaG9ydCA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBfLmV4dGVuZCh0aGlzLCB2YWwsIHtcbiAgICAgIG5hbWU6IHZhbC5uYW1lIHx8IHZhbC52YWx1ZSxcbiAgICAgIHZhbHVlOiB2YWwuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgPyB2YWwudmFsdWUgOiB2YWwubmFtZSxcbiAgICAgIHNob3J0OiB2YWwuc2hvcnQgfHwgdmFsLm5hbWUgfHwgdmFsLnZhbHVlXG4gICAgfSk7XG4gIH1cblxuICBpZiAoXy5pc0Z1bmN0aW9uKHZhbC5kaXNhYmxlZCkpIHtcbiAgICB0aGlzLmRpc2FibGVkID0gdmFsLmRpc2FibGVkKGFuc3dlcnMpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGlzYWJsZWQgPSB2YWwuZGlzYWJsZWQ7XG4gIH1cbn07XG4iXX0=