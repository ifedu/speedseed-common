var fs = require('fs');
var path = require('path');
var common = require('./common');
common.register('ln', _ln, {
    cmdOptions: {
        's': 'symlink',
        'f': 'force',
    },
});
//@
//@ ### ln([options,] source, dest)
//@ Available options:
//@
//@ + `-s`: symlink
//@ + `-f`: force
//@
//@ Examples:
//@
//@ ```javascript
//@ ln('file', 'newlink');
//@ ln('-sf', 'file', 'existing');
//@ ```
//@
//@ Links source to dest. Use -f to force the link, should dest already exist.
function _ln(options, source, dest) {
    if (!source || !dest) {
        common.error('Missing <source> and/or <dest>');
    }
    source = String(source);
    var sourcePath = path.normalize(source).replace(RegExp(path.sep + '$'), '');
    var isAbsolute = (path.resolve(source) === sourcePath);
    dest = path.resolve(process.cwd(), String(dest));
    if (fs.existsSync(dest)) {
        if (!options.force) {
            common.error('Destination file exists', { continue: true });
        }
        fs.unlinkSync(dest);
    }
    if (options.symlink) {
        var isWindows = process.platform === 'win32';
        var linkType = isWindows ? 'file' : null;
        var resolvedSourcePath = isAbsolute ? sourcePath : path.resolve(process.cwd(), path.dirname(dest), source);
        if (!fs.existsSync(resolvedSourcePath)) {
            common.error('Source file does not exist', { continue: true });
        }
        else if (isWindows && fs.statSync(resolvedSourcePath).isDirectory()) {
            linkType = 'junction';
        }
        try {
            fs.symlinkSync(linkType === 'junction' ? resolvedSourcePath : source, dest, linkType);
        }
        catch (err) {
            common.error(err.message);
        }
    }
    else {
        if (!fs.existsSync(source)) {
            common.error('Source file does not exist', { continue: true });
        }
        try {
            fs.linkSync(source, dest);
        }
        catch (err) {
            common.error(err.message);
        }
    }
    return '';
}
module.exports = _ln;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXGxuLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXHNoZWxsanNcXHNyY1xcbG4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQ3pCLFVBQVUsRUFBRTtRQUNWLEdBQUcsRUFBRSxTQUFTO1FBQ2QsR0FBRyxFQUFFLE9BQU87S0FDYjtDQUNGLENBQUMsQ0FBQztBQUVILEdBQUc7QUFDSCxtQ0FBbUM7QUFDbkMsc0JBQXNCO0FBQ3RCLEdBQUc7QUFDSCxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLEdBQUc7QUFDSCxhQUFhO0FBQ2IsR0FBRztBQUNILGlCQUFpQjtBQUNqQiwwQkFBMEI7QUFDMUIsa0NBQWtDO0FBQ2xDLE9BQU87QUFDUCxHQUFHO0FBQ0gsOEVBQThFO0FBQzlFLGFBQWEsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJO0lBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU0sR0FBRyxNQUFNLENB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QUFHLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ2xuJywgX2xuLCB7XG4gIGNtZE9wdGlvbnM6IHtcbiAgICAncyc6ICdzeW1saW5rJyxcbiAgICAnZic6ICdmb3JjZScsXG4gIH0sXG59KTtcblxuLy9AXG4vL0AgIyMjIGxuKFtvcHRpb25zLF0gc291cmNlLCBkZXN0KVxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgLXNgOiBzeW1saW5rXG4vL0AgKyBgLWZgOiBmb3JjZVxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgbG4oJ2ZpbGUnLCAnbmV3bGluaycpO1xuLy9AIGxuKCctc2YnLCAnZmlsZScsICdleGlzdGluZycpO1xuLy9AIGBgYFxuLy9AXG4vL0AgTGlua3Mgc291cmNlIHRvIGRlc3QuIFVzZSAtZiB0byBmb3JjZSB0aGUgbGluaywgc2hvdWxkIGRlc3QgYWxyZWFkeSBleGlzdC5cbmZ1bmN0aW9uIF9sbihvcHRpb25zLCBzb3VyY2UsIGRlc3QpIHtcbiAgaWYgKCFzb3VyY2UgfHwgIWRlc3QpIHtcbiAgICBjb21tb24uZXJyb3IoJ01pc3NpbmcgPHNvdXJjZT4gYW5kL29yIDxkZXN0PicpO1xuICB9XG5cbiAgc291cmNlID0gU3RyaW5nKHNvdXJjZSk7XG4gIHZhciBzb3VyY2VQYXRoID0gcGF0aC5ub3JtYWxpemUoc291cmNlKS5yZXBsYWNlKFJlZ0V4cChwYXRoLnNlcCArICckJyksICcnKTtcbiAgdmFyIGlzQWJzb2x1dGUgPSAocGF0aC5yZXNvbHZlKHNvdXJjZSkgPT09IHNvdXJjZVBhdGgpO1xuICBkZXN0ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIFN0cmluZyhkZXN0KSk7XG5cbiAgaWYgKGZzLmV4aXN0c1N5bmMoZGVzdCkpIHtcbiAgICBpZiAoIW9wdGlvbnMuZm9yY2UpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignRGVzdGluYXRpb24gZmlsZSBleGlzdHMnLCB7IGNvbnRpbnVlOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGZzLnVubGlua1N5bmMoZGVzdCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zeW1saW5rKSB7XG4gICAgdmFyIGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG4gICAgdmFyIGxpbmtUeXBlID0gaXNXaW5kb3dzID8gJ2ZpbGUnIDogbnVsbDtcbiAgICB2YXIgcmVzb2x2ZWRTb3VyY2VQYXRoID0gaXNBYnNvbHV0ZSA/IHNvdXJjZVBhdGggOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgcGF0aC5kaXJuYW1lKGRlc3QpLCBzb3VyY2UpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhyZXNvbHZlZFNvdXJjZVBhdGgpKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ1NvdXJjZSBmaWxlIGRvZXMgbm90IGV4aXN0JywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICB9IGVsc2UgaWYgKGlzV2luZG93cyAmJiBmcy5zdGF0U3luYyhyZXNvbHZlZFNvdXJjZVBhdGgpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGxpbmtUeXBlID0gJ2p1bmN0aW9uJztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZnMuc3ltbGlua1N5bmMobGlua1R5cGUgPT09ICdqdW5jdGlvbicgPyByZXNvbHZlZFNvdXJjZVBhdGggOiBzb3VyY2UsIGRlc3QsIGxpbmtUeXBlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbW1vbi5lcnJvcihlcnIubWVzc2FnZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhzb3VyY2UpKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ1NvdXJjZSBmaWxlIGRvZXMgbm90IGV4aXN0JywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGZzLmxpbmtTeW5jKHNvdXJjZSwgZGVzdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb21tb24uZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9sbjtcbiJdfQ==