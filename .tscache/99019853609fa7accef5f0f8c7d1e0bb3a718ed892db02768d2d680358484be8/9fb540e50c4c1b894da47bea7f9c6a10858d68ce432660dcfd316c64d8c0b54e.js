/**
 * `input` type prompt
 */
var util = require('util');
var chalk = require('chalk');
var Base = require('./base');
var observe = require('../utils/events');
/**
 * Module exports
 */
module.exports = Prompt;
/**
 * Constructor
 */
function Prompt() {
    return Base.apply(this, arguments);
}
util.inherits(Prompt, Base);
/**
 * Start the Inquiry session
 * @param  {Function} cb      Callback when prompt is done
 * @return {this}
 */
Prompt.prototype._run = function (cb) {
    this.done = cb;
    // Once user confirm (enter key)
    var events = observe(this.rl);
    var submit = events.line.map(this.filterInput.bind(this));
    var validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));
    events.keypress.takeUntil(validation.success).forEach(this.onKeypress.bind(this));
    // Init
    this.render();
    return this;
};
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */
Prompt.prototype.render = function (error) {
    var bottomContent = '';
    var message = this.getQuestion();
    if (this.status === 'answered') {
        message += chalk.cyan(this.answer);
    }
    else {
        message += this.rl.line;
    }
    if (error) {
        bottomContent = chalk.red('>> ') + error;
    }
    this.screen.render(message, bottomContent);
};
/**
 * When user press `enter` key
 */
Prompt.prototype.filterInput = function (input) {
    if (!input) {
        return this.opt.default == null ? '' : this.opt.default;
    }
    return input;
};
Prompt.prototype.onEnd = function (state) {
    this.answer = state.value;
    this.status = 'answered';
    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(state.value);
};
Prompt.prototype.onError = function (state) {
    this.render(state.isValid);
};
/**
 * When user press a key
 */
Prompt.prototype.onKeypress = function () {
    this.render();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxwcm9tcHRzXFxpbnB1dC5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxwcm9tcHRzXFxpbnB1dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXpDOztHQUVHO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFFeEI7O0dBRUc7QUFFSDtJQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFNUI7Ozs7R0FJRztBQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsRUFBRTtJQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUVmLGdDQUFnQztJQUNoQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJ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cHJvbXB0XG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbnZhciBvYnNlcnZlID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21wdDtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIFByb21wdCgpIHtcbiAgcmV0dXJuIEJhc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbnV0aWwuaW5oZXJpdHMoUHJvbXB0LCBCYXNlKTtcblxuLyoqXG4gKiBTdGFydCB0aGUgSW5xdWlyeSBzZXNzaW9uXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICAgICBDYWxsYmFjayB3aGVuIHByb21wdCBpcyBkb25lXG4gKiBAcmV0dXJuIHt0aGlzfVxuICovXG5cblByb21wdC5wcm90b3R5cGUuX3J1biA9IGZ1bmN0aW9uIChjYikge1xuICB0aGlzLmRvbmUgPSBjYjtcblxuICAvLyBPbmNlIHVzZXIgY29uZmlybSAoZW50ZXIga2V5KVxuICB2YXIgZXZlbnRzID0gb2JzZXJ2ZSh0aGlzLnJsKTtcbiAgdmFyIHN1Ym1pdCA9IGV2ZW50cy5saW5lLm1hcCh0aGlzLmZpbHRlcklucHV0LmJpbmQodGhpcykpO1xuXG4gIHZhciB2YWxpZGF0aW9uID0gdGhpcy5oYW5kbGVTdWJtaXRFdmVudHMoc3VibWl0KTtcbiAgdmFsaWRhdGlvbi5zdWNjZXNzLmZvckVhY2godGhpcy5vbkVuZC5iaW5kKHRoaXMpKTtcbiAgdmFsaWRhdGlvbi5lcnJvci5mb3JFYWNoKHRoaXMub25FcnJvci5iaW5kKHRoaXMpKTtcblxuICBldmVudHMua2V5cHJlc3MudGFrZVVudGlsKHZhbGlkYXRpb24uc3VjY2VzcykuZm9yRWFjaCh0aGlzLm9uS2V5cHJlc3MuYmluZCh0aGlzKSk7XG5cbiAgLy8gSW5pdFxuICB0aGlzLnJlbmRlcigpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW5kZXIgdGhlIHByb21wdCB0byBzY3JlZW5cbiAqIEByZXR1cm4ge1Byb21wdH0gc2VsZlxuICovXG5cblByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gIHZhciBib3R0b21Db250ZW50ID0gJyc7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5nZXRRdWVzdGlvbigpO1xuXG4gIGlmICh0aGlzLnN0YXR1cyA9PT0gJ2Fuc3dlcmVkJykge1xuICAgIG1lc3NhZ2UgKz0gY2hhbGsuY3lhbih0aGlzLmFuc3dlcik7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSArPSB0aGlzLnJsLmxpbmU7XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICBib3R0b21Db250ZW50ID0gY2hhbGsucmVkKCc+PiAnKSArIGVycm9yO1xuICB9XG5cbiAgdGhpcy5zY3JlZW4ucmVuZGVyKG1lc3NhZ2UsIGJvdHRvbUNvbnRlbnQpO1xufTtcblxuLyoqXG4gKiBXaGVuIHVzZXIgcHJlc3MgYGVudGVyYCBrZXlcbiAqL1xuXG5Qcm9tcHQucHJvdG90eXBlLmZpbHRlcklucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIGlmICghaW5wdXQpIHtcbiAgICByZXR1cm4gdGhpcy5vcHQuZGVmYXVsdCA9PSBudWxsID8gJycgOiB0aGlzLm9wdC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG5cblByb21wdC5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGhpcy5hbnN3ZXIgPSBzdGF0ZS52YWx1ZTtcbiAgdGhpcy5zdGF0dXMgPSAnYW5zd2VyZWQnO1xuXG4gIC8vIFJlLXJlbmRlciBwcm9tcHRcbiAgdGhpcy5yZW5kZXIoKTtcblxuICB0aGlzLnNjcmVlbi5kb25lKCk7XG4gIHRoaXMuZG9uZShzdGF0ZS52YWx1ZSk7XG59O1xuXG5Qcm9tcHQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGhpcy5yZW5kZXIoc3RhdGUuaXNWYWxpZCk7XG59O1xuXG4vKipcbiAqIFdoZW4gdXNlciBwcmVzcyBhIGtleVxuICovXG5cblByb21wdC5wcm90b3R5cGUub25LZXlwcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZW5kZXIoKTtcbn07XG4iXX0=