/**
 * Sticky bottom bar user interface
 */
var util = require('util');
var through = require('through');
var Base = require('./baseUI');
var rlUtils = require('../utils/readline');
var _ = require('lodash');
/**
 * Module exports
 */
module.exports = Prompt;
/**
 * Constructor
 */
function Prompt(opt) {
    opt || (opt = {});
    Base.apply(this, arguments);
    this.log = through(this.writeLog.bind(this));
    this.bottomBar = opt.bottomBar || '';
    this.render();
}
util.inherits(Prompt, Base);
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */
Prompt.prototype.render = function () {
    this.write(this.bottomBar);
    return this;
};
Prompt.prototype.clean = function () {
    rlUtils.clearLine(this.rl, this.bottomBar.split('\n').length);
    return this;
};
/**
 * Update the bottom bar content and rerender
 * @param  {String} bottomBar Bottom bar content
 * @return {Prompt}           self
 */
Prompt.prototype.updateBottomBar = function (bottomBar) {
    this.bottomBar = bottomBar;
    rlUtils.clearLine(this.rl, 1);
    this.rl.output.unmute();
    this.clean().render();
    this.rl.output.mute();
    return this;
};
/**
 * Rerender the prompt
 * @return {Prompt} self
 */
Prompt.prototype.writeLog = function (data) {
    rlUtils.clearLine(this.rl, 1);
    this.rl.output.write(this.enforceLF(data.toString()));
    return this.render();
};
/**
 * Make sure line end on a line feed
 * @param  {String} str Input string
 * @return {String}     The input string with a final line feed
 */
Prompt.prototype.enforceLF = function (str) {
    return str.match(/[\r\n]$/) ? str : str + '\n';
};
/**
 * Helper for writing message in Prompt
 * @param {Prompt} prompt  - The Prompt object that extends tty
 * @param {String} message - The message to be output
 */
Prompt.prototype.write = function (message) {
    var msgLines = message.split(/\n/);
    this.height = msgLines.length;
    // Write message to screen and setPrompt to control backspace
    this.rl.setPrompt(_.last(msgLines));
    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {
        /* When it's a tty through serial port there's no terminal info and the render will malfunction,
           so we need enforce the cursor to locate to the leftmost position for rendering. */
        rlUtils.left(this.rl, message.length + this.rl.line.length);
    }
    this.rl.output.write(message);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFx1aVxcYm90dG9tLWJhci5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFx1aVxcYm90dG9tLWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQy9CLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzNDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUxQjs7R0FFRztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBRXhCOztHQUVHO0FBRUgsZ0JBQWdCLEdBQUc7SUFDakIsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRWxCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRTVCLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUNyQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEIsQ0FBQztBQUNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRTVCOzs7R0FHRztBQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHO0lBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRztJQUN2QixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxVQUFVLFNBQVM7SUFDcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxJQUFJO0lBQ3hDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsR0FBRztJQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNqRCxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxPQUFPO0lBQ3hDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBRTlCLDZEQUE2RDtJQUM3RCxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RDs2RkFDcUY7UUFDckYsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUNELElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0aWNreSBib3R0b20gYmFyIHVzZXIgaW50ZXJmYWNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgdGhyb3VnaCA9IHJlcXVpcmUoJ3Rocm91Z2gnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlVUknKTtcbnZhciBybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvcmVhZGxpbmUnKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21wdDtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIFByb21wdChvcHQpIHtcbiAgb3B0IHx8IChvcHQgPSB7fSk7XG5cbiAgQmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIHRoaXMubG9nID0gdGhyb3VnaCh0aGlzLndyaXRlTG9nLmJpbmQodGhpcykpO1xuICB0aGlzLmJvdHRvbUJhciA9IG9wdC5ib3R0b21CYXIgfHwgJyc7XG4gIHRoaXMucmVuZGVyKCk7XG59XG51dGlsLmluaGVyaXRzKFByb21wdCwgQmFzZSk7XG5cbi8qKlxuICogUmVuZGVyIHRoZSBwcm9tcHQgdG8gc2NyZWVuXG4gKiBAcmV0dXJuIHtQcm9tcHR9IHNlbGZcbiAqL1xuXG5Qcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZSh0aGlzLmJvdHRvbUJhcik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUHJvbXB0LnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmxVdGlscy5jbGVhckxpbmUodGhpcy5ybCwgdGhpcy5ib3R0b21CYXIuc3BsaXQoJ1xcbicpLmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIGJvdHRvbSBiYXIgY29udGVudCBhbmQgcmVyZW5kZXJcbiAqIEBwYXJhbSAge1N0cmluZ30gYm90dG9tQmFyIEJvdHRvbSBiYXIgY29udGVudFxuICogQHJldHVybiB7UHJvbXB0fSAgICAgICAgICAgc2VsZlxuICovXG5cblByb21wdC5wcm90b3R5cGUudXBkYXRlQm90dG9tQmFyID0gZnVuY3Rpb24gKGJvdHRvbUJhcikge1xuICB0aGlzLmJvdHRvbUJhciA9IGJvdHRvbUJhcjtcbiAgcmxVdGlscy5jbGVhckxpbmUodGhpcy5ybCwgMSk7XG4gIHRoaXMucmwub3V0cHV0LnVubXV0ZSgpO1xuICB0aGlzLmNsZWFuKCkucmVuZGVyKCk7XG4gIHRoaXMucmwub3V0cHV0Lm11dGUoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlcmVuZGVyIHRoZSBwcm9tcHRcbiAqIEByZXR1cm4ge1Byb21wdH0gc2VsZlxuICovXG5cblByb21wdC5wcm90b3R5cGUud3JpdGVMb2cgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBybFV0aWxzLmNsZWFyTGluZSh0aGlzLnJsLCAxKTtcbiAgdGhpcy5ybC5vdXRwdXQud3JpdGUodGhpcy5lbmZvcmNlTEYoZGF0YS50b1N0cmluZygpKSk7XG4gIHJldHVybiB0aGlzLnJlbmRlcigpO1xufTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgbGluZSBlbmQgb24gYSBsaW5lIGZlZWRcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSAgICAgVGhlIGlucHV0IHN0cmluZyB3aXRoIGEgZmluYWwgbGluZSBmZWVkXG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5lbmZvcmNlTEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIubWF0Y2goL1tcXHJcXG5dJC8pID8gc3RyIDogc3RyICsgJ1xcbic7XG59O1xuXG4vKipcbiAqIEhlbHBlciBmb3Igd3JpdGluZyBtZXNzYWdlIGluIFByb21wdFxuICogQHBhcmFtIHtQcm9tcHR9IHByb21wdCAgLSBUaGUgUHJvbXB0IG9iamVjdCB0aGF0IGV4dGVuZHMgdHR5XG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGJlIG91dHB1dFxuICovXG5Qcm9tcHQucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgdmFyIG1zZ0xpbmVzID0gbWVzc2FnZS5zcGxpdCgvXFxuLyk7XG4gIHRoaXMuaGVpZ2h0ID0gbXNnTGluZXMubGVuZ3RoO1xuXG4gIC8vIFdyaXRlIG1lc3NhZ2UgdG8gc2NyZWVuIGFuZCBzZXRQcm9tcHQgdG8gY29udHJvbCBiYWNrc3BhY2VcbiAgdGhpcy5ybC5zZXRQcm9tcHQoXy5sYXN0KG1zZ0xpbmVzKSk7XG5cbiAgaWYgKHRoaXMucmwub3V0cHV0LnJvd3MgPT09IDAgJiYgdGhpcy5ybC5vdXRwdXQuY29sdW1ucyA9PT0gMCkge1xuICAgIC8qIFdoZW4gaXQncyBhIHR0eSB0aHJvdWdoIHNlcmlhbCBwb3J0IHRoZXJlJ3Mgbm8gdGVybWluYWwgaW5mbyBhbmQgdGhlIHJlbmRlciB3aWxsIG1hbGZ1bmN0aW9uLFxuICAgICAgIHNvIHdlIG5lZWQgZW5mb3JjZSB0aGUgY3Vyc29yIHRvIGxvY2F0ZSB0byB0aGUgbGVmdG1vc3QgcG9zaXRpb24gZm9yIHJlbmRlcmluZy4gKi9cbiAgICBybFV0aWxzLmxlZnQodGhpcy5ybCwgbWVzc2FnZS5sZW5ndGggKyB0aGlzLnJsLmxpbmUubGVuZ3RoKTtcbiAgfVxuICB0aGlzLnJsLm91dHB1dC53cml0ZShtZXNzYWdlKTtcbn07XG4iXX0=