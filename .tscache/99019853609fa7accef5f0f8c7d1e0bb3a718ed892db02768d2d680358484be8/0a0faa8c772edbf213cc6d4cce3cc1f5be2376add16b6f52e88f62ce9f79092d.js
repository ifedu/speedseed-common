'use strict';
var fs = require('fs');
var path = require('path');
var commondir = require('commondir');
var glob = require('glob');
function notNullOrExclusion(file) {
    return file != null && file.charAt(0) !== '!';
}
exports.getCommonPath = function (filePath) {
    if (Array.isArray(filePath)) {
        filePath = filePath
            .filter(notNullOrExclusion)
            .map(this.getCommonPath.bind(this));
        return commondir(filePath);
    }
    var globStartIndex = filePath.indexOf('*');
    if (globStartIndex !== -1) {
        filePath = filePath.substring(0, globStartIndex + 1);
    }
    else if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {
        return filePath;
    }
    return path.dirname(filePath);
};
exports.globify = function (filePath) {
    var _this = this;
    if (Array.isArray(filePath)) {
        return filePath.reduce(function (memo, pattern) { return memo.concat(_this.globify(pattern)); }, []);
    }
    if (glob.hasMagic(filePath)) {
        return filePath;
    }
    else if (!fs.existsSync(filePath)) {
        // The target of a pattern who's not a glob and doesn't match an existing
        // entity on the disk is ambiguous. As such, match both files and directories.
        return [
            filePath,
            path.join(filePath, '**')
        ];
    }
    var fsStats = fs.statSync(filePath);
    if (fsStats.isFile()) {
        return filePath;
    }
    else if (fsStats.isDirectory()) {
        return path.join(filePath, '**');
    }
    throw new Error('Only file path or directory path are supported.');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxtZW0tZnMtZWRpdG9yXFxsaWJcXHV0aWwuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcbWVtLWZzLWVkaXRvclxcbGliXFx1dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQiw0QkFBNEIsSUFBSTtJQUM5QixNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztBQUNoRCxDQUFDO0FBRUQsT0FBTyxDQUFDLGFBQWEsR0FBRyxVQUFVLFFBQVE7SUFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsUUFBUSxHQUFHLFFBQVE7YUFDaEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDO2FBQzFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXRDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0MsRUFBRSxDQUFDLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFFRixPQUFPLENBQUMsT0FBTyxHQUFHLFVBQVUsUUFBUTtJQUFsQixpQkF1QmpCO0lBdEJDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLE9BQU8sSUFBSyxPQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFsQyxDQUFrQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyx5RUFBeUU7UUFDekUsOEVBQThFO1FBQzlFLE1BQU0sQ0FBQztZQUNMLFFBQVE7WUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7U0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgY29tbW9uZGlyID0gcmVxdWlyZSgnY29tbW9uZGlyJyk7XG52YXIgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKTtcblxuZnVuY3Rpb24gbm90TnVsbE9yRXhjbHVzaW9uKGZpbGUpIHtcbiAgcmV0dXJuIGZpbGUgIT0gbnVsbCAmJiBmaWxlLmNoYXJBdCgwKSAhPT0gJyEnO1xufVxuXG5leHBvcnRzLmdldENvbW1vblBhdGggPSBmdW5jdGlvbiAoZmlsZVBhdGgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZmlsZVBhdGgpKSB7XG4gICAgZmlsZVBhdGggPSBmaWxlUGF0aFxuICAgICAgLmZpbHRlcihub3ROdWxsT3JFeGNsdXNpb24pXG4gICAgICAubWFwKHRoaXMuZ2V0Q29tbW9uUGF0aC5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiBjb21tb25kaXIoZmlsZVBhdGgpO1xuICB9XG5cbiAgdmFyIGdsb2JTdGFydEluZGV4ID0gZmlsZVBhdGguaW5kZXhPZignKicpO1xuICBpZiAoZ2xvYlN0YXJ0SW5kZXggIT09IC0xKSB7XG4gICAgZmlsZVBhdGggPSBmaWxlUGF0aC5zdWJzdHJpbmcoMCwgZ2xvYlN0YXJ0SW5kZXggKyAxKTtcbiAgfSBlbHNlIGlmIChmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSAmJiBmcy5zdGF0U3luYyhmaWxlUGF0aCkuaXNEaXJlY3RvcnkoKSkge1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfVxuXG4gIHJldHVybiBwYXRoLmRpcm5hbWUoZmlsZVBhdGgpO1xufTtcblxuZXhwb3J0cy5nbG9iaWZ5ID0gZnVuY3Rpb24gKGZpbGVQYXRoKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGZpbGVQYXRoKSkge1xuICAgIHJldHVybiBmaWxlUGF0aC5yZWR1Y2UoKG1lbW8sIHBhdHRlcm4pID0+IG1lbW8uY29uY2F0KHRoaXMuZ2xvYmlmeShwYXR0ZXJuKSksIFtdKTtcbiAgfVxuXG4gIGlmIChnbG9iLmhhc01hZ2ljKGZpbGVQYXRoKSkge1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfSBlbHNlIGlmICghZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcbiAgICAvLyBUaGUgdGFyZ2V0IG9mIGEgcGF0dGVybiB3aG8ncyBub3QgYSBnbG9iIGFuZCBkb2Vzbid0IG1hdGNoIGFuIGV4aXN0aW5nXG4gICAgLy8gZW50aXR5IG9uIHRoZSBkaXNrIGlzIGFtYmlndW91cy4gQXMgc3VjaCwgbWF0Y2ggYm90aCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMuXG4gICAgcmV0dXJuIFtcbiAgICAgIGZpbGVQYXRoLFxuICAgICAgcGF0aC5qb2luKGZpbGVQYXRoLCAnKionKVxuICAgIF07XG4gIH1cblxuICB2YXIgZnNTdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcbiAgaWYgKGZzU3RhdHMuaXNGaWxlKCkpIHtcbiAgICByZXR1cm4gZmlsZVBhdGg7XG4gIH0gZWxzZSBpZiAoZnNTdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgcmV0dXJuIHBhdGguam9pbihmaWxlUGF0aCwgJyoqJyk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGZpbGUgcGF0aCBvciBkaXJlY3RvcnkgcGF0aCBhcmUgc3VwcG9ydGVkLicpO1xufTtcbiJdfQ==