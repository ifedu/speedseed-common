var common = require('./common');
var fs = require('fs');
var path = require('path');
common.register('mkdir', _mkdir, {
    cmdOptions: {
        'p': 'fullpath',
    },
});
// Recursively creates 'dir'
function mkdirSyncRecursive(dir) {
    var baseDir = path.dirname(dir);
    // Prevents some potential problems arising from malformed UNCs or
    // insufficient permissions.
    /* istanbul ignore next */
    if (baseDir === dir) {
        common.error('dirname() failed: [' + dir + ']');
    }
    // Base dir exists, no recursion necessary
    if (fs.existsSync(baseDir)) {
        fs.mkdirSync(dir, parseInt('0777', 8));
        return;
    }
    // Base dir does not exist, go recursive
    mkdirSyncRecursive(baseDir);
    // Base dir created, can create dir
    fs.mkdirSync(dir, parseInt('0777', 8));
}
//@
//@ ### mkdir([options,] dir [, dir ...])
//@ ### mkdir([options,] dir_array)
//@ Available options:
//@
//@ + `-p`: full path (will create intermediate dirs if necessary)
//@
//@ Examples:
//@
//@ ```javascript
//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');
//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above
//@ ```
//@
//@ Creates directories.
function _mkdir(options, dirs) {
    if (!dirs)
        common.error('no paths given');
    if (typeof dirs === 'string') {
        dirs = [].slice.call(arguments, 1);
    }
    // if it's array leave it as it is
    dirs.forEach(function (dir) {
        try {
            var stat = fs.lstatSync(dir);
            if (!options.fullpath) {
                common.error('path already exists: ' + dir, { continue: true });
            }
            else if (stat.isFile()) {
                common.error('cannot create directory ' + dir + ': File exists', { continue: true });
            }
            return; // skip dir
        }
        catch (e) {
            // do nothing
        }
        // Base dir does not exist, and no -p option given
        var baseDir = path.dirname(dir);
        if (!fs.existsSync(baseDir) && !options.fullpath) {
            common.error('no such file or directory: ' + baseDir, { continue: true });
            return; // skip dir
        }
        try {
            if (options.fullpath) {
                mkdirSyncRecursive(path.resolve(dir));
            }
            else {
                fs.mkdirSync(dir, parseInt('0777', 8));
            }
        }
        catch (e) {
            var reason;
            if (e.code === 'EACCES') {
                reason = 'Permission denied';
            }
            else if (e.code === 'ENOTDIR' || e.code === 'ENOENT') {
                reason = 'Not a directory';
            }
            else {
                /* istanbul ignore next */
                throw e;
            }
            common.error('cannot create directory ' + dir + ': ' + reason, { continue: true });
        }
    });
    return '';
} // mkdir
module.exports = _mkdir;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXG1rZGlyLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXHNoZWxsanNcXHNyY1xcbWtkaXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO0lBQy9CLFVBQVUsRUFBRTtRQUNWLEdBQUcsRUFBRSxVQUFVO0tBQ2hCO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsNEJBQTRCO0FBQzVCLDRCQUE0QixHQUFHO0lBQzdCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFaEMsa0VBQWtFO0lBQ2xFLDRCQUE0QjtJQUM1QiwwQkFBMEI7SUFDMUIsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELDBDQUEwQztJQUMxQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcs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S0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixNQUFNLEdBQUcsbUJBQW1CLENBQUM7WUFDL0IsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztZQUM3QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sMEJBQTBCO2dCQUMxQixNQUFNLENBQUMsQ0FBQztZQUNWLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLDBCQUEwQixHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsTUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckYsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyxRQUFRO0FBQ1YsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdta2RpcicsIF9ta2Rpciwge1xuICBjbWRPcHRpb25zOiB7XG4gICAgJ3AnOiAnZnVsbHBhdGgnLFxuICB9LFxufSk7XG5cbi8vIFJlY3Vyc2l2ZWx5IGNyZWF0ZXMgJ2RpcidcbmZ1bmN0aW9uIG1rZGlyU3luY1JlY3Vyc2l2ZShkaXIpIHtcbiAgdmFyIGJhc2VEaXIgPSBwYXRoLmRpcm5hbWUoZGlyKTtcblxuICAvLyBQcmV2ZW50cyBzb21lIHBvdGVudGlhbCBwcm9ibGVtcyBhcmlzaW5nIGZyb20gbWFsZm9ybWVkIFVOQ3Mgb3JcbiAgLy8gaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoYmFzZURpciA9PT0gZGlyKSB7XG4gICAgY29tbW9uLmVycm9yKCdkaXJuYW1lKCkgZmFpbGVkOiBbJyArIGRpciArICddJyk7XG4gIH1cblxuICAvLyBCYXNlIGRpciBleGlzdHMsIG5vIHJlY3Vyc2lvbiBuZWNlc3NhcnlcbiAgaWYgKGZzLmV4aXN0c1N5bmMoYmFzZURpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZGlyLCBwYXJzZUludCgnMDc3NycsIDgpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBCYXNlIGRpciBkb2VzIG5vdCBleGlzdCwgZ28gcmVjdXJzaXZlXG4gIG1rZGlyU3luY1JlY3Vyc2l2ZShiYXNlRGlyKTtcblxuICAvLyBCYXNlIGRpciBjcmVhdGVkLCBjYW4gY3JlYXRlIGRpclxuICBmcy5ta2RpclN5bmMoZGlyLCBwYXJzZUludCgnMDc3NycsIDgpKTtcbn1cblxuLy9AXG4vL0AgIyMjIG1rZGlyKFtvcHRpb25zLF0gZGlyIFssIGRpciAuLi5dKVxuLy9AICMjIyBta2Rpcihbb3B0aW9ucyxdIGRpcl9hcnJheSlcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1wYDogZnVsbCBwYXRoICh3aWxsIGNyZWF0ZSBpbnRlcm1lZGlhdGUgZGlycyBpZiBuZWNlc3NhcnkpXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCBta2RpcignLXAnLCAnL3RtcC9hL2IvYy9kJywgJy90bXAvZS9mL2cnKTtcbi8vQCBta2RpcignLXAnLCBbJy90bXAvYS9iL2MvZCcsICcvdG1wL2UvZi9nJ10pOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgYGBgXG4vL0Bcbi8vQCBDcmVhdGVzIGRpcmVjdG9yaWVzLlxuZnVuY3Rpb24gX21rZGlyKG9wdGlvbnMsIGRpcnMpIHtcbiAgaWYgKCFkaXJzKSBjb21tb24uZXJyb3IoJ25vIHBhdGhzIGdpdmVuJyk7XG5cbiAgaWYgKHR5cGVvZiBkaXJzID09PSAnc3RyaW5nJykge1xuICAgIGRpcnMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIH1cbiAgLy8gaWYgaXQncyBhcnJheSBsZWF2ZSBpdCBhcyBpdCBpc1xuXG4gIGRpcnMuZm9yRWFjaChmdW5jdGlvbiAoZGlyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ID0gZnMubHN0YXRTeW5jKGRpcik7XG4gICAgICBpZiAoIW9wdGlvbnMuZnVsbHBhdGgpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdwYXRoIGFscmVhZHkgZXhpc3RzOiAnICsgZGlyLCB7IGNvbnRpbnVlOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICAgIGNvbW1vbi5lcnJvcignY2Fubm90IGNyZWF0ZSBkaXJlY3RvcnkgJyArIGRpciArICc6IEZpbGUgZXhpc3RzJywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjsgLy8gc2tpcCBkaXJcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuXG4gICAgLy8gQmFzZSBkaXIgZG9lcyBub3QgZXhpc3QsIGFuZCBubyAtcCBvcHRpb24gZ2l2ZW5cbiAgICB2YXIgYmFzZURpciA9IHBhdGguZGlybmFtZShkaXIpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhiYXNlRGlyKSAmJiAhb3B0aW9ucy5mdWxscGF0aCkge1xuICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgYmFzZURpciwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjsgLy8gc2tpcCBkaXJcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnMuZnVsbHBhdGgpIHtcbiAgICAgICAgbWtkaXJTeW5jUmVjdXJzaXZlKHBhdGgucmVzb2x2ZShkaXIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhkaXIsIHBhcnNlSW50KCcwNzc3JywgOCkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhciByZWFzb247XG4gICAgICBpZiAoZS5jb2RlID09PSAnRUFDQ0VTJykge1xuICAgICAgICByZWFzb24gPSAnUGVybWlzc2lvbiBkZW5pZWQnO1xuICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09ICdFTk9URElSJyB8fCBlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIHJlYXNvbiA9ICdOb3QgYSBkaXJlY3RvcnknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGNvbW1vbi5lcnJvcignY2Fubm90IGNyZWF0ZSBkaXJlY3RvcnkgJyArIGRpciArICc6ICcgKyByZWFzb24sIHsgY29udGludWU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuICcnO1xufSAvLyBta2RpclxubW9kdWxlLmV4cG9ydHMgPSBfbWtkaXI7XG4iXX0=