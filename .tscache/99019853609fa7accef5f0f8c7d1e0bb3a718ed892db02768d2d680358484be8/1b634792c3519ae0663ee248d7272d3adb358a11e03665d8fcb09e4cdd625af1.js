var common = require('./common');
var fs = require('fs');
common.register('sed', _sed, {
    globStart: 3,
    canReceivePipe: true,
    cmdOptions: {
        'i': 'inplace',
    },
});
//@
//@ ### sed([options,] search_regex, replacement, file [, file ...])
//@ ### sed([options,] search_regex, replacement, file_array)
//@ Available options:
//@
//@ + `-i`: Replace contents of 'file' in-place. _Note that no backups will be created!_
//@
//@ Examples:
//@
//@ ```javascript
//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');
//@ sed(/.*DELETE_THIS_LINE.*\n/, '', 'source.js');
//@ ```
//@
//@ Reads an input string from `files` and performs a JavaScript `replace()` on the input
//@ using the given search regex and replacement string or function. Returns the new string after replacement.
//@
//@ Note:
//@
//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified
//@ using the `$n` syntax:
//@
//@ ```javascript
//@ sed(/(\w+)\s(\w+)/, '$2, $1', 'file.txt');
//@ ```
function _sed(options, regex, replacement, files) {
    // Check if this is coming from a pipe
    var pipe = common.readFromPipe();
    if (typeof replacement !== 'string' && typeof replacement !== 'function') {
        if (typeof replacement === 'number') {
            replacement = replacement.toString(); // fallback
        }
        else {
            common.error('invalid replacement string');
        }
    }
    // Convert all search strings to RegExp
    if (typeof regex === 'string') {
        regex = RegExp(regex);
    }
    if (!files && !pipe) {
        common.error('no files given');
    }
    files = [].slice.call(arguments, 3);
    if (pipe) {
        files.unshift('-');
    }
    var sed = [];
    files.forEach(function (file) {
        if (!fs.existsSync(file) && file !== '-') {
            common.error('no such file or directory: ' + file, 2, { continue: true });
            return;
        }
        var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');
        var lines = contents.split(/\r*\n/);
        var result = lines.map(function (line) {
            return line.replace(regex, replacement);
        }).join('\n');
        sed.push(result);
        if (options.inplace) {
            fs.writeFileSync(file, result, 'utf8');
        }
    });
    return sed.join('\n');
}
module.exports = _sed;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXHNlZC5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXHNlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtJQUMzQixTQUFTLEVBQUUsQ0FBQztJQUNaLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLFVBQVUsRUFBRTtRQUNWLEdBQUcsRUFBRSxTQUFTO0tBQ2Y7Q0FDRixDQUFDLENBQUM7QUFFSCxHQUFHO0FBQ0gsb0VBQW9FO0FBQ3BFLDZEQUE2RDtBQUM3RCxzQkFBc0I7QUFDdEIsR0FBRztBQUNILHdGQUF3RjtBQUN4RixHQUFHO0FBQ0gsYUFBYTtBQUNiLEdBQUc7QUFDSCxpQkFBaUI7QUFDakIsd0RBQXdEO0FBQ3hELG1EQUFtRDtBQUNuRCxPQUFPO0FBQ1AsR0FBRztBQUNILHlGQUF5RjtBQUN6Riw4R0FBOEc7QUFDOUcsR0FBRztBQUNILFNBQVM7QUFDVCxHQUFHO0FBQ0gsd0ZBQXdGO0FBQ3hGLDBCQUEwQjtBQUMxQixHQUFHO0FBQ0gsaUJBQWlCO0FBQ2pCLDhDQUE4QztBQUM5QyxPQUFPO0FBQ1AsY0FBYyxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLO0lBQzlDLHNDQUFzQztJQUN0QyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFFakMsRUFBRSxDQUFDLENBQUMsT0FBTyxXQUFXLEtBQUssUUFBUSxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDekUsRUFBRSxDQUFDLENBQUMsT0FBTyxXQUFXLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNwQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsV0FBVztRQUNuRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNILENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXBDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDVCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSTtRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDMUUsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUVELElBQUksUUFBUSxHQUFHLElBQUksS0FBSyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUk7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVkLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDcEIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFDRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdzZWQnLCBfc2VkLCB7XG4gIGdsb2JTdGFydDogMywgLy8gZG9uJ3QgZ2xvYi1leHBhbmQgcmVnZXhlc1xuICBjYW5SZWNlaXZlUGlwZTogdHJ1ZSxcbiAgY21kT3B0aW9uczoge1xuICAgICdpJzogJ2lucGxhY2UnLFxuICB9LFxufSk7XG5cbi8vQFxuLy9AICMjIyBzZWQoW29wdGlvbnMsXSBzZWFyY2hfcmVnZXgsIHJlcGxhY2VtZW50LCBmaWxlIFssIGZpbGUgLi4uXSlcbi8vQCAjIyMgc2VkKFtvcHRpb25zLF0gc2VhcmNoX3JlZ2V4LCByZXBsYWNlbWVudCwgZmlsZV9hcnJheSlcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1pYDogUmVwbGFjZSBjb250ZW50cyBvZiAnZmlsZScgaW4tcGxhY2UuIF9Ob3RlIHRoYXQgbm8gYmFja3VwcyB3aWxsIGJlIGNyZWF0ZWQhX1xuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0Agc2VkKCctaScsICdQUk9HUkFNX1ZFUlNJT04nLCAndjAuMS4zJywgJ3NvdXJjZS5qcycpO1xuLy9AIHNlZCgvLipERUxFVEVfVEhJU19MSU5FLipcXG4vLCAnJywgJ3NvdXJjZS5qcycpO1xuLy9AIGBgYFxuLy9AXG4vL0AgUmVhZHMgYW4gaW5wdXQgc3RyaW5nIGZyb20gYGZpbGVzYCBhbmQgcGVyZm9ybXMgYSBKYXZhU2NyaXB0IGByZXBsYWNlKClgIG9uIHRoZSBpbnB1dFxuLy9AIHVzaW5nIHRoZSBnaXZlbiBzZWFyY2ggcmVnZXggYW5kIHJlcGxhY2VtZW50IHN0cmluZyBvciBmdW5jdGlvbi4gUmV0dXJucyB0aGUgbmV3IHN0cmluZyBhZnRlciByZXBsYWNlbWVudC5cbi8vQFxuLy9AIE5vdGU6XG4vL0Bcbi8vQCBMaWtlIHVuaXggYHNlZGAsIFNoZWxsSlMgYHNlZGAgc3VwcG9ydHMgY2FwdHVyZSBncm91cHMuIENhcHR1cmUgZ3JvdXBzIGFyZSBzcGVjaWZpZWRcbi8vQCB1c2luZyB0aGUgYCRuYCBzeW50YXg6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0Agc2VkKC8oXFx3KylcXHMoXFx3KykvLCAnJDIsICQxJywgJ2ZpbGUudHh0Jyk7XG4vL0AgYGBgXG5mdW5jdGlvbiBfc2VkKG9wdGlvbnMsIHJlZ2V4LCByZXBsYWNlbWVudCwgZmlsZXMpIHtcbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBjb21pbmcgZnJvbSBhIHBpcGVcbiAgdmFyIHBpcGUgPSBjb21tb24ucmVhZEZyb21QaXBlKCk7XG5cbiAgaWYgKHR5cGVvZiByZXBsYWNlbWVudCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHJlcGxhY2VtZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiByZXBsYWNlbWVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQudG9TdHJpbmcoKTsgLy8gZmFsbGJhY2tcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbW9uLmVycm9yKCdpbnZhbGlkIHJlcGxhY2VtZW50IHN0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbnZlcnQgYWxsIHNlYXJjaCBzdHJpbmdzIHRvIFJlZ0V4cFxuICBpZiAodHlwZW9mIHJlZ2V4ID09PSAnc3RyaW5nJykge1xuICAgIHJlZ2V4ID0gUmVnRXhwKHJlZ2V4KTtcbiAgfVxuXG4gIGlmICghZmlsZXMgJiYgIXBpcGUpIHtcbiAgICBjb21tb24uZXJyb3IoJ25vIGZpbGVzIGdpdmVuJyk7XG4gIH1cblxuICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcblxuICBpZiAocGlwZSkge1xuICAgIGZpbGVzLnVuc2hpZnQoJy0nKTtcbiAgfVxuXG4gIHZhciBzZWQgPSBbXTtcbiAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlKSAmJiBmaWxlICE9PSAnLScpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogJyArIGZpbGUsIDIsIHsgY29udGludWU6IHRydWUgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnRzID0gZmlsZSA9PT0gJy0nID8gcGlwZSA6IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuICAgIHZhciBsaW5lcyA9IGNvbnRlbnRzLnNwbGl0KC9cXHIqXFxuLyk7XG4gICAgdmFyIHJlc3VsdCA9IGxpbmVzLm1hcChmdW5jdGlvbiAobGluZSkge1xuICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZShyZWdleCwgcmVwbGFjZW1lbnQpO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xuXG4gICAgc2VkLnB1c2gocmVzdWx0KTtcblxuICAgIGlmIChvcHRpb25zLmlucGxhY2UpIHtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgcmVzdWx0LCAndXRmOCcpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNlZC5qb2luKCdcXG4nKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3NlZDtcbiJdfQ==