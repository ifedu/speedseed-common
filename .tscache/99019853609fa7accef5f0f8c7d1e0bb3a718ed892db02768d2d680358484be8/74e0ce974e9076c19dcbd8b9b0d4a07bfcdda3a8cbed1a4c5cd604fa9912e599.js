'use strict';
// there's 3 implementations written in increasing order of efficiency
// 1 - no Set type is defined
function uniqNoSet(arr) {
    var ret = [];
    for (var i = 0; i < arr.length; i++) {
        if (ret.indexOf(arr[i]) === -1) {
            ret.push(arr[i]);
        }
    }
    return ret;
}
// 2 - a simple Set type is defined
function uniqSet(arr) {
    var seen = new Set();
    return arr.filter(function (el) {
        if (!seen.has(el)) {
            seen.add(el);
            return true;
        }
        return false;
    });
}
// 3 - a standard Set type is defined and it has a forEach method
function uniqSetWithForEach(arr) {
    var ret = [];
    (new Set(arr)).forEach(function (el) {
        ret.push(el);
    });
    return ret;
}
// V8 currently has a broken implementation
// https://github.com/joyent/node/issues/8449
function doesForEachActuallyWork() {
    var ret = false;
    (new Set([true])).forEach(function (el) {
        ret = el;
    });
    return ret === true;
}
if ('Set' in global) {
    if (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {
        module.exports = uniqSetWithForEach;
    }
    else {
        module.exports = uniqSet;
    }
}
else {
    module.exports = uniqNoSet;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxhcnJheS11bmlxXFxpbmRleC5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxhcnJheS11bmlxXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixzRUFBc0U7QUFFdEUsNkJBQTZCO0FBQzdCLG1CQUFtQixHQUFHO0lBQ3JCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUViLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsQ0FBQztJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ1osQ0FBQztBQUVELG1DQUFtQztBQUNuQyxpQkFBaUIsR0FBRztJQUNuQixJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxpRUFBaUU7QUFDakUsNEJBQTRCLEdBQUc7SUFDOUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBRWIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFFRCwyQ0FBMkM7QUFDM0MsNkNBQTZDO0FBQzdDO0lBQ0MsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBRWhCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUNyQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ1YsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQztBQUNyQixDQUFDO0FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQztJQUNyQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0FBQ0YsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ1AsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gdGhlcmUncyAzIGltcGxlbWVudGF0aW9ucyB3cml0dGVuIGluIGluY3JlYXNpbmcgb3JkZXIgb2YgZWZmaWNpZW5jeVxuXG4vLyAxIC0gbm8gU2V0IHR5cGUgaXMgZGVmaW5lZFxuZnVuY3Rpb24gdW5pcU5vU2V0KGFycikge1xuXHR2YXIgcmV0ID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAocmV0LmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHtcblx0XHRcdHJldC5wdXNoKGFycltpXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuLy8gMiAtIGEgc2ltcGxlIFNldCB0eXBlIGlzIGRlZmluZWRcbmZ1bmN0aW9uIHVuaXFTZXQoYXJyKSB7XG5cdHZhciBzZWVuID0gbmV3IFNldCgpO1xuXHRyZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcblx0XHRpZiAoIXNlZW4uaGFzKGVsKSkge1xuXHRcdFx0c2Vlbi5hZGQoZWwpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KTtcbn1cblxuLy8gMyAtIGEgc3RhbmRhcmQgU2V0IHR5cGUgaXMgZGVmaW5lZCBhbmQgaXQgaGFzIGEgZm9yRWFjaCBtZXRob2RcbmZ1bmN0aW9uIHVuaXFTZXRXaXRoRm9yRWFjaChhcnIpIHtcblx0dmFyIHJldCA9IFtdO1xuXG5cdChuZXcgU2V0KGFycikpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG5cdFx0cmV0LnB1c2goZWwpO1xuXHR9KTtcblxuXHRyZXR1cm4gcmV0O1xufVxuXG4vLyBWOCBjdXJyZW50bHkgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzg0NDlcbmZ1bmN0aW9uIGRvZXNGb3JFYWNoQWN0dWFsbHlXb3JrKCkge1xuXHR2YXIgcmV0ID0gZmFsc2U7XG5cblx0KG5ldyBTZXQoW3RydWVdKSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0XHRyZXQgPSBlbDtcblx0fSk7XG5cblx0cmV0dXJuIHJldCA9PT0gdHJ1ZTtcbn1cblxuaWYgKCdTZXQnIGluIGdsb2JhbCkge1xuXHRpZiAodHlwZW9mIFNldC5wcm90b3R5cGUuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJyAmJiBkb2VzRm9yRWFjaEFjdHVhbGx5V29yaygpKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSB1bmlxU2V0V2l0aEZvckVhY2g7XG5cdH0gZWxzZSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSB1bmlxU2V0O1xuXHR9XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHVuaXFOb1NldDtcbn1cbiJdfQ==