'use strict';
var util = require('util');
var events = require('events');
var _ = require('lodash');
var SubQueue = require('./subqueue');
module.exports = Queue;
/**
 * Queue constructor
 * @param {String[]} [subQueue] The order of the sub-queues. First one will be runned first.
 */
function Queue(subQueues) {
    subQueues = subQueues || [];
    subQueues.push('default');
    subQueues = _.uniq(subQueues);
    this.queueNames = subQueues;
    this.__queues__ = {};
    subQueues.forEach(function (name) {
        this.__queues__[name] = new SubQueue();
    }.bind(this));
}
util.inherits(Queue, events.EventEmitter);
/**
 * Add a task to a queue.
 * @param {String}   [name='default']  The sub-queue to append the task
 * @param {Function} task
 * @param {Object}   [opt]             Options hash
 * @param {String}   [opt.once]        If a task with the same `once` value is inside the
 *                                     queue, don't add this task.
 * @param {Boolean}  [opt.run]         If `run` is false, don't run the task.
 */
Queue.prototype.add = function (name, task, opt) {
    if (typeof name !== 'string') {
        opt = task;
        task = name;
        name = 'default';
    }
    this.__queues__[name].push(task, opt);
    // don't run the tasks if `opt.run` is false
    if (opt && opt.run === false)
        return;
    setImmediate(this.run.bind(this));
};
/**
 * Start emptying the queues
 * Tasks are always run from the higher priority queue down to the lowest. After each
 * task complete, the process is re-runned from the first queue until a task is found.
 *
 * Tasks are passed a `callback` method which should be called once the task is over.
 */
Queue.prototype.run = function () {
    if (this.running)
        return;
    this.running = true;
    this._exec(function () {
        this.running = false;
        if (_(this.__queues__).map('__queue__').flatten().value().length === 0) {
            this.emit('end');
        }
    }.bind(this));
};
Queue.prototype._exec = function (done) {
    var pointer = -1;
    var names = Object.keys(this.__queues__);
    var next = function next() {
        pointer++;
        if (pointer >= names.length)
            return done();
        this.__queues__[names[pointer]].run(next.bind(this), this._exec.bind(this, done));
    }.bind(this);
    next();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxncm91cGVkLXF1ZXVlXFxsaWJcXHF1ZXVlLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGdyb3VwZWQtcXVldWVcXGxpYlxccXVldWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRXZCOzs7R0FHRztBQUVILGVBQWdCLFNBQVM7SUFDdkIsU0FBUyxHQUFHLFNBQVMsSUFBSSxFQUFFLENBQUM7SUFDNUIsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQixTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU5QixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUVyQixTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSTtRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLENBQUM7QUFFRCxJQUFJLENBQUMsUUFBUSxDQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFFLENBQUM7QUFFNUM7Ozs7Ozs7O0dBUUc7QUFFSCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRztJQUM3QyxFQUFFLENBQUMsQ0FBRSxPQUFPLElBQUksS0FBSyxRQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9CLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ1osSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBRXhDLDRDQUE0QztJQUM1QyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUM7UUFBQyxNQUFNLENBQUM7SUFDckMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBRUgsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUc7SUFDcEIsRUFBRSxDQUFDLENBQUUsSUFBSSxDQUFDLE9BQVEsQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUUzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSTtJQUNwQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqQixJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUUsQ0FBQztJQUUzQyxJQUFJLElBQUksR0FBRztRQUNULE9BQU8sRUFBRSxDQUFDO1FBQ1YsRUFBRSxDQUFDLENBQUUsT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFPLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUUsQ0FBQztJQUN4RixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWIsSUFBSSxFQUFFLENBQUM7QUFDVCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgU3ViUXVldWUgPSByZXF1aXJlKCcuL3N1YnF1ZXVlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG5cbi8qKlxuICogUXVldWUgY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nW119IFtzdWJRdWV1ZV0gVGhlIG9yZGVyIG9mIHRoZSBzdWItcXVldWVzLiBGaXJzdCBvbmUgd2lsbCBiZSBydW5uZWQgZmlyc3QuXG4gKi9cblxuZnVuY3Rpb24gUXVldWUoIHN1YlF1ZXVlcyApIHtcbiAgc3ViUXVldWVzID0gc3ViUXVldWVzIHx8IFtdO1xuICBzdWJRdWV1ZXMucHVzaCgnZGVmYXVsdCcpO1xuICBzdWJRdWV1ZXMgPSBfLnVuaXEoc3ViUXVldWVzKTtcblxuICB0aGlzLnF1ZXVlTmFtZXMgPSBzdWJRdWV1ZXM7XG4gIHRoaXMuX19xdWV1ZXNfXyA9IHt9O1xuXG4gIHN1YlF1ZXVlcy5mb3JFYWNoKGZ1bmN0aW9uKCBuYW1lICkge1xuICAgIHRoaXMuX19xdWV1ZXNfX1tuYW1lXSA9IG5ldyBTdWJRdWV1ZSgpO1xuICB9LmJpbmQodGhpcykpO1xufVxuXG51dGlsLmluaGVyaXRzKCBRdWV1ZSwgZXZlbnRzLkV2ZW50RW1pdHRlciApO1xuXG4vKipcbiAqIEFkZCBhIHRhc2sgdG8gYSBxdWV1ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSAgIFtuYW1lPSdkZWZhdWx0J10gIFRoZSBzdWItcXVldWUgdG8gYXBwZW5kIHRoZSB0YXNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0YXNrXG4gKiBAcGFyYW0ge09iamVjdH0gICBbb3B0XSAgICAgICAgICAgICBPcHRpb25zIGhhc2hcbiAqIEBwYXJhbSB7U3RyaW5nfSAgIFtvcHQub25jZV0gICAgICAgIElmIGEgdGFzayB3aXRoIHRoZSBzYW1lIGBvbmNlYCB2YWx1ZSBpcyBpbnNpZGUgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZSwgZG9uJ3QgYWRkIHRoaXMgdGFzay5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gIFtvcHQucnVuXSAgICAgICAgIElmIGBydW5gIGlzIGZhbHNlLCBkb24ndCBydW4gdGhlIHRhc2suXG4gKi9cblxuUXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKCBuYW1lLCB0YXNrLCBvcHQgKSB7XG4gIGlmICggdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnICkge1xuICAgIG9wdCA9IHRhc2s7XG4gICAgdGFzayA9IG5hbWU7XG4gICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgfVxuXG4gIHRoaXMuX19xdWV1ZXNfX1tuYW1lXS5wdXNoKCB0YXNrLCBvcHQgKTtcblxuICAvLyBkb24ndCBydW4gdGhlIHRhc2tzIGlmIGBvcHQucnVuYCBpcyBmYWxzZVxuICBpZiAob3B0ICYmIG9wdC5ydW4gPT09IGZhbHNlKSByZXR1cm47XG4gIHNldEltbWVkaWF0ZSh0aGlzLnJ1bi5iaW5kKHRoaXMpKTtcbn07XG5cbi8qKlxuICogU3RhcnQgZW1wdHlpbmcgdGhlIHF1ZXVlc1xuICogVGFza3MgYXJlIGFsd2F5cyBydW4gZnJvbSB0aGUgaGlnaGVyIHByaW9yaXR5IHF1ZXVlIGRvd24gdG8gdGhlIGxvd2VzdC4gQWZ0ZXIgZWFjaFxuICogdGFzayBjb21wbGV0ZSwgdGhlIHByb2Nlc3MgaXMgcmUtcnVubmVkIGZyb20gdGhlIGZpcnN0IHF1ZXVlIHVudGlsIGEgdGFzayBpcyBmb3VuZC5cbiAqXG4gKiBUYXNrcyBhcmUgcGFzc2VkIGEgYGNhbGxiYWNrYCBtZXRob2Qgd2hpY2ggc2hvdWxkIGJlIGNhbGxlZCBvbmNlIHRoZSB0YXNrIGlzIG92ZXIuXG4gKi9cblxuUXVldWUucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMucnVubmluZyApIHJldHVybjtcblxuICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICB0aGlzLl9leGVjKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIGlmIChfKHRoaXMuX19xdWV1ZXNfXykubWFwKCdfX3F1ZXVlX18nKS5mbGF0dGVuKCkudmFsdWUoKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZW1pdCgnZW5kJyk7XG4gICAgfVxuICB9LmJpbmQodGhpcykpO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9leGVjID0gZnVuY3Rpb24oIGRvbmUgKSB7XG4gIHZhciBwb2ludGVyID0gLTE7XG4gIHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKCB0aGlzLl9fcXVldWVzX18gKTtcblxuICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgcG9pbnRlcisrO1xuICAgIGlmICggcG9pbnRlciA+PSBuYW1lcy5sZW5ndGggKSByZXR1cm4gZG9uZSgpO1xuICAgIHRoaXMuX19xdWV1ZXNfX1sgbmFtZXNbcG9pbnRlcl0gXS5ydW4oIG5leHQuYmluZCh0aGlzKSwgdGhpcy5fZXhlYy5iaW5kKHRoaXMsIGRvbmUpICk7XG4gIH0uYmluZCh0aGlzKTtcblxuICBuZXh0KCk7XG59O1xuIl19