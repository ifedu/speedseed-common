'use strict';
var path = require('path');
var fs = require('graceful-fs');
var stripBom = require('strip-bom');
var stripBomStream = require('strip-bom-stream');
var File = require('vinyl');
var pify = require('pify');
var Promise = require('pinkie-promise');
var fsP = pify(fs, Promise);
exports.read = function (pth, opts) {
    opts = opts || {};
    var cwd = opts.cwd || process.cwd();
    var base = opts.base || cwd;
    pth = path.resolve(cwd, pth);
    return fsP.stat(pth).then(function (stat) {
        var file = new File({
            cwd: cwd,
            base: base,
            path: pth,
            stat: stat
        });
        if (opts.read === false) {
            return file;
        }
        if (opts.buffer === false) {
            file.contents = fs.createReadStream(pth).pipe(stripBomStream());
            return file;
        }
        return fsP.readFile(pth).then(function (contents) {
            file.contents = stripBom(contents);
            return file;
        });
    });
};
exports.readSync = function (pth, opts) {
    opts = opts || {};
    var cwd = opts.cwd || process.cwd();
    var base = opts.base || cwd;
    pth = path.resolve(cwd, pth);
    var contents;
    if (opts.read !== false) {
        contents = opts.buffer === false ?
            fs.createReadStream(pth).pipe(stripBomStream()) :
            stripBom(fs.readFileSync(pth));
    }
    return new File({
        cwd: cwd,
        base: base,
        path: pth,
        stat: fs.statSync(pth),
        contents: contents
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx2aW55bC1maWxlXFxpbmRleC5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx2aW55bC1maWxlXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2hDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNqRCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFNUIsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsRUFBRSxJQUFJO0lBQ2pDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRWxCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3BDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDO0lBRTVCLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUU3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJO1FBQ3ZDLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDO1lBQ25CLEdBQUcsRUFBRSxHQUFHO1lBQ1IsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsR0FBRztZQUNULElBQUksRUFBRSxJQUFJO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsUUFBUTtZQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxHQUFHLEVBQUUsSUFBSTtJQUNyQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUVsQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNwQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztJQUU1QixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFN0IsSUFBSSxRQUFRLENBQUM7SUFFYixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSztZQUMvQixFQUFFLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQy9DLFFBQVEsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQztRQUNmLEdBQUcsRUFBRSxHQUFHO1FBQ1IsSUFBSSxFQUFFLElBQUk7UUFDVixJQUFJLEVBQUUsR0FBRztRQUNULElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN0QixRQUFRLEVBQUUsUUFBUTtLQUNsQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2dyYWNlZnVsLWZzJyk7XG52YXIgc3RyaXBCb20gPSByZXF1aXJlKCdzdHJpcC1ib20nKTtcbnZhciBzdHJpcEJvbVN0cmVhbSA9IHJlcXVpcmUoJ3N0cmlwLWJvbS1zdHJlYW0nKTtcbnZhciBGaWxlID0gcmVxdWlyZSgndmlueWwnKTtcbnZhciBwaWZ5ID0gcmVxdWlyZSgncGlmeScpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdwaW5raWUtcHJvbWlzZScpO1xudmFyIGZzUCA9IHBpZnkoZnMsIFByb21pc2UpO1xuXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAocHRoLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXG5cdHZhciBjd2QgPSBvcHRzLmN3ZCB8fCBwcm9jZXNzLmN3ZCgpO1xuXHR2YXIgYmFzZSA9IG9wdHMuYmFzZSB8fCBjd2Q7XG5cblx0cHRoID0gcGF0aC5yZXNvbHZlKGN3ZCwgcHRoKTtcblxuXHRyZXR1cm4gZnNQLnN0YXQocHRoKS50aGVuKGZ1bmN0aW9uIChzdGF0KSB7XG5cdFx0dmFyIGZpbGUgPSBuZXcgRmlsZSh7XG5cdFx0XHRjd2Q6IGN3ZCxcblx0XHRcdGJhc2U6IGJhc2UsXG5cdFx0XHRwYXRoOiBwdGgsXG5cdFx0XHRzdGF0OiBzdGF0XG5cdFx0fSk7XG5cblx0XHRpZiAob3B0cy5yZWFkID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuIGZpbGU7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdHMuYnVmZmVyID09PSBmYWxzZSkge1xuXHRcdFx0ZmlsZS5jb250ZW50cyA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocHRoKS5waXBlKHN0cmlwQm9tU3RyZWFtKCkpO1xuXHRcdFx0cmV0dXJuIGZpbGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZzUC5yZWFkRmlsZShwdGgpLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnRzKSB7XG5cdFx0XHRmaWxlLmNvbnRlbnRzID0gc3RyaXBCb20oY29udGVudHMpO1xuXHRcdFx0cmV0dXJuIGZpbGU7XG5cdFx0fSk7XG5cdH0pO1xufTtcblxuZXhwb3J0cy5yZWFkU3luYyA9IGZ1bmN0aW9uIChwdGgsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cblx0dmFyIGN3ZCA9IG9wdHMuY3dkIHx8IHByb2Nlc3MuY3dkKCk7XG5cdHZhciBiYXNlID0gb3B0cy5iYXNlIHx8IGN3ZDtcblxuXHRwdGggPSBwYXRoLnJlc29sdmUoY3dkLCBwdGgpO1xuXG5cdHZhciBjb250ZW50cztcblxuXHRpZiAob3B0cy5yZWFkICE9PSBmYWxzZSkge1xuXHRcdGNvbnRlbnRzID0gb3B0cy5idWZmZXIgPT09IGZhbHNlID9cblx0XHRcdGZzLmNyZWF0ZVJlYWRTdHJlYW0ocHRoKS5waXBlKHN0cmlwQm9tU3RyZWFtKCkpIDpcblx0XHRcdHN0cmlwQm9tKGZzLnJlYWRGaWxlU3luYyhwdGgpKTtcblx0fVxuXG5cdHJldHVybiBuZXcgRmlsZSh7XG5cdFx0Y3dkOiBjd2QsXG5cdFx0YmFzZTogYmFzZSxcblx0XHRwYXRoOiBwdGgsXG5cdFx0c3RhdDogZnMuc3RhdFN5bmMocHRoKSxcblx0XHRjb250ZW50czogY29udGVudHNcblx0fSk7XG59O1xuIl19