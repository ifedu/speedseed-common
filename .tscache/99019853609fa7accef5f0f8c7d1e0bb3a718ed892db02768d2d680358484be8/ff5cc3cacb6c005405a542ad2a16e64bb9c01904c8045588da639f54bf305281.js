'use strict';
var fs = require('fs');
var readChunk = require('read-chunk');
var istextorbinary = require('istextorbinary');
var dateFormat = require('dateformat');
var prettyBytes = require('pretty-bytes');
var Table = require('cli-table');
module.exports = {
    isBinary: function (existingFilePath, newFileContents) {
        var existingHeader = readChunk.sync(existingFilePath, 0, 512);
        return istextorbinary.isBinarySync(undefined, existingHeader) || istextorbinary.isBinarySync(undefined, newFileContents);
    },
    diff: function (existingFilePath, newFileContents) {
        var existingStat = fs.statSync(existingFilePath);
        var table = new Table({
            head: ['', 'Existing', 'Replacement', 'Diff']
        });
        var sizeDiff;
        if (existingStat.size > newFileContents.length) {
            sizeDiff = '-';
        }
        else {
            sizeDiff = '+';
        }
        sizeDiff += prettyBytes(Math.abs(existingStat.size - newFileContents.length));
        table.push([
            'Size',
            prettyBytes(existingStat.size),
            prettyBytes(newFileContents.length),
            sizeDiff
        ], [
            'Last modified',
            dateFormat(existingStat.mtime),
            '',
            ''
        ]);
        return table.toString();
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx5ZW9tYW4tZ2VuZXJhdG9yXFxsaWJcXHV0aWxcXGJpbmFyeS1kaWZmLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXHllb21hbi1nZW5lcmF0b3JcXGxpYlxcdXRpbFxcYmluYXJ5LWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMvQyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVqQyxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsUUFBUSxFQUFFLFVBQVUsZ0JBQWdCLEVBQUUsZUFBZTtRQUNuRCxJQUFJLGNBQWMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDM0gsQ0FBQztJQUVELElBQUksRUFBRSxVQUFVLGdCQUFnQixFQUFFLGVBQWU7UUFDL0MsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pELElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO1lBQ3BCLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQztTQUM5QyxDQUFDLENBQUM7UUFFSCxJQUFJLFFBQVEsQ0FBQztRQUViLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDL0MsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNqQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxRQUFRLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU5RSxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ1QsTUFBTTtZQUNOLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQzlCLFdBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO1lBQ25DLFFBQVE7U0FDVCxFQUFFO1lBQ0QsZUFBZTtZQUNmLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQzlCLEVBQUU7WUFDRixFQUFFO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcmVhZENodW5rID0gcmVxdWlyZSgncmVhZC1jaHVuaycpO1xudmFyIGlzdGV4dG9yYmluYXJ5ID0gcmVxdWlyZSgnaXN0ZXh0b3JiaW5hcnknKTtcbnZhciBkYXRlRm9ybWF0ID0gcmVxdWlyZSgnZGF0ZWZvcm1hdCcpO1xudmFyIHByZXR0eUJ5dGVzID0gcmVxdWlyZSgncHJldHR5LWJ5dGVzJyk7XG52YXIgVGFibGUgPSByZXF1aXJlKCdjbGktdGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQmluYXJ5OiBmdW5jdGlvbiAoZXhpc3RpbmdGaWxlUGF0aCwgbmV3RmlsZUNvbnRlbnRzKSB7XG4gICAgdmFyIGV4aXN0aW5nSGVhZGVyID0gcmVhZENodW5rLnN5bmMoZXhpc3RpbmdGaWxlUGF0aCwgMCwgNTEyKTtcbiAgICByZXR1cm4gaXN0ZXh0b3JiaW5hcnkuaXNCaW5hcnlTeW5jKHVuZGVmaW5lZCwgZXhpc3RpbmdIZWFkZXIpIHx8IGlzdGV4dG9yYmluYXJ5LmlzQmluYXJ5U3luYyh1bmRlZmluZWQsIG5ld0ZpbGVDb250ZW50cyk7XG4gIH0sXG5cbiAgZGlmZjogZnVuY3Rpb24gKGV4aXN0aW5nRmlsZVBhdGgsIG5ld0ZpbGVDb250ZW50cykge1xuICAgIHZhciBleGlzdGluZ1N0YXQgPSBmcy5zdGF0U3luYyhleGlzdGluZ0ZpbGVQYXRoKTtcbiAgICB2YXIgdGFibGUgPSBuZXcgVGFibGUoe1xuICAgICAgaGVhZDogWycnLCAnRXhpc3RpbmcnLCAnUmVwbGFjZW1lbnQnLCAnRGlmZiddXG4gICAgfSk7XG5cbiAgICB2YXIgc2l6ZURpZmY7XG5cbiAgICBpZiAoZXhpc3RpbmdTdGF0LnNpemUgPiBuZXdGaWxlQ29udGVudHMubGVuZ3RoKSB7XG4gICAgICBzaXplRGlmZiA9ICctJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZURpZmYgPSAnKyc7XG4gICAgfVxuXG4gICAgc2l6ZURpZmYgKz0gcHJldHR5Qnl0ZXMoTWF0aC5hYnMoZXhpc3RpbmdTdGF0LnNpemUgLSBuZXdGaWxlQ29udGVudHMubGVuZ3RoKSk7XG5cbiAgICB0YWJsZS5wdXNoKFtcbiAgICAgICdTaXplJyxcbiAgICAgIHByZXR0eUJ5dGVzKGV4aXN0aW5nU3RhdC5zaXplKSxcbiAgICAgIHByZXR0eUJ5dGVzKG5ld0ZpbGVDb250ZW50cy5sZW5ndGgpLFxuICAgICAgc2l6ZURpZmZcbiAgICBdLCBbXG4gICAgICAnTGFzdCBtb2RpZmllZCcsXG4gICAgICBkYXRlRm9ybWF0KGV4aXN0aW5nU3RhdC5tdGltZSksXG4gICAgICAnJyxcbiAgICAgICcnXG4gICAgXSk7XG5cbiAgICByZXR1cm4gdGFibGUudG9TdHJpbmcoKTtcbiAgfVxufTtcbiJdfQ==