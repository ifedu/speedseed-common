/**
 * Repeats a string.
 *
 * @param {String} char(s)
 * @param {Number} number of times
 * @return {String} repeated string
 */
exports.repeat = function (str, times) {
    return Array(times + 1).join(str);
};
/**
 * Pads a string
 *
 * @api public
 */
exports.pad = function (str, len, pad, dir) {
    if (len + 1 >= str.length)
        switch (dir) {
            case 'left':
                str = Array(len + 1 - str.length).join(pad) + str;
                break;
            case 'both':
                var right = Math.ceil((padlen = len - str.length) / 2);
                var left = padlen - right;
                str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);
                break;
            default:
                str = str + Array(len + 1 - str.length).join(pad);
        }
    ;
    return str;
};
/**
 * Truncates a string
 *
 * @api public
 */
exports.truncate = function (str, length, chr) {
    chr = chr || 'â€¦';
    return str.length >= length ? str.substr(0, length - chr.length) + chr : str;
};
/**
 * Copies and merges options with defaults.
 *
 * @param {Object} defaults
 * @param {Object} supplied options
 * @return {Object} new (merged) object
 */
function options(defaults, opts) {
    for (var p in opts) {
        if (opts[p] && opts[p].constructor && opts[p].constructor === Object) {
            defaults[p] = defaults[p] || {};
            options(defaults[p], opts[p]);
        }
        else {
            defaults[p] = opts[p];
        }
    }
    return defaults;
}
;
exports.options = options;
//
// For consideration of terminal "color" programs like colors.js,
// which can add ANSI escape color codes to strings,
// we destyle the ANSI color escape codes for padding calculations.
//
// see: http://en.wikipedia.org/wiki/ANSI_escape_code
//
exports.strlen = function (str) {
    var code = /\u001b\[(?:\d*;){0,5}\d*m/g;
    var stripped = ("" + str).replace(code, '');
    var split = stripped.split("\n");
    return split.reduce(function (memo, s) { return (s.length > memo) ? s.length : memo; }, 0);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxjbGktdGFibGVcXGxpYlxcdXRpbHMuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcY2xpLXRhYmxlXFxsaWJcXHV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7R0FNRztBQUVILE9BQU8sQ0FBQyxNQUFNLEdBQUcsVUFBVSxHQUFHLEVBQUUsS0FBSztJQUNuQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUVILE9BQU8sQ0FBQyxHQUFHLEdBQUcsVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0lBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN4QixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO1lBQ1gsS0FBSyxNQUFNO2dCQUNULEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDbEQsS0FBSyxDQUFDO1lBRVIsS0FBSyxNQUFNO2dCQUNULElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxJQUFJLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDMUIsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkUsS0FBSyxDQUFDO1lBRVI7Z0JBQ0UsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELENBQUM7SUFBQSxDQUFDO0lBRUosTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFFSCxPQUFPLENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHO0lBQzNDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDL0UsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBRUgsaUJBQWlCLFFBQVEsRUFBRSxJQUFJO0lBQzdCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JFLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUFBLENBQUM7QUFDRixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUUxQixFQUFFO0FBQ0YsaUVBQWlFO0FBQ2pFLG9EQUFvRDtBQUNwRCxtRUFBbUU7QUFDbkUsRUFBRTtBQUNGLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFTLEdBQUc7SUFDM0IsSUFBSSxJQUFJLEdBQUcsNEJBQTRCLENBQUM7SUFDeEMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQztJQUMzQyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBSZXBlYXRzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjaGFyKHMpXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyIG9mIHRpbWVzXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJlcGVhdGVkIHN0cmluZ1xuICovXG5cbmV4cG9ydHMucmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgdGltZXMpe1xuICByZXR1cm4gQXJyYXkodGltZXMgKyAxKS5qb2luKHN0cik7XG59O1xuXG4vKipcbiAqIFBhZHMgYSBzdHJpbmdcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucGFkID0gZnVuY3Rpb24gKHN0ciwgbGVuLCBwYWQsIGRpcikge1xuICBpZiAobGVuICsgMSA+PSBzdHIubGVuZ3RoKVxuICAgIHN3aXRjaCAoZGlyKXtcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICBzdHIgPSBBcnJheShsZW4gKyAxIC0gc3RyLmxlbmd0aCkuam9pbihwYWQpICsgc3RyO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYm90aCc6XG4gICAgICAgIHZhciByaWdodCA9IE1hdGguY2VpbCgocGFkbGVuID0gbGVuIC0gc3RyLmxlbmd0aCkgLyAyKTtcbiAgICAgICAgdmFyIGxlZnQgPSBwYWRsZW4gLSByaWdodDtcbiAgICAgICAgc3RyID0gQXJyYXkobGVmdCArIDEpLmpvaW4ocGFkKSArIHN0ciArIEFycmF5KHJpZ2h0ICsgMSkuam9pbihwYWQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RyID0gc3RyICsgQXJyYXkobGVuICsgMSAtIHN0ci5sZW5ndGgpLmpvaW4ocGFkKTtcbiAgICB9O1xuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFRydW5jYXRlcyBhIHN0cmluZ1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50cnVuY2F0ZSA9IGZ1bmN0aW9uIChzdHIsIGxlbmd0aCwgY2hyKXtcbiAgY2hyID0gY2hyIHx8ICfigKYnO1xuICByZXR1cm4gc3RyLmxlbmd0aCA+PSBsZW5ndGggPyBzdHIuc3Vic3RyKDAsIGxlbmd0aCAtIGNoci5sZW5ndGgpICsgY2hyIDogc3RyO1xufTtcblxuLyoqXG4gKiBDb3BpZXMgYW5kIG1lcmdlcyBvcHRpb25zIHdpdGggZGVmYXVsdHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRzXG4gKiBAcGFyYW0ge09iamVjdH0gc3VwcGxpZWQgb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSBuZXcgKG1lcmdlZCkgb2JqZWN0XG4gKi9cblxuZnVuY3Rpb24gb3B0aW9ucyhkZWZhdWx0cywgb3B0cykge1xuICBmb3IgKHZhciBwIGluIG9wdHMpIHtcbiAgICBpZiAob3B0c1twXSAmJiBvcHRzW3BdLmNvbnN0cnVjdG9yICYmIG9wdHNbcF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgZGVmYXVsdHNbcF0gPSBkZWZhdWx0c1twXSB8fCB7fTtcbiAgICAgIG9wdGlvbnMoZGVmYXVsdHNbcF0sIG9wdHNbcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZhdWx0c1twXSA9IG9wdHNbcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWZhdWx0cztcbn07XG5leHBvcnRzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4vL1xuLy8gRm9yIGNvbnNpZGVyYXRpb24gb2YgdGVybWluYWwgXCJjb2xvclwiIHByb2dyYW1zIGxpa2UgY29sb3JzLmpzLFxuLy8gd2hpY2ggY2FuIGFkZCBBTlNJIGVzY2FwZSBjb2xvciBjb2RlcyB0byBzdHJpbmdzLFxuLy8gd2UgZGVzdHlsZSB0aGUgQU5TSSBjb2xvciBlc2NhcGUgY29kZXMgZm9yIHBhZGRpbmcgY2FsY3VsYXRpb25zLlxuLy9cbi8vIHNlZTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlXG4vL1xuZXhwb3J0cy5zdHJsZW4gPSBmdW5jdGlvbihzdHIpe1xuICB2YXIgY29kZSA9IC9cXHUwMDFiXFxbKD86XFxkKjspezAsNX1cXGQqbS9nO1xuICB2YXIgc3RyaXBwZWQgPSAoXCJcIiArIHN0cikucmVwbGFjZShjb2RlLCcnKTtcbiAgdmFyIHNwbGl0ID0gc3RyaXBwZWQuc3BsaXQoXCJcXG5cIik7XG4gIHJldHVybiBzcGxpdC5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIHMpIHsgcmV0dXJuIChzLmxlbmd0aCA+IG1lbW8pID8gcy5sZW5ndGggOiBtZW1vIH0sIDApO1xufVxuIl19