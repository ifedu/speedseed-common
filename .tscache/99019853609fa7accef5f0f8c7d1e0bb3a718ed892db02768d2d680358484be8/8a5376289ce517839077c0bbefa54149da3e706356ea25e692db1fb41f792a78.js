module.exports = normalize;
var fixer = require("./fixer");
normalize.fixer = fixer;
var makeWarning = require("./make_warning");
var fieldsToFix = ['name', 'version', 'description', 'repository', 'modules', 'scripts',
    'files', 'bin', 'man', 'bugs', 'keywords', 'readme', 'homepage', 'license'];
var otherThingsToFix = ['dependencies', 'people', 'typos'];
var thingsToFix = fieldsToFix.map(function (fieldName) {
    return ucFirst(fieldName) + "Field";
});
// two ways to do this in CoffeeScript on only one line, sub-70 chars:
// thingsToFix = fieldsToFix.map (name) -> ucFirst(name) + "Field"
// thingsToFix = (ucFirst(name) + "Field" for name in fieldsToFix)
thingsToFix = thingsToFix.concat(otherThingsToFix);
function normalize(data, warn, strict) {
    if (warn === true)
        warn = null, strict = true;
    if (!strict)
        strict = false;
    if (!warn || data.private)
        warn = function (msg) { };
    if (data.scripts &&
        data.scripts.install === "node-gyp rebuild" &&
        !data.scripts.preinstall) {
        data.gypfile = true;
    }
    fixer.warn = function () { warn(makeWarning.apply(null, arguments)); };
    thingsToFix.forEach(function (thingName) {
        fixer["fix" + ucFirst(thingName)](data, strict);
    });
    data._id = data.name + "@" + data.version;
}
function ucFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxub3JtYWxpemUtcGFja2FnZS1kYXRhXFxsaWJcXG5vcm1hbGl6ZS5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxub3JtYWxpemUtcGFja2FnZS1kYXRhXFxsaWJcXG5vcm1hbGl6ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQTtBQUUxQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDOUIsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7QUFFdkIsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7QUFFM0MsSUFBSSxXQUFXLEdBQUcsQ0FBQyxNQUFNLEVBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxZQUFZLEVBQUMsU0FBUyxFQUFDLFNBQVM7SUFDL0QsT0FBTyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3ZGLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxjQUFjLEVBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBRXpELElBQUksV0FBVyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBUyxTQUFTO0lBQ2xELE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFBO0FBQ3JDLENBQUMsQ0FBQyxDQUFBO0FBQ0Ysc0VBQXNFO0FBQ3RFLGtFQUFrRTtBQUNsRSxrRUFBa0U7QUFDbEUsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUVsRCxtQkFBb0IsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNO0lBQ3BDLEVBQUUsQ0FBQSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7UUFBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUE7SUFDNUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzFCLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFBQyxJQUFJLEdBQUcsVUFBUyxHQUFHLElBQWUsQ0FBQyxDQUFBO0lBRTdELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssa0JBQWtCO1FBQzNDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO0lBQ3JCLENBQUM7SUFDRCxLQUFLLENBQUMsSUFBSSxHQUFHLGNBQWEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUE7SUFDcEUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFTLFNBQVM7UUFDcEMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDakQsQ0FBQyxDQUFDLENBQUE7SUFDRixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7QUFDM0MsQ0FBQztBQUVELGlCQUFrQixNQUFNO0lBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplXG5cbnZhciBmaXhlciA9IHJlcXVpcmUoXCIuL2ZpeGVyXCIpXG5ub3JtYWxpemUuZml4ZXIgPSBmaXhlclxuXG52YXIgbWFrZVdhcm5pbmcgPSByZXF1aXJlKFwiLi9tYWtlX3dhcm5pbmdcIilcblxudmFyIGZpZWxkc1RvRml4ID0gWyduYW1lJywndmVyc2lvbicsJ2Rlc2NyaXB0aW9uJywncmVwb3NpdG9yeScsJ21vZHVsZXMnLCdzY3JpcHRzJ1xuICAgICAgICAgICAgICAgICAgLCdmaWxlcycsJ2JpbicsJ21hbicsJ2J1Z3MnLCdrZXl3b3JkcycsJ3JlYWRtZScsJ2hvbWVwYWdlJywnbGljZW5zZSddXG52YXIgb3RoZXJUaGluZ3NUb0ZpeCA9IFsnZGVwZW5kZW5jaWVzJywncGVvcGxlJywgJ3R5cG9zJ11cblxudmFyIHRoaW5nc1RvRml4ID0gZmllbGRzVG9GaXgubWFwKGZ1bmN0aW9uKGZpZWxkTmFtZSkge1xuICByZXR1cm4gdWNGaXJzdChmaWVsZE5hbWUpICsgXCJGaWVsZFwiXG59KVxuLy8gdHdvIHdheXMgdG8gZG8gdGhpcyBpbiBDb2ZmZWVTY3JpcHQgb24gb25seSBvbmUgbGluZSwgc3ViLTcwIGNoYXJzOlxuLy8gdGhpbmdzVG9GaXggPSBmaWVsZHNUb0ZpeC5tYXAgKG5hbWUpIC0+IHVjRmlyc3QobmFtZSkgKyBcIkZpZWxkXCJcbi8vIHRoaW5nc1RvRml4ID0gKHVjRmlyc3QobmFtZSkgKyBcIkZpZWxkXCIgZm9yIG5hbWUgaW4gZmllbGRzVG9GaXgpXG50aGluZ3NUb0ZpeCA9IHRoaW5nc1RvRml4LmNvbmNhdChvdGhlclRoaW5nc1RvRml4KVxuXG5mdW5jdGlvbiBub3JtYWxpemUgKGRhdGEsIHdhcm4sIHN0cmljdCkge1xuICBpZih3YXJuID09PSB0cnVlKSB3YXJuID0gbnVsbCwgc3RyaWN0ID0gdHJ1ZVxuICBpZighc3RyaWN0KSBzdHJpY3QgPSBmYWxzZVxuICBpZighd2FybiB8fCBkYXRhLnByaXZhdGUpIHdhcm4gPSBmdW5jdGlvbihtc2cpIHsgLyogbm9vcCAqLyB9XG5cbiAgaWYgKGRhdGEuc2NyaXB0cyAmJlxuICAgICAgZGF0YS5zY3JpcHRzLmluc3RhbGwgPT09IFwibm9kZS1neXAgcmVidWlsZFwiICYmXG4gICAgICAhZGF0YS5zY3JpcHRzLnByZWluc3RhbGwpIHtcbiAgICBkYXRhLmd5cGZpbGUgPSB0cnVlXG4gIH1cbiAgZml4ZXIud2FybiA9IGZ1bmN0aW9uKCkgeyB3YXJuKG1ha2VXYXJuaW5nLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpIH1cbiAgdGhpbmdzVG9GaXguZm9yRWFjaChmdW5jdGlvbih0aGluZ05hbWUpIHtcbiAgICBmaXhlcltcImZpeFwiICsgdWNGaXJzdCh0aGluZ05hbWUpXShkYXRhLCBzdHJpY3QpXG4gIH0pXG4gIGRhdGEuX2lkID0gZGF0YS5uYW1lICsgXCJAXCIgKyBkYXRhLnZlcnNpb25cbn1cblxuZnVuY3Rpb24gdWNGaXJzdCAoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG4iXX0=