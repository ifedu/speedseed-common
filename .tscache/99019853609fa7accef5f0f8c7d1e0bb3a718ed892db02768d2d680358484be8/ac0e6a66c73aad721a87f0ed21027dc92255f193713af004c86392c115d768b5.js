'use strict';
var Promise = require('pinkie-promise');
var arrayUnion = require('array-union');
var objectAssign = require('object-assign');
var glob = require('glob');
var pify = require('pify');
var globP = pify(glob, Promise).bind(glob);
function isNegative(pattern) {
    return pattern[0] === '!';
}
function isString(value) {
    return typeof value === 'string';
}
function assertPatternsInput(patterns) {
    if (!patterns.every(isString)) {
        throw new TypeError('patterns must be a string or an array of strings');
    }
}
function generateGlobTasks(patterns, opts) {
    patterns = [].concat(patterns);
    assertPatternsInput(patterns);
    var globTasks = [];
    opts = objectAssign({
        cache: Object.create(null),
        statCache: Object.create(null),
        realpathCache: Object.create(null),
        symlinks: Object.create(null),
        ignore: []
    }, opts);
    patterns.forEach(function (pattern, i) {
        if (isNegative(pattern)) {
            return;
        }
        var ignore = patterns.slice(i).filter(isNegative).map(function (pattern) {
            return pattern.slice(1);
        });
        globTasks.push({
            pattern: pattern,
            opts: objectAssign({}, opts, {
                ignore: opts.ignore.concat(ignore)
            })
        });
    });
    return globTasks;
}
module.exports = function (patterns, opts) {
    var globTasks;
    try {
        globTasks = generateGlobTasks(patterns, opts);
    }
    catch (err) {
        return Promise.reject(err);
    }
    return Promise.all(globTasks.map(function (task) {
        return globP(task.pattern, task.opts);
    })).then(function (paths) {
        return arrayUnion.apply(null, paths);
    });
};
module.exports.sync = function (patterns, opts) {
    var globTasks = generateGlobTasks(patterns, opts);
    return globTasks.reduce(function (matches, task) {
        return arrayUnion(matches, glob.sync(task.pattern, task.opts));
    }, []);
};
module.exports.generateGlobTasks = generateGlobTasks;
module.exports.hasMagic = function (patterns, opts) {
    return [].concat(patterns).some(function (pattern) {
        return glob.hasMagic(pattern, opts);
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxnbG9iYnlcXGluZGV4LmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGdsb2JieVxcaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDeEMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3hDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTNCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTNDLG9CQUFvQixPQUFPO0lBQzFCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDO0FBQzNCLENBQUM7QUFFRCxrQkFBa0IsS0FBSztJQUN0QixNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ2xDLENBQUM7QUFFRCw2QkFBNkIsUUFBUTtJQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sSUFBSSxTQUFTLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUN6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QUFDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFVLFFBQVEsRUFBRSxJQUFJO0lBQ2pELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLE9BQU87UUFDaEQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdwaW5raWUtcHJvbWlzZScpO1xudmFyIGFycmF5VW5pb24gPSByZXF1aXJlKCdhcnJheS11bmlvbicpO1xudmFyIG9iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBnbG9iID0gcmVxdWlyZSgnZ2xvYicpO1xudmFyIHBpZnkgPSByZXF1aXJlKCdwaWZ5Jyk7XG5cbnZhciBnbG9iUCA9IHBpZnkoZ2xvYiwgUHJvbWlzZSkuYmluZChnbG9iKTtcblxuZnVuY3Rpb24gaXNOZWdhdGl2ZShwYXR0ZXJuKSB7XG5cdHJldHVybiBwYXR0ZXJuWzBdID09PSAnISc7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRQYXR0ZXJuc0lucHV0KHBhdHRlcm5zKSB7XG5cdGlmICghcGF0dGVybnMuZXZlcnkoaXNTdHJpbmcpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigncGF0dGVybnMgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBhcnJheSBvZiBzdHJpbmdzJyk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHbG9iVGFza3MocGF0dGVybnMsIG9wdHMpIHtcblx0cGF0dGVybnMgPSBbXS5jb25jYXQocGF0dGVybnMpO1xuXHRhc3NlcnRQYXR0ZXJuc0lucHV0KHBhdHRlcm5zKTtcblxuXHR2YXIgZ2xvYlRhc2tzID0gW107XG5cblx0b3B0cyA9IG9iamVjdEFzc2lnbih7XG5cdFx0Y2FjaGU6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cdFx0c3RhdENhY2hlOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXHRcdHJlYWxwYXRoQ2FjaGU6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cdFx0c3ltbGlua3M6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cdFx0aWdub3JlOiBbXVxuXHR9LCBvcHRzKTtcblxuXHRwYXR0ZXJucy5mb3JFYWNoKGZ1bmN0aW9uIChwYXR0ZXJuLCBpKSB7XG5cdFx0aWYgKGlzTmVnYXRpdmUocGF0dGVybikpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgaWdub3JlID0gcGF0dGVybnMuc2xpY2UoaSkuZmlsdGVyKGlzTmVnYXRpdmUpLm1hcChmdW5jdGlvbiAocGF0dGVybikge1xuXHRcdFx0cmV0dXJuIHBhdHRlcm4uc2xpY2UoMSk7XG5cdFx0fSk7XG5cblx0XHRnbG9iVGFza3MucHVzaCh7XG5cdFx0XHRwYXR0ZXJuOiBwYXR0ZXJuLFxuXHRcdFx0b3B0czogb2JqZWN0QXNzaWduKHt9LCBvcHRzLCB7XG5cdFx0XHRcdGlnbm9yZTogb3B0cy5pZ25vcmUuY29uY2F0KGlnbm9yZSlcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHJldHVybiBnbG9iVGFza3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhdHRlcm5zLCBvcHRzKSB7XG5cdHZhciBnbG9iVGFza3M7XG5cblx0dHJ5IHtcblx0XHRnbG9iVGFza3MgPSBnZW5lcmF0ZUdsb2JUYXNrcyhwYXR0ZXJucywgb3B0cyk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuXHR9XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKGdsb2JUYXNrcy5tYXAoZnVuY3Rpb24gKHRhc2spIHtcblx0XHRyZXR1cm4gZ2xvYlAodGFzay5wYXR0ZXJuLCB0YXNrLm9wdHMpO1xuXHR9KSkudGhlbihmdW5jdGlvbiAocGF0aHMpIHtcblx0XHRyZXR1cm4gYXJyYXlVbmlvbi5hcHBseShudWxsLCBwYXRocyk7XG5cdH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMuc3luYyA9IGZ1bmN0aW9uIChwYXR0ZXJucywgb3B0cykge1xuXHR2YXIgZ2xvYlRhc2tzID0gZ2VuZXJhdGVHbG9iVGFza3MocGF0dGVybnMsIG9wdHMpO1xuXG5cdHJldHVybiBnbG9iVGFza3MucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVzLCB0YXNrKSB7XG5cdFx0cmV0dXJuIGFycmF5VW5pb24obWF0Y2hlcywgZ2xvYi5zeW5jKHRhc2sucGF0dGVybiwgdGFzay5vcHRzKSk7XG5cdH0sIFtdKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlR2xvYlRhc2tzID0gZ2VuZXJhdGVHbG9iVGFza3M7XG5cbm1vZHVsZS5leHBvcnRzLmhhc01hZ2ljID0gZnVuY3Rpb24gKHBhdHRlcm5zLCBvcHRzKSB7XG5cdHJldHVybiBbXS5jb25jYXQocGF0dGVybnMpLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHtcblx0XHRyZXR1cm4gZ2xvYi5oYXNNYWdpYyhwYXR0ZXJuLCBvcHRzKTtcblx0fSk7XG59O1xuIl19