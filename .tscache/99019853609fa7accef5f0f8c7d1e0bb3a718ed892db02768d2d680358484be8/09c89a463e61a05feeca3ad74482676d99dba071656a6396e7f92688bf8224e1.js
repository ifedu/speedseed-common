"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var del = require("del");
var fs_1 = require("fs");
var _1 = require("../");
var Files = /** @class */ (function () {
    function Files() {
        var _this = this;
        this.createCore = function () {
            console.log('creating core...');
            var routeTpl = _1.Helper.tpl.routeTpl + "/seed/template";
            _this.createFilesOfRoute(routeTpl, [], 0);
            _1.construct.writeJsonSeed('./core');
            _1.core.yo.composeWith('speedseed:postinstall', {});
        };
    }
    Files.prototype.create = function (fileTpl, fileDest, isTpl) {
        var _this = this;
        fs_1.lstat(fileTpl, function (err, stats) {
            if (stats)
                _this.copyFiles(fileTpl, fileDest, isTpl);
        });
    };
    Files.prototype.del = function (file, fn) {
        del(file, {
            force: true
        })
            .then(fn);
    };
    Files.prototype.writeFiles = function () {
        console.log('deleting core...');
        this.del('core', this.createCore);
    };
    Files.prototype.createFilesOfRoute = function (routeTpl, propsPrevs, i) {
        if (i > _1.Helper.tpl.options.length)
            return;
        this.createFiles(routeTpl + "/all");
        for (var prop in _1.core.options) {
            if (prop.match(/\bcoreName\b|\bcoreVersion\b|\bproject\b|\btemplate\b|\btemplateFiles\b/) ||
                propsPrevs.includes(prop))
                continue;
            var val = _1.core.options[prop];
            this.createFiles(routeTpl + "/" + prop + "/all");
            this.createFiles(routeTpl + "/" + prop + "/" + val);
            this.createFilesOfRoute(routeTpl + "/" + prop + "/" + val, propsPrevs.concat([prop]), ++i);
        }
    };
    Files.prototype.createFiles = function (route) {
        if (_1.core.options.templateFiles === true) {
            this.create(route + "/copy", './', false);
            this.create(route + "/root", './');
        }
        this.create(route + "/core", './core');
        this.create(route + "/tpl", './');
        _1.construct.checkJson(route + "/construct");
    };
    Files.prototype.copyFiles = function (fileTpl, fileDest, isTpl) {
        if (isTpl === false) {
            this.copy('copy', fileTpl + "/**/*", fileDest);
            this.copy('copy', fileTpl + "/**/.*", fileDest);
        }
        else {
            this.copy('copyTpl', fileTpl + "/**/*", fileDest);
            this.copy('copyTpl', fileTpl + "/**/.*", fileDest);
        }
    };
    Files.prototype.copy = function (copyTpl, fileTpl, fileDest) {
        try {
            _1.core.yo.fs[copyTpl](_1.core.yo.templatePath(fileTpl), _1.core.yo.destinationPath(fileDest), _1.core.options);
        }
        catch (e) {
            // console.log(e)
        }
    };
    return Files;
}());
exports.default = Files;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzcGVlZHNlZWRcXHNyY1xcZmlsZXMudHMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcc3BlZWRzZWVkXFxzcmNcXGZpbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQTBCO0FBQzFCLHlCQUEwQjtBQUUxQix3QkFBdUQ7QUFFdkQ7SUFBQTtRQUFBLGlCQTBGQztRQXRFVyxlQUFVLEdBQUc7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1lBRS9CLElBQU0sUUFBUSxHQUFNLFNBQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxtQkFBZ0IsQ0FBQTtZQUV2RCxLQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUV4QyxZQUFTLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBRWpDLE9BQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3BELENBQUMsQ0FBQTtJQTRETCxDQUFDO0lBekZHLHNCQUFNLEdBQU4sVUFBTyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxLQUFXO1FBQXJELGlCQUlDO1FBSEcsVUFBSyxDQUFDLE9BQU8sRUFBRSxVQUFDLEdBQVEsRUFBRSxLQUFVO1lBQ2hDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFBQyxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDdkQsQ0FBQyxDQUFDLENBQUE7SUFD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WUFDRCxPQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FDZixPQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFDN0IsT0FBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQ2pDLE9BQUksQ0FBQyxPQUFPLENBQ2YsQ0FBQTtRQUNMLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsaUJBQWlCO1FBQ3JCLENBQUM7SUFDTCxDQUFDO0lBQ0wsWUFBQztBQUFELENBQUMsQUExRkQsSUEwRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkZWwgZnJvbSAnZGVsJ1xyXG5pbXBvcnQgeyBsc3RhdCB9IGZyb20gJ2ZzJ1xyXG5cclxuaW1wb3J0IHsgY29uc3RydWN0LCBjb3JlLCBIZWxwZXIsIHByb21wdGVyIH0gZnJvbSAnLi4vJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZXMge1xyXG4gICAgY3JlYXRlKGZpbGVUcGw6IHN0cmluZywgZmlsZURlc3Q6IHN0cmluZywgaXNUcGw/OiBhbnkpIHtcclxuICAgICAgICBsc3RhdChmaWxlVHBsLCAoZXJyOiBhbnksIHN0YXRzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHN0YXRzKSB0aGlzLmNvcHlGaWxlcyhmaWxlVHBsLCBmaWxlRGVzdCwgaXNUcGwpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBkZWwoZmlsZTogc3RyaW5nLCBmbjogYW55KSB7XHJcbiAgICAgICAgZGVsKGZpbGUsIHtcclxuICAgICAgICAgICAgZm9yY2U6IHRydWVcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGZuKVxyXG4gICAgfVxyXG5cclxuICAgIHdyaXRlRmlsZXMoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2RlbGV0aW5nIGNvcmUuLi4nKVxyXG5cclxuICAgICAgICB0aGlzLmRlbCgnY29yZScsIHRoaXMuY3JlYXRlQ29yZSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUNvcmUgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0aW5nIGNvcmUuLi4nKVxyXG5cclxuICAgICAgICBjb25zdCByb3V0ZVRwbCA9IGAke0hlbHBlci50cGwucm91dGVUcGx9L3NlZWQvdGVtcGxhdGVgXHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlRmlsZXNPZlJvdXRlKHJvdXRlVHBsLCBbXSwgMClcclxuXHJcbiAgICAgICAgY29uc3RydWN0LndyaXRlSnNvblNlZWQoJy4vY29yZScpXHJcblxyXG4gICAgICAgIGNvcmUueW8uY29tcG9zZVdpdGgoJ3NwZWVkc2VlZDpwb3N0aW5zdGFsbCcsIHt9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRmlsZXNPZlJvdXRlKHJvdXRlVHBsOiBzdHJpbmcsIHByb3BzUHJldnM6IGFueSwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGkgPiBIZWxwZXIudHBsLm9wdGlvbnMubGVuZ3RoKSByZXR1cm5cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVGaWxlcyhgJHtyb3V0ZVRwbH0vYWxsYClcclxuXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBjb3JlLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcHJvcC5tYXRjaCgvXFxiY29yZU5hbWVcXGJ8XFxiY29yZVZlcnNpb25cXGJ8XFxicHJvamVjdFxcYnxcXGJ0ZW1wbGF0ZVxcYnxcXGJ0ZW1wbGF0ZUZpbGVzXFxiLykgfHxcclxuICAgICAgICAgICAgICAgIHByb3BzUHJldnMuaW5jbHVkZXMocHJvcClcclxuICAgICAgICAgICAgKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdmFsID0gY29yZS5vcHRpb25zW3Byb3BdXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUZpbGVzKGAke3JvdXRlVHBsfS8ke3Byb3B9L2FsbGApXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRmlsZXMoYCR7cm91dGVUcGx9LyR7cHJvcH0vJHt2YWx9YClcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRmlsZXNPZlJvdXRlKFxyXG4gICAgICAgICAgICAgICAgYCR7cm91dGVUcGx9LyR7cHJvcH0vJHt2YWx9YCxcclxuICAgICAgICAgICAgICAgIFsuLi5wcm9wc1ByZXZzLCBwcm9wXSxcclxuICAgICAgICAgICAgICAgICsraVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRmlsZXMocm91dGU6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChjb3JlLm9wdGlvbnMudGVtcGxhdGVGaWxlcyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZShgJHtyb3V0ZX0vY29weWAsICcuLycsIGZhbHNlKVxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZShgJHtyb3V0ZX0vcm9vdGAsICcuLycpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZShgJHtyb3V0ZX0vY29yZWAsICcuL2NvcmUnKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlKGAke3JvdXRlfS90cGxgLCAnLi8nKVxyXG5cclxuICAgICAgICBjb25zdHJ1Y3QuY2hlY2tKc29uKGAke3JvdXRlfS9jb25zdHJ1Y3RgKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29weUZpbGVzKGZpbGVUcGw6IHN0cmluZywgZmlsZURlc3Q6IHN0cmluZywgaXNUcGw/OiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKGlzVHBsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvcHkoJ2NvcHknLCBgJHtmaWxlVHBsfS8qKi8qYCwgZmlsZURlc3QpXHJcbiAgICAgICAgICAgIHRoaXMuY29weSgnY29weScsIGAke2ZpbGVUcGx9LyoqLy4qYCwgZmlsZURlc3QpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvcHkoJ2NvcHlUcGwnLCBgJHtmaWxlVHBsfS8qKi8qYCwgZmlsZURlc3QpXHJcbiAgICAgICAgICAgIHRoaXMuY29weSgnY29weVRwbCcsIGAke2ZpbGVUcGx9LyoqLy4qYCwgZmlsZURlc3QpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29weShjb3B5VHBsOiBzdHJpbmcsIGZpbGVUcGw6IHN0cmluZywgZmlsZURlc3Q6IHN0cmluZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvcmUueW8uZnNbY29weVRwbF0oXHJcbiAgICAgICAgICAgICAgICBjb3JlLnlvLnRlbXBsYXRlUGF0aChmaWxlVHBsKSxcclxuICAgICAgICAgICAgICAgIGNvcmUueW8uZGVzdGluYXRpb25QYXRoKGZpbGVEZXN0KSxcclxuICAgICAgICAgICAgICAgIGNvcmUub3B0aW9uc1xyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=