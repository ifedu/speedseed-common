'use strict';
var assert = require('assert');
var fs = require('fs');
var path = require('path');
var glob = require('glob');
var globby = require('globby');
var extend = require('deep-extend');
var multimatch = require('multimatch');
var util = require('../util');
function applyProcessingFunc(process, contents, filename) {
    var output = process(contents, filename);
    return output instanceof Buffer ? output : new Buffer(output);
}
exports.copy = function (from, to, options) {
    var _this = this;
    to = path.resolve(to);
    options = options || {};
    var fromGlob = util.globify(from);
    var globOptions = extend(options.globOptions || {}, { nodir: true });
    var diskFiles = globby.sync(fromGlob, globOptions);
    var storeFiles = [];
    this.store.each(function (file) {
        if (multimatch([file.path], fromGlob).length !== 0) {
            storeFiles.push(file.path);
        }
    });
    var files = diskFiles.concat(storeFiles);
    var generateDestination = function () { return to; };
    if (Array.isArray(from) || !this.exists(from) || glob.hasMagic(from)) {
        assert(!this.exists(to) || fs.statSync(to).isDirectory(), 'When copying multiple files, provide a directory as destination');
        var root = util.getCommonPath(from);
        generateDestination = function (filepath) {
            var toFile = path.relative(root, filepath);
            return path.join(to, toFile);
        };
    }
    // Sanity checks: Makes sure we copy at least one file.
    assert(files.length > 0, 'Trying to copy from a source that does not exist: ' + from);
    files.forEach(function (file) {
        _this._copySingle(file, generateDestination(file), options);
    });
};
exports._copySingle = function (from, to, options) {
    options = options || {};
    assert(this.exists(from), 'Trying to copy from a source that does not exist: ' + from);
    var file = this.store.get(from);
    var contents = file.contents;
    if (options.process) {
        contents = applyProcessingFunc(options.process, file.contents, file.path);
    }
    this.write(to, contents, file.stat);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxtZW0tZnMtZWRpdG9yXFxsaWJcXGFjdGlvbnNcXGNvcHkuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcbWVtLWZzLWVkaXRvclxcbGliXFxhY3Rpb25zXFxjb3B5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3BDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFOUIsNkJBQTZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUTtJQUN0RCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxNQUFNLFlBQVksTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsT0FB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QztRQUNwQixRQUFRLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBnbG9iID0gcmVxdWlyZSgnZ2xvYicpO1xudmFyIGdsb2JieSA9IHJlcXVpcmUoJ2dsb2JieScpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2RlZXAtZXh0ZW5kJyk7XG52YXIgbXVsdGltYXRjaCA9IHJlcXVpcmUoJ211bHRpbWF0Y2gnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBhcHBseVByb2Nlc3NpbmdGdW5jKHByb2Nlc3MsIGNvbnRlbnRzLCBmaWxlbmFtZSkge1xuICB2YXIgb3V0cHV0ID0gcHJvY2Vzcyhjb250ZW50cywgZmlsZW5hbWUpO1xuICByZXR1cm4gb3V0cHV0IGluc3RhbmNlb2YgQnVmZmVyID8gb3V0cHV0IDogbmV3IEJ1ZmZlcihvdXRwdXQpO1xufVxuXG5leHBvcnRzLmNvcHkgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIG9wdGlvbnMpIHtcbiAgdG8gPSBwYXRoLnJlc29sdmUodG8pO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGZyb21HbG9iID0gdXRpbC5nbG9iaWZ5KGZyb20pO1xuXG4gIHZhciBnbG9iT3B0aW9ucyA9IGV4dGVuZChvcHRpb25zLmdsb2JPcHRpb25zIHx8IHt9LCB7bm9kaXI6IHRydWV9KTtcbiAgdmFyIGRpc2tGaWxlcyA9IGdsb2JieS5zeW5jKGZyb21HbG9iLCBnbG9iT3B0aW9ucyk7XG4gIHZhciBzdG9yZUZpbGVzID0gW107XG4gIHRoaXMuc3RvcmUuZWFjaChmaWxlID0+IHtcbiAgICBpZiAobXVsdGltYXRjaChbZmlsZS5wYXRoXSwgZnJvbUdsb2IpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgc3RvcmVGaWxlcy5wdXNoKGZpbGUucGF0aCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGZpbGVzID0gZGlza0ZpbGVzLmNvbmNhdChzdG9yZUZpbGVzKTtcblxuICB2YXIgZ2VuZXJhdGVEZXN0aW5hdGlvbiA9ICgpID0+IHRvO1xuICBpZiAoQXJyYXkuaXNBcnJheShmcm9tKSB8fCAhdGhpcy5leGlzdHMoZnJvbSkgfHwgZ2xvYi5oYXNNYWdpYyhmcm9tKSkge1xuICAgIGFzc2VydChcbiAgICAgICF0aGlzLmV4aXN0cyh0bykgfHwgZnMuc3RhdFN5bmModG8pLmlzRGlyZWN0b3J5KCksXG4gICAgICAnV2hlbiBjb3B5aW5nIG11bHRpcGxlIGZpbGVzLCBwcm92aWRlIGEgZGlyZWN0b3J5IGFzIGRlc3RpbmF0aW9uJ1xuICAgICk7XG5cbiAgICB2YXIgcm9vdCA9IHV0aWwuZ2V0Q29tbW9uUGF0aChmcm9tKTtcbiAgICBnZW5lcmF0ZURlc3RpbmF0aW9uID0gZmlsZXBhdGggPT4ge1xuICAgICAgdmFyIHRvRmlsZSA9IHBhdGgucmVsYXRpdmUocm9vdCwgZmlsZXBhdGgpO1xuICAgICAgcmV0dXJuIHBhdGguam9pbih0bywgdG9GaWxlKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gU2FuaXR5IGNoZWNrczogTWFrZXMgc3VyZSB3ZSBjb3B5IGF0IGxlYXN0IG9uZSBmaWxlLlxuICBhc3NlcnQoZmlsZXMubGVuZ3RoID4gMCwgJ1RyeWluZyB0byBjb3B5IGZyb20gYSBzb3VyY2UgdGhhdCBkb2VzIG5vdCBleGlzdDogJyArIGZyb20pO1xuXG4gIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgdGhpcy5fY29weVNpbmdsZShmaWxlLCBnZW5lcmF0ZURlc3RpbmF0aW9uKGZpbGUpLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLl9jb3B5U2luZ2xlID0gZnVuY3Rpb24gKGZyb20sIHRvLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGFzc2VydCh0aGlzLmV4aXN0cyhmcm9tKSwgJ1RyeWluZyB0byBjb3B5IGZyb20gYSBzb3VyY2UgdGhhdCBkb2VzIG5vdCBleGlzdDogJyArIGZyb20pO1xuXG4gIHZhciBmaWxlID0gdGhpcy5zdG9yZS5nZXQoZnJvbSk7XG5cbiAgdmFyIGNvbnRlbnRzID0gZmlsZS5jb250ZW50cztcbiAgaWYgKG9wdGlvbnMucHJvY2Vzcykge1xuICAgIGNvbnRlbnRzID0gYXBwbHlQcm9jZXNzaW5nRnVuYyhvcHRpb25zLnByb2Nlc3MsIGZpbGUuY29udGVudHMsIGZpbGUucGF0aCk7XG4gIH1cblxuICB0aGlzLndyaXRlKHRvLCBjb250ZW50cywgZmlsZS5zdGF0KTtcbn07XG4iXX0=