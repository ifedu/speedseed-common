var common = require('./common');
var os = require('os');
var fs = require('fs');
common.register('tempdir', _tempDir, {
    allowGlobbing: false,
    wrapOutput: false,
});
// Returns false if 'dir' is not a writeable directory, 'dir' otherwise
function writeableDir(dir) {
    if (!dir || !fs.existsSync(dir))
        return false;
    if (!fs.statSync(dir).isDirectory())
        return false;
    var testFile = dir + '/' + common.randomFileName();
    try {
        fs.writeFileSync(testFile, ' ');
        common.unlinkSync(testFile);
        return dir;
    }
    catch (e) {
        /* istanbul ignore next */
        return false;
    }
}
//@
//@ ### tempdir()
//@
//@ Examples:
//@
//@ ```javascript
//@ var tmp = tempdir(); // "/tmp" for most *nix platforms
//@ ```
//@
//@ Searches and returns string containing a writeable, platform-dependent temporary directory.
//@ Follows Python's [tempfile algorithm](http://docs.python.org/library/tempfile.html#tempfile.tempdir).
function _tempDir() {
    var state = common.state;
    if (state.tempDir)
        return state.tempDir; // from cache
    state.tempDir = writeableDir(os.tmpdir && os.tmpdir()) || // node 0.10+
        writeableDir(os.tmpDir && os.tmpDir()) || // node 0.8+
        writeableDir(process.env.TMPDIR) ||
        writeableDir(process.env.TEMP) ||
        writeableDir(process.env.TMP) ||
        writeableDir(process.env.Wimp$ScrapDir) || // RiscOS
        writeableDir('C:\\TEMP') || // Windows
        writeableDir('C:\\TMP') || // Windows
        writeableDir('\\TEMP') || // Windows
        writeableDir('\\TMP') || // Windows
        writeableDir('/tmp') ||
        writeableDir('/var/tmp') ||
        writeableDir('/usr/tmp') ||
        writeableDir('.'); // last resort
    return state.tempDir;
}
module.exports = _tempDir;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXHRlbXBkaXIuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcc2hlbGxqc1xcc3JjXFx0ZW1wZGlyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqQyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtJQUNuQyxhQUFhLEVBQUUsS0FBSztJQUNwQixVQUFVLEVBQUUsS0FBSztDQUNsQixDQUFDLENBQUM7QUFFSCx1RUFBdUU7QUFDdkUsc0JBQXNCLEdBQUc7SUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUU5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBRWxELElBQUksUUFBUSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ25ELElBQUksQ0FBQztRQUNILEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsMEJBQTBCO1FBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0FBQ0gsQ0FBQztBQUdELEdBQUc7QUFDSCxpQkFBaUI7QUFDakIsR0FBRztBQUNILGFBQWE7QUFDYixHQUFHO0FBQ0gsaUJBQWlCO0FBQ2pCLDBEQUEwRDtBQUMxRCxPQUFPO0FBQ1AsR0FBRztBQUNILCtGQUErRjtBQUMvRix5R0FBeUc7QUFDekc7SUFDRSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3pCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWE7SUFFdEQsS0FBSyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxhQUFhO1FBQ3ZELFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFlBQVk7UUFDdEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztRQUM5QixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDN0IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUztRQUNwRCxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVTtRQUN0QyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVTtRQUNyQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVTtRQUNwQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVTtRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3BCLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDeEIsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUN4QixZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxjQUFjO0lBRWpELE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ3ZCLENBQUM7QUFDRCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIG9zID0gcmVxdWlyZSgnb3MnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbmNvbW1vbi5yZWdpc3RlcigndGVtcGRpcicsIF90ZW1wRGlyLCB7XG4gIGFsbG93R2xvYmJpbmc6IGZhbHNlLFxuICB3cmFwT3V0cHV0OiBmYWxzZSxcbn0pO1xuXG4vLyBSZXR1cm5zIGZhbHNlIGlmICdkaXInIGlzIG5vdCBhIHdyaXRlYWJsZSBkaXJlY3RvcnksICdkaXInIG90aGVyd2lzZVxuZnVuY3Rpb24gd3JpdGVhYmxlRGlyKGRpcikge1xuICBpZiAoIWRpciB8fCAhZnMuZXhpc3RzU3luYyhkaXIpKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFmcy5zdGF0U3luYyhkaXIpLmlzRGlyZWN0b3J5KCkpIHJldHVybiBmYWxzZTtcblxuICB2YXIgdGVzdEZpbGUgPSBkaXIgKyAnLycgKyBjb21tb24ucmFuZG9tRmlsZU5hbWUoKTtcbiAgdHJ5IHtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHRlc3RGaWxlLCAnICcpO1xuICAgIGNvbW1vbi51bmxpbmtTeW5jKHRlc3RGaWxlKTtcbiAgICByZXR1cm4gZGlyO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuXG4vL0Bcbi8vQCAjIyMgdGVtcGRpcigpXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCB2YXIgdG1wID0gdGVtcGRpcigpOyAvLyBcIi90bXBcIiBmb3IgbW9zdCAqbml4IHBsYXRmb3Jtc1xuLy9AIGBgYFxuLy9AXG4vL0AgU2VhcmNoZXMgYW5kIHJldHVybnMgc3RyaW5nIGNvbnRhaW5pbmcgYSB3cml0ZWFibGUsIHBsYXRmb3JtLWRlcGVuZGVudCB0ZW1wb3JhcnkgZGlyZWN0b3J5LlxuLy9AIEZvbGxvd3MgUHl0aG9uJ3MgW3RlbXBmaWxlIGFsZ29yaXRobV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3RlbXBmaWxlLmh0bWwjdGVtcGZpbGUudGVtcGRpcikuXG5mdW5jdGlvbiBfdGVtcERpcigpIHtcbiAgdmFyIHN0YXRlID0gY29tbW9uLnN0YXRlO1xuICBpZiAoc3RhdGUudGVtcERpcikgcmV0dXJuIHN0YXRlLnRlbXBEaXI7IC8vIGZyb20gY2FjaGVcblxuICBzdGF0ZS50ZW1wRGlyID0gd3JpdGVhYmxlRGlyKG9zLnRtcGRpciAmJiBvcy50bXBkaXIoKSkgfHwgLy8gbm9kZSAwLjEwK1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKG9zLnRtcERpciAmJiBvcy50bXBEaXIoKSkgfHwgLy8gbm9kZSAwLjgrXG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIocHJvY2Vzcy5lbnYuVE1QRElSKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKHByb2Nlc3MuZW52LlRFTVApIHx8XG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIocHJvY2Vzcy5lbnYuVE1QKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKHByb2Nlc3MuZW52LldpbXAkU2NyYXBEaXIpIHx8IC8vIFJpc2NPU1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdDOlxcXFxURU1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdDOlxcXFxUTVAnKSB8fCAvLyBXaW5kb3dzXG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIoJ1xcXFxURU1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdcXFxcVE1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCcvdG1wJykgfHxcbiAgICAgICAgICAgICAgICAgIHdyaXRlYWJsZURpcignL3Zhci90bXAnKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCcvdXNyL3RtcCcpIHx8XG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIoJy4nKTsgLy8gbGFzdCByZXNvcnRcblxuICByZXR1cm4gc3RhdGUudGVtcERpcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RlbXBEaXI7XG4iXX0=