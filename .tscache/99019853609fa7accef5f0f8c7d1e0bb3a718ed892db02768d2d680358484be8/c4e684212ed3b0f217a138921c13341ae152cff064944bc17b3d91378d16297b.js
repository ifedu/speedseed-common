"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("../");
var Prompter = /** @class */ (function () {
    function Prompter() {
        var _this = this;
        this.answers = {};
        this.optionExcludeChoice = function (option, choice) {
            if (!choice || !choice.exclude)
                return;
            for (var prop in choice.exclude) {
                _1.core.setOptions();
                var promptChoiced = _1.core.options[prop];
                var optionExcluded = option.choices[option.i];
                choice.exclude[prop].forEach(_this.optionExcludeChoiceExclude.bind(_this, promptChoiced, option));
            }
        };
        this.optionExcludeChoiceExclude = function (promptChoiced, option, choiceExclude) {
            if (promptChoiced === choiceExclude) {
                option.choices.splice(option.i, 1);
                option.i--;
            }
        };
    }
    Prompter.prototype.getProject = function (name) {
        return {
            default: _1.core.yo.config.get(name) || 'myproject',
            message: 'Project Name?',
            name: name,
            type: 'input',
        };
    };
    Prompter.prototype.getTemplate = function (name) {
        return {
            default: _1.core.yo.config.get(name) || 0,
            message: 'Template?',
            name: name,
            type: 'list',
            choices: this.generators,
        };
    };
    Prompter.prototype.getTemplateFiles = function (name) {
        return {
            default: ((_1.core.yo.config.get(name) === false)
                ? 1
                : 0)
                || 0,
            message: 'Template files?',
            name: name,
            type: 'list',
            choices: [
                {
                    name: 'yes',
                    value: true,
                }, {
                    name: 'no',
                    value: false,
                }
            ]
        };
    };
    Prompter.prototype.setGenerator = function (generators) {
        this.generators = generators;
    };
    Prompter.prototype.setOptions = function (promptings, cb) {
        this.cb = cb;
        this.setOption(promptings.options, 0);
    };
    Prompter.prototype.setTemplateChoices = function (template) {
        if (process.argv[3] === undefined) {
            template.choices = this.generators;
        }
        else {
            var param = process.argv[3].replace('--tpl=', '');
            template.choices = {
                choices: [{
                        name: "generator-" + param,
                        value: param
                    }]
            };
        }
    };
    Prompter.prototype.setOption = function (options, i) {
        var option = options[i];
        this.configOptions(option);
        if (option.choices && option.choices.length === 1) {
            var choice = option.choices[0];
            this.setOptionAnswer(options, i, (_a = {},
                _a[option.name] = choice.value,
                _a));
        }
        else {
            _1.core.yo
                .prompt(option)
                .then(this.setOptionAnswer.bind(this, options, i));
        }
        var _a;
    };
    Prompter.prototype.configOptions = function (option) {
        if (!option)
            return;
        if (!option.type)
            option.type = 'list';
        this.optionExclude(option);
        var name = _1.core.yo.config.get(option.name);
        option.default = (name)
            ? name
            : option.default || 0;
    };
    Prompter.prototype.optionExclude = function (option) {
        if (!option.choices)
            return;
        var length = option.choices.length;
        for (option.i = 0; option.i < length; option.i++) {
            this.optionExcludeChoice(option, option.choices[option.i]);
        }
    };
    Prompter.prototype.setOptionAnswer = function (options, i, answer) {
        var promptKey = this.getKey(answer);
        var promptVal = answer[promptKey];
        this.answers[promptKey] = promptVal;
        _1.core.yo.config.set(promptKey, promptVal);
        this.searchInChoices(options[i].choices, promptKey, promptVal);
        (options[i + 1])
            ? this.setOption(options, i + 1)
            : this.cb();
    };
    Prompter.prototype.getKey = function (obj) {
        return Object.keys(obj)[0];
    };
    Prompter.prototype.searchInChoices = function (choices, promptKey, promptVal) {
        if (choices) {
            for (var prop in choices) {
                this.choicedHaveExtra(choices[prop], promptKey, promptVal);
            }
        }
    };
    Prompter.prototype.choicedHaveExtra = function (choice, promptKey, promptVal) {
        if (choice.value === promptVal && choice.extra) {
            _1.core.yo.config.set(promptKey + "Extra", choice.extra);
        }
    };
    return Prompter;
}());
exports.default = Prompter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,