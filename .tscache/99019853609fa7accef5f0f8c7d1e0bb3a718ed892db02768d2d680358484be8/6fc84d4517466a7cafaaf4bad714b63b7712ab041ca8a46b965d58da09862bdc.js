"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var https = require("https");
var SearchGenerators = /** @class */ (function () {
    function SearchGenerators() {
        var _this = this;
        this.getChoice = function (name, value) { return ({ name: name, value: value }); };
        this.searchResp = function (resp) {
            var obj = {
                data: ''
            };
            resp.on('data', _this.respData.bind(_this, obj));
            resp.on('end', _this.respEnd.bind(_this, obj));
            resp.on('error', _this.respError);
        };
        this.respData = function (obj, chunk) {
            obj.data += chunk;
        };
        this.respEnd = function (obj) {
            var json = JSON.parse(obj.data);
            for (var _i = 0, json_1 = json; _i < json_1.length; _i++) {
                var data = json_1[_i];
                _this.checkGeneratorSpeedSeed(data);
            }
        };
        this.isGeneratorSpeedseed = function (choice, data) {
            return (choice.name === "generator-" + data.name);
        };
        this.isNotBlackList = function (name) {
            var gs = 'generator-speedseed-';
            if (name === gs + "angular2-whitespace")
                return false;
            if (name === gs + "polymer-whitespace")
                return false;
            return true;
        };
        this.setOfficialGenerators();
        this.searchGenerators();
        return this.choices;
    }
    SearchGenerators.prototype.setOfficialGenerators = function () {
        var gs = 'generator-speedseed-';
        this.choices = [
            this.getChoice(gs + "multi-tic-tac-toe", 'multi-tic-tac-toe'),
            this.getChoice(gs + "cleanly-angular2-tour-of-heroes", 'cleanly-angular2-tour-of-heroes'),
            this.getChoice(gs + "cleanly-polymer-get-started", 'cleanly-polymer-get-started'),
            this.getChoice(gs + "cleanly-todomvc", 'cleanly-todomvc'),
            this.getChoice(gs + "cleanly-breakouts", 'cleanly-breakouts')
        ];
    };
    SearchGenerators.prototype.searchGenerators = function () {
        var yoJson = 'https://storage.googleapis.com/generators.yeoman.io/cache.json';
        https.get(yoJson, this.searchResp);
    };
    SearchGenerators.prototype.respError = function (err) { };
    SearchGenerators.prototype.checkGeneratorSpeedSeed = function (data) {
        if (this.isTplSpeedseed(data) &&
            !this.searchGeneratorsIncludes(data)) {
            this.choices.push({
                name: "generator-" + data.name,
                value: data.name.substring(10)
            });
        }
    };
    SearchGenerators.prototype.isTplSpeedseed = function (data) {
        var CHARS_TEMPLATING = 'speedseed-';
        var FIRST_CHARS_DATA = data.name.substring(0, CHARS_TEMPLATING.length);
        return FIRST_CHARS_DATA === CHARS_TEMPLATING;
    };
    SearchGenerators.prototype.searchGeneratorsIncludes = function (data) {
        var isFinded = false;
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            if (this.isGeneratorSpeedseed(choice, data) &&
                this.isNotBlackList(choice.name)) {
                isFinded = true;
            }
        }
        return isFinded;
    };
    return SearchGenerators;
}());
exports.default = SearchGenerators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,