'use strict';
var _ = require('lodash');
/**
 * The Generator store
 * This is used to store generator (npm packages) reference and instantiate them when
 * requested.
 * @constructor
 * @private
 */
var Store = module.exports = function Store() {
    this._generators = {};
    this._meta = {};
};
/**
 * Store a module under the namespace key
 * @param {String}          namespace - The key under which the generator can be retrieved
 * @param {String|Function} generator - A generator module or a module path
 */
Store.prototype.add = function add(namespace, generator) {
    if (_.isString(generator)) {
        this._storeAsPath(namespace, generator);
        return;
    }
    this._storeAsModule(namespace, generator);
};
Store.prototype._storeAsPath = function _storeAsPath(namespace, path) {
    this._meta[namespace] = {
        resolved: path,
        namespace: namespace
    };
    Object.defineProperty(this._generators, namespace, {
        get: function () {
            var Generator = require(path);
            return Generator;
        },
        enumerable: true,
        configurable: true
    });
};
Store.prototype._storeAsModule = function _storeAsModule(namespace, Generator) {
    this._meta[namespace] = {
        resolved: 'unknown',
        namespace: namespace
    };
    this._generators[namespace] = Generator;
};
/**
 * Get the module registered under the given namespace
 * @param  {String} namespace
 * @return {Module}
 */
Store.prototype.get = function get(namespace) {
    var Generator = this._generators[namespace];
    if (!Generator) {
        return;
    }
    return _.extend(Generator, this._meta[namespace]);
};
/**
 * Returns the list of registered namespace.
 * @return {Array} Namespaces array
 */
Store.prototype.namespaces = function namespaces() {
    return Object.keys(this._generators);
};
/**
 * Get the stored generators meta data
 * @return {Object} Generators metadata
 */
Store.prototype.getGeneratorsMeta = function getGeneratorsMeta() {
    return this._meta;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx5ZW9tYW4tZW52aXJvbm1lbnRcXGxpYlxcc3RvcmUuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xceWVvbWFuLWVudmlyb25tZW50XFxsaWJcXHN0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUxQjs7Ozs7O0dBTUc7QUFFSCxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFFSCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxhQUFhLFNBQVMsRUFBRSxTQUFTO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQztJQUNULENBQUM7SUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxzQkFBc0IsU0FBUyxFQUFFLElBQUk7SUFDbEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRztRQUN0QixRQUFRLEVBQUUsSUFBSTtRQUNkLFNBQVMsRUFBRSxTQUFTO0tBQ3JCLENBQUM7SUFFRixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ2pELEdBQUcsRUFBRTtZQUNILElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ25CLENBQUM7UUFDRCxVQUFVLEVBQUUsSUFBSTtRQUNoQixZQUFZLEVBQUUsSUFBSTtLQUNuQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyx3QkFBd0IsU0FBUyxFQUFFLFNBQVM7SUFDM0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRztRQUN0QixRQUFRLEVBQUUsU0FBUztRQUNuQixTQUFTLEVBQUUsU0FBUztLQUNyQixDQUFDO0lBRUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUVILEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLGFBQWEsU0FBUztJQUMxQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQztJQUNULENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUVILEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHO0lBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFFSCxLQUFLLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFHO0lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbi8qKlxuICogVGhlIEdlbmVyYXRvciBzdG9yZVxuICogVGhpcyBpcyB1c2VkIHRvIHN0b3JlIGdlbmVyYXRvciAobnBtIHBhY2thZ2VzKSByZWZlcmVuY2UgYW5kIGluc3RhbnRpYXRlIHRoZW0gd2hlblxuICogcmVxdWVzdGVkLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBTdG9yZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU3RvcmUoKSB7XG4gIHRoaXMuX2dlbmVyYXRvcnMgPSB7fTtcbiAgdGhpcy5fbWV0YSA9IHt9O1xufTtcblxuLyoqXG4gKiBTdG9yZSBhIG1vZHVsZSB1bmRlciB0aGUgbmFtZXNwYWNlIGtleVxuICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgIG5hbWVzcGFjZSAtIFRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGdlbmVyYXRvciBjYW4gYmUgcmV0cmlldmVkXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gZ2VuZXJhdG9yIC0gQSBnZW5lcmF0b3IgbW9kdWxlIG9yIGEgbW9kdWxlIHBhdGhcbiAqL1xuXG5TdG9yZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWVzcGFjZSwgZ2VuZXJhdG9yKSB7XG4gIGlmIChfLmlzU3RyaW5nKGdlbmVyYXRvcikpIHtcbiAgICB0aGlzLl9zdG9yZUFzUGF0aChuYW1lc3BhY2UsIGdlbmVyYXRvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fc3RvcmVBc01vZHVsZShuYW1lc3BhY2UsIGdlbmVyYXRvcik7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3N0b3JlQXNQYXRoID0gZnVuY3Rpb24gX3N0b3JlQXNQYXRoKG5hbWVzcGFjZSwgcGF0aCkge1xuICB0aGlzLl9tZXRhW25hbWVzcGFjZV0gPSB7XG4gICAgcmVzb2x2ZWQ6IHBhdGgsXG4gICAgbmFtZXNwYWNlOiBuYW1lc3BhY2VcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5fZ2VuZXJhdG9ycywgbmFtZXNwYWNlLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgR2VuZXJhdG9yID0gcmVxdWlyZShwYXRoKTtcbiAgICAgIHJldHVybiBHZW5lcmF0b3I7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fc3RvcmVBc01vZHVsZSA9IGZ1bmN0aW9uIF9zdG9yZUFzTW9kdWxlKG5hbWVzcGFjZSwgR2VuZXJhdG9yKSB7XG4gIHRoaXMuX21ldGFbbmFtZXNwYWNlXSA9IHtcbiAgICByZXNvbHZlZDogJ3Vua25vd24nLFxuICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlXG4gIH07XG5cbiAgdGhpcy5fZ2VuZXJhdG9yc1tuYW1lc3BhY2VdID0gR2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIG1vZHVsZSByZWdpc3RlcmVkIHVuZGVyIHRoZSBnaXZlbiBuYW1lc3BhY2VcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtNb2R1bGV9XG4gKi9cblxuU3RvcmUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lc3BhY2UpIHtcbiAgdmFyIEdlbmVyYXRvciA9IHRoaXMuX2dlbmVyYXRvcnNbbmFtZXNwYWNlXTtcblxuICBpZiAoIUdlbmVyYXRvcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBfLmV4dGVuZChHZW5lcmF0b3IsIHRoaXMuX21ldGFbbmFtZXNwYWNlXSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGxpc3Qgb2YgcmVnaXN0ZXJlZCBuYW1lc3BhY2UuXG4gKiBAcmV0dXJuIHtBcnJheX0gTmFtZXNwYWNlcyBhcnJheVxuICovXG5cblN0b3JlLnByb3RvdHlwZS5uYW1lc3BhY2VzID0gZnVuY3Rpb24gbmFtZXNwYWNlcygpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2dlbmVyYXRvcnMpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHN0b3JlZCBnZW5lcmF0b3JzIG1ldGEgZGF0YVxuICogQHJldHVybiB7T2JqZWN0fSBHZW5lcmF0b3JzIG1ldGFkYXRhXG4gKi9cblxuU3RvcmUucHJvdG90eXBlLmdldEdlbmVyYXRvcnNNZXRhID0gZnVuY3Rpb24gZ2V0R2VuZXJhdG9yc01ldGEoKSB7XG4gIHJldHVybiB0aGlzLl9tZXRhO1xufTtcbiJdfQ==