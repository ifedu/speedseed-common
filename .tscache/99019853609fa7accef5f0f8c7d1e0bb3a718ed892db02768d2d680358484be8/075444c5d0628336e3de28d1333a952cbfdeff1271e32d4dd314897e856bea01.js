/**
 * `editor` type prompt
 */
var util = require('util');
var chalk = require('chalk');
var ExternalEditor = require('external-editor');
var Base = require('./base');
var observe = require('../utils/events');
var rx = require('rx');
/**
 * Module exports
 */
module.exports = Prompt;
/**
 * Constructor
 */
function Prompt() {
    return Base.apply(this, arguments);
}
util.inherits(Prompt, Base);
/**
 * Start the Inquiry session
 * @param  {Function} cb      Callback when prompt is done
 * @return {this}
 */
Prompt.prototype._run = function (cb) {
    this.done = cb;
    this.editorResult = new rx.Subject();
    // Open Editor on "line" (Enter Key)
    var events = observe(this.rl);
    this.lineSubscription = events.line.forEach(this.startExternalEditor.bind(this));
    // Trigger Validation when editor closes
    var validation = this.handleSubmitEvents(this.editorResult);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));
    // Prevents default from being printed on screen (can look weird with multiple lines)
    this.currentText = this.opt.default;
    this.opt.default = null;
    // Init
    this.render();
    return this;
};
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */
Prompt.prototype.render = function (error) {
    var bottomContent = '';
    var message = this.getQuestion();
    if (this.status === 'answered') {
        message += chalk.dim('Received');
    }
    else {
        message += chalk.dim('Press <enter> to launch your preferred editor.');
    }
    if (error) {
        bottomContent = chalk.red('>> ') + error;
    }
    this.screen.render(message, bottomContent);
};
/**
 * Launch $EDITOR on user press enter
 */
Prompt.prototype.startExternalEditor = function () {
    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
    this.rl.pause();
    ExternalEditor.editAsync(this.currentText, this.endExternalEditor.bind(this));
};
Prompt.prototype.endExternalEditor = function (error, result) {
    this.rl.resume();
    if (error) {
        this.editorResult.onError(error);
    }
    else {
        this.editorResult.onNext(result);
    }
};
Prompt.prototype.onEnd = function (state) {
    this.editorResult.dispose();
    this.lineSubscription.dispose();
    this.answer = state.value;
    this.status = 'answered';
    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(this.answer);
};
Prompt.prototype.onError = function (state) {
    this.render(state.isValid);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxwcm9tcHRzXFxlZGl0b3IuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcaW5xdWlyZXJcXGxpYlxccHJvbXB0c1xcZWRpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNoRCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDekMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZCOztHQUVHO0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFFeEI7O0dBRUc7QUFFSDtJQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFNUI7Ozs7R0FJRztBQUVILE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsRUFBRTtJQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUVmLElB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O0lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFDekIsbUJBQW1CO0lBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxLQUFLO0lBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYGVkaXRvcmAgdHlwZSBwcm9tcHRcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJyk7XG52YXIgRXh0ZXJuYWxFZGl0b3IgPSByZXF1aXJlKCdleHRlcm5hbC1lZGl0b3InKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG52YXIgb2JzZXJ2ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xudmFyIHJ4ID0gcmVxdWlyZSgncngnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbXB0O1xuXG4vKipcbiAqIENvbnN0cnVjdG9yXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KCkge1xuICByZXR1cm4gQmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxudXRpbC5pbmhlcml0cyhQcm9tcHQsIEJhc2UpO1xuXG4vKipcbiAqIFN0YXJ0IHRoZSBJbnF1aXJ5IHNlc3Npb25cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgICAgIENhbGxiYWNrIHdoZW4gcHJvbXB0IGlzIGRvbmVcbiAqIEByZXR1cm4ge3RoaXN9XG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5fcnVuID0gZnVuY3Rpb24gKGNiKSB7XG4gIHRoaXMuZG9uZSA9IGNiO1xuXG4gIHRoaXMuZWRpdG9yUmVzdWx0ID0gbmV3IHJ4LlN1YmplY3QoKTtcblxuICAvLyBPcGVuIEVkaXRvciBvbiBcImxpbmVcIiAoRW50ZXIgS2V5KVxuICB2YXIgZXZlbnRzID0gb2JzZXJ2ZSh0aGlzLnJsKTtcbiAgdGhpcy5saW5lU3Vic2NyaXB0aW9uID0gZXZlbnRzLmxpbmUuZm9yRWFjaCh0aGlzLnN0YXJ0RXh0ZXJuYWxFZGl0b3IuYmluZCh0aGlzKSk7XG5cbiAgLy8gVHJpZ2dlciBWYWxpZGF0aW9uIHdoZW4gZWRpdG9yIGNsb3Nlc1xuICB2YXIgdmFsaWRhdGlvbiA9IHRoaXMuaGFuZGxlU3VibWl0RXZlbnRzKHRoaXMuZWRpdG9yUmVzdWx0KTtcbiAgdmFsaWRhdGlvbi5zdWNjZXNzLmZvckVhY2godGhpcy5vbkVuZC5iaW5kKHRoaXMpKTtcbiAgdmFsaWRhdGlvbi5lcnJvci5mb3JFYWNoKHRoaXMub25FcnJvci5iaW5kKHRoaXMpKTtcblxuICAvLyBQcmV2ZW50cyBkZWZhdWx0IGZyb20gYmVpbmcgcHJpbnRlZCBvbiBzY3JlZW4gKGNhbiBsb29rIHdlaXJkIHdpdGggbXVsdGlwbGUgbGluZXMpXG4gIHRoaXMuY3VycmVudFRleHQgPSB0aGlzLm9wdC5kZWZhdWx0O1xuICB0aGlzLm9wdC5kZWZhdWx0ID0gbnVsbDtcblxuICAvLyBJbml0XG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgcHJvbXB0IHRvIHNjcmVlblxuICogQHJldHVybiB7UHJvbXB0fSBzZWxmXG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgdmFyIGJvdHRvbUNvbnRlbnQgPSAnJztcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLmdldFF1ZXN0aW9uKCk7XG5cbiAgaWYgKHRoaXMuc3RhdHVzID09PSAnYW5zd2VyZWQnKSB7XG4gICAgbWVzc2FnZSArPSBjaGFsay5kaW0oJ1JlY2VpdmVkJyk7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSArPSBjaGFsay5kaW0oJ1ByZXNzIDxlbnRlcj4gdG8gbGF1bmNoIHlvdXIgcHJlZmVycmVkIGVkaXRvci4nKTtcbiAgfVxuXG4gIGlmIChlcnJvcikge1xuICAgIGJvdHRvbUNvbnRlbnQgPSBjaGFsay5yZWQoJz4+ICcpICsgZXJyb3I7XG4gIH1cblxuICB0aGlzLnNjcmVlbi5yZW5kZXIobWVzc2FnZSwgYm90dG9tQ29udGVudCk7XG59O1xuXG4vKipcbiAqIExhdW5jaCAkRURJVE9SIG9uIHVzZXIgcHJlc3MgZW50ZXJcbiAqL1xuXG5Qcm9tcHQucHJvdG90eXBlLnN0YXJ0RXh0ZXJuYWxFZGl0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFBhdXNlIFJlYWRsaW5lIHRvIHByZXZlbnQgc3RkaW4gYW5kIHN0ZG91dCBmcm9tIGJlaW5nIG1vZGlmaWVkIHdoaWxlIHRoZSBlZGl0b3IgaXMgc2hvd2luZ1xuICB0aGlzLnJsLnBhdXNlKCk7XG4gIEV4dGVybmFsRWRpdG9yLmVkaXRBc3luYyh0aGlzLmN1cnJlbnRUZXh0LCB0aGlzLmVuZEV4dGVybmFsRWRpdG9yLmJpbmQodGhpcykpO1xufTtcblxuUHJvbXB0LnByb3RvdHlwZS5lbmRFeHRlcm5hbEVkaXRvciA9IGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gIHRoaXMucmwucmVzdW1lKCk7XG4gIGlmIChlcnJvcikge1xuICAgIHRoaXMuZWRpdG9yUmVzdWx0Lm9uRXJyb3IoZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZWRpdG9yUmVzdWx0Lm9uTmV4dChyZXN1bHQpO1xuICB9XG59O1xuXG5Qcm9tcHQucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRoaXMuZWRpdG9yUmVzdWx0LmRpc3Bvc2UoKTtcbiAgdGhpcy5saW5lU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgdGhpcy5hbnN3ZXIgPSBzdGF0ZS52YWx1ZTtcbiAgdGhpcy5zdGF0dXMgPSAnYW5zd2VyZWQnO1xuICAvLyBSZS1yZW5kZXIgcHJvbXB0XG4gIHRoaXMucmVuZGVyKCk7XG4gIHRoaXMuc2NyZWVuLmRvbmUoKTtcbiAgdGhpcy5kb25lKHRoaXMuYW5zd2VyKTtcbn07XG5cblByb21wdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICB0aGlzLnJlbmRlcihzdGF0ZS5pc1ZhbGlkKTtcbn07XG4iXX0=