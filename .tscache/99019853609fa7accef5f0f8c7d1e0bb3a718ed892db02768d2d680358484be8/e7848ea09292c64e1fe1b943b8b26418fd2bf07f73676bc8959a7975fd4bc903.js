"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var fs_1 = require("fs");
var path_1 = require("path");
var _1 = require("../");
var Construct = /** @class */ (function () {
    function Construct() {
        this.jsonConstruct = {};
        this.jsonSeed = {};
    }
    Construct.prototype.checkJson = function (route) {
        if (fs_1.existsSync(route)) {
            this.readJsons(route);
        }
    };
    Construct.prototype.setJson = function (route) {
        if (fs_1.existsSync(route)) {
            fs_1.readdirSync(route)
                .forEach(this.jsonsEach.bind(this, route, 'jsonConstruct'));
        }
    };
    Construct.prototype.writeJsonSeed = function (dest) {
        fs_1.mkdirSync(dest);
        fs_1.mkdirSync(dest + "/construct");
        for (var prop in this.jsonSeed) {
            var routeProp = "/construct/" + prop;
            this.writeFileExportJs("" + dest + routeProp, this.jsonSeed[prop], 4);
        }
    };
    Construct.prototype.writeJsonConstruct = function () {
        for (var prop in this.jsonConstruct) {
            var jsonStr = JSON.stringify(this.jsonConstruct[prop]);
            var transform = {
                'evaluate': /<%=([\s\S]+?)%>/g,
                'interpolate': /<%=([\s\S]+?)%>/g
            };
            var data = lodash_1.template(jsonStr, transform)(_1.core.options);
            var nameFile = path_1.basename(prop, '.ts');
            nameFile = nameFile + ".json";
            console.log("   create " + nameFile);
            this.writeFile(nameFile, JSON.parse(data), 4);
        }
    };
    Construct.prototype.readJsons = function (route) {
        fs_1.readdirSync(route)
            .forEach(this.jsonsEach.bind(this, route, 'jsonSeed'));
    };
    Construct.prototype.jsonsEach = function (route, json, file) {
        this[json][file] = this[json][file] || {};
        var data = require(route + "/" + file).default;
        lodash_1.merge(this[json][file], data);
    };
    Construct.prototype.writeFileExportJs = function (nameFile, data, spaces) {
        var json = JSON.stringify(data, null, spaces);
        var content = "export default " + json;
        fs_1.writeFileSync(nameFile, content);
    };
    Construct.prototype.writeFile = function (nameFile, data, spaces) {
        fs_1.writeFileSync(nameFile, JSON.stringify(data, null, spaces));
    };
    return Construct;
}());
exports.default = Construct;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzcGVlZHNlZWRcXHNyY1xcY29uc3RydWN0LnRzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXHNwZWVkc2VlZFxcc3JjXFxjb25zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBd0M7QUFDeEMseUJBQXNFO0FBQ3RFLDZCQUErQjtBQUUvQix3QkFBNEM7QUFFNUM7SUFBQTtRQUdZLGtCQUFhLEdBQVEsRUFBRSxDQUFBO1FBQ3ZCLGFBQVEsR0FBUSxFQUFFLENBQUE7SUFvRTlCLENBQUM7SUFsRUcsNkJBQVMsR0FBVCxVQUFVLEtBQVU7UUFDaEIsRUFBRSxDQUFDLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQsMkJBQU8sR0FBUCxVQUFRLEtBQWE7UUFDakIsRUFBRSxDQUFDLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixnQkFBVyxDQUFDLEtBQUssQ0FBQztpQkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQTtRQUMvRCxDQUFDO0lBQ0wsQ0FBQztJQUVELGlDQUFhLEdBQWIsVUFBYyxJQUFZO1FBQ3RCLGNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNmLGNBQVMsQ0FBSSxJQUFJLGVBQVksQ0FBQyxDQUFBO1FBRTlCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQU0sU0FBUyxHQUFHLGdCQUFjLElBQU0sQ0FBQTtZQUV0QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBRyxJQUFJLEdBQUcsU0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDekUsQ0FBQztJQUNMLENBQUM7SUFFRCxzQ0FBa0IsR0FBbEI7UUFDSSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNsQyxJQUFNLE9BQU8sR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUNoRSxJQUFNLFNBQVMsR0FBUTtnQkFDbkIsVUFBVSxFQUFFLGtCQUFrQjtnQkFDOUIsYUFBYSxFQUFFLGtCQUFrQjthQUNwQyxDQUFBO1lBRUQsSUFBTSxJQUFJLEdBQVEsaUJBQVEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsT0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRTVELElBQUksUUFBUSxHQUFXLGVBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDNUMsUUFBUSxHQUFNLFFBQVEsVUFBTyxDQUFBO1lBRTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBYSxRQUFVLENBQUMsQ0FBQTtZQUVwQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ2pELENBQUM7SUFDTCxDQUFDO0lBRU8sNkJBQVMsR0FBakIsVUFBa0IsS0FBYTtRQUMzQixnQkFBVyxDQUFDLEtBQUssQ0FBQzthQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFFTyw2QkFBUyxHQUFqQixVQUFrQixLQUFhLEVBQUUsSUFBWSxFQUFFLElBQVM7UUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFekMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFJLEtBQUssU0FBSSxJQUFNLENBQUMsQ0FBQyxPQUFPLENBQUE7UUFFaEQsY0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRU8scUNBQWlCLEdBQXpCLFVBQTBCLFFBQWdCLEVBQUUsSUFBUyxFQUFFLE1BQWM7UUFDakUsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQy9DLElBQU0sT0FBTyxHQUFHLG9CQUFrQixJQUFNLENBQUE7UUFFeEMsa0JBQWEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVPLDZCQUFTLEdBQWpCLFVBQWtCLFFBQWdCLEVBQUUsSUFBUyxFQUFFLE1BQWM7UUFDekQsa0JBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FBQyxBQXhFRCxJQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lcmdlLCB0ZW1wbGF0ZSB9IGZyb20gJ2xvZGFzaCdcclxuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJTeW5jLCByZWFkZGlyU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJ1xyXG5pbXBvcnQgeyBiYXNlbmFtZSB9IGZyb20gJ3BhdGgnXHJcblxyXG5pbXBvcnQgeyBIZWxwZXIsIGNvcmUsIHByb21wdGVyIH0gZnJvbSAnLi4vJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uc3RydWN0IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueVxyXG5cclxuICAgIHByaXZhdGUganNvbkNvbnN0cnVjdDogYW55ID0ge31cclxuICAgIHByaXZhdGUganNvblNlZWQ6IGFueSA9IHt9XHJcblxyXG4gICAgY2hlY2tKc29uKHJvdXRlOiBhbnkpIHtcclxuICAgICAgICBpZiAoZXhpc3RzU3luYyhyb3V0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWFkSnNvbnMocm91dGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEpzb24ocm91dGU6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChleGlzdHNTeW5jKHJvdXRlKSkge1xyXG4gICAgICAgICAgICByZWFkZGlyU3luYyhyb3V0ZSlcclxuICAgICAgICAgICAgLmZvckVhY2godGhpcy5qc29uc0VhY2guYmluZCh0aGlzLCByb3V0ZSwgJ2pzb25Db25zdHJ1Y3QnKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVKc29uU2VlZChkZXN0OiBzdHJpbmcpIHtcclxuICAgICAgICBta2RpclN5bmMoZGVzdClcclxuICAgICAgICBta2RpclN5bmMoYCR7ZGVzdH0vY29uc3RydWN0YClcclxuXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB0aGlzLmpzb25TZWVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlUHJvcCA9IGAvY29uc3RydWN0LyR7cHJvcH1gXHJcblxyXG4gICAgICAgICAgICB0aGlzLndyaXRlRmlsZUV4cG9ydEpzKGAke2Rlc3R9JHtyb3V0ZVByb3B9YCwgdGhpcy5qc29uU2VlZFtwcm9wXSwgNClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVKc29uQ29uc3RydWN0KCkge1xyXG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gdGhpcy5qc29uQ29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpzb25TdHI6IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuanNvbkNvbnN0cnVjdFtwcm9wXSlcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICAnZXZhbHVhdGUnOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcclxuICAgICAgICAgICAgICAgICdpbnRlcnBvbGF0ZSc6IC88JT0oW1xcc1xcU10rPyklPi9nXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHRlbXBsYXRlKGpzb25TdHIsIHRyYW5zZm9ybSkoY29yZS5vcHRpb25zKVxyXG5cclxuICAgICAgICAgICAgbGV0IG5hbWVGaWxlOiBzdHJpbmcgPSBiYXNlbmFtZShwcm9wLCAnLnRzJylcclxuICAgICAgICAgICAgbmFtZUZpbGUgPSBgJHtuYW1lRmlsZX0uanNvbmBcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICBjcmVhdGUgJHtuYW1lRmlsZX1gKVxyXG5cclxuICAgICAgICAgICAgdGhpcy53cml0ZUZpbGUobmFtZUZpbGUsIEpTT04ucGFyc2UoZGF0YSksIDQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZEpzb25zKHJvdXRlOiBzdHJpbmcpIHtcclxuICAgICAgICByZWFkZGlyU3luYyhyb3V0ZSlcclxuICAgICAgICAuZm9yRWFjaCh0aGlzLmpzb25zRWFjaC5iaW5kKHRoaXMsIHJvdXRlLCAnanNvblNlZWQnKSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGpzb25zRWFjaChyb3V0ZTogc3RyaW5nLCBqc29uOiBzdHJpbmcsIGZpbGU6IGFueSkge1xyXG4gICAgICAgIHRoaXNbanNvbl1bZmlsZV0gPSB0aGlzW2pzb25dW2ZpbGVdIHx8IHt9XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXF1aXJlKGAke3JvdXRlfS8ke2ZpbGV9YCkuZGVmYXVsdFxyXG5cclxuICAgICAgICBtZXJnZSh0aGlzW2pzb25dW2ZpbGVdLCBkYXRhKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgd3JpdGVGaWxlRXhwb3J0SnMobmFtZUZpbGU6IHN0cmluZywgZGF0YTogYW55LCBzcGFjZXM6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCBzcGFjZXMpXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGBleHBvcnQgZGVmYXVsdCAke2pzb259YFxyXG5cclxuICAgICAgICB3cml0ZUZpbGVTeW5jKG5hbWVGaWxlLCBjb250ZW50KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgd3JpdGVGaWxlKG5hbWVGaWxlOiBzdHJpbmcsIGRhdGE6IGFueSwgc3BhY2VzOiBudW1iZXIpIHtcclxuICAgICAgICB3cml0ZUZpbGVTeW5jKG5hbWVGaWxlLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCBzcGFjZXMpKVxyXG4gICAgfVxyXG59XHJcbiJdfQ==