/**
 * Inquirer.js
 * A collection of common interactive command line user interfaces.
 */
var inquirer = module.exports;
/**
 * Client interfaces
 */
inquirer.prompts = {};
inquirer.Separator = require('./objects/separator');
inquirer.ui = {
    BottomBar: require('./ui/bottom-bar'),
    Prompt: require('./ui/prompt')
};
/**
 * Create a new self-contained prompt module.
 */
inquirer.createPromptModule = function (opt) {
    var promptModule = function (questions) {
        var ui = new inquirer.ui.Prompt(promptModule.prompts, opt);
        var promise = ui.run(questions);
        // Monkey patch the UI on the promise object so
        // that it remains publicly accessible.
        promise.ui = ui;
        return promise;
    };
    promptModule.prompts = {};
    /**
     * Register a prompt type
     * @param {String} name     Prompt type name
     * @param {Function} prompt Prompt constructor
     * @return {inquirer}
     */
    promptModule.registerPrompt = function (name, prompt) {
        promptModule.prompts[name] = prompt;
        return this;
    };
    /**
     * Register the defaults provider prompts
     */
    promptModule.restoreDefaultPrompts = function () {
        this.registerPrompt('list', require('./prompts/list'));
        this.registerPrompt('input', require('./prompts/input'));
        this.registerPrompt('confirm', require('./prompts/confirm'));
        this.registerPrompt('rawlist', require('./prompts/rawlist'));
        this.registerPrompt('expand', require('./prompts/expand'));
        this.registerPrompt('checkbox', require('./prompts/checkbox'));
        this.registerPrompt('password', require('./prompts/password'));
        this.registerPrompt('editor', require('./prompts/editor'));
    };
    promptModule.restoreDefaultPrompts();
    return promptModule;
};
/**
 * Public CLI helper interface
 * @param  {Array|Object|rx.Observable} questions - Questions settings array
 * @param  {Function} cb - Callback being passed the user answers
 * @return {inquirer.ui.Prompt}
 */
inquirer.prompt = inquirer.createPromptModule();
// Expose helper functions on the top level for easiest usage by common users
inquirer.registerPrompt = function (name, prompt) {
    inquirer.prompt.registerPrompt(name, prompt);
};
inquirer.restoreDefaultPrompts = function () {
    inquirer.prompt.restoreDefaultPrompts();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxpbnF1aXJlci5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxpbnF1aXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBRTlCOztHQUVHO0FBRUgsUUFBUSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFFdEIsUUFBUSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUVwRCxRQUFRLENBQUMsRUFBRSxHQUFHO0lBQ1osU0FBUyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUNyQyxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQztDQUMvQixDQUFDO0FBRUY7O0dBRUc7QUFDSCxRQUFRLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxHQUFHO0lBQ3pDLElBQUksWUFBWSxHQUFHLFVBQVUsU0FBUztRQUNwQyxJQUFJLEVBQUUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0QsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoQywrQ0FBK0M7UUFDL0MsdUNBQXVDO1FBQ3ZDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRWhCLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQyxDQUFDO0lBQ0YsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFMUI7Ozs7O09BS0c7SUFFSCxZQUFZLENBQUMsY0FBYyxHQUFHLFVBQVUsSUFBSSxFQUFFLE1BQU07UUFDbEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBRUgsWUFBWSxDQUFDLHFCQUFxQixHQUFHO1FBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUM7SUFFRixZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUVyQyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGOzs7OztHQUtHO0FBRUgsUUFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUVoRCw2RUFBNkU7QUFDN0UsUUFBUSxDQUFDLGNBQWMsR0FBRyxVQUFVLElBQUksRUFBRSxNQUFNO0lBQzlDLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFDRixRQUFRLENBQUMscUJBQXFCLEdBQUc7SUFDL0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQzFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW5xdWlyZXIuanNcbiAqIEEgY29sbGVjdGlvbiBvZiBjb21tb24gaW50ZXJhY3RpdmUgY29tbWFuZCBsaW5lIHVzZXIgaW50ZXJmYWNlcy5cbiAqL1xuXG52YXIgaW5xdWlyZXIgPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBDbGllbnQgaW50ZXJmYWNlc1xuICovXG5cbmlucXVpcmVyLnByb21wdHMgPSB7fTtcblxuaW5xdWlyZXIuU2VwYXJhdG9yID0gcmVxdWlyZSgnLi9vYmplY3RzL3NlcGFyYXRvcicpO1xuXG5pbnF1aXJlci51aSA9IHtcbiAgQm90dG9tQmFyOiByZXF1aXJlKCcuL3VpL2JvdHRvbS1iYXInKSxcbiAgUHJvbXB0OiByZXF1aXJlKCcuL3VpL3Byb21wdCcpXG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzZWxmLWNvbnRhaW5lZCBwcm9tcHQgbW9kdWxlLlxuICovXG5pbnF1aXJlci5jcmVhdGVQcm9tcHRNb2R1bGUgPSBmdW5jdGlvbiAob3B0KSB7XG4gIHZhciBwcm9tcHRNb2R1bGUgPSBmdW5jdGlvbiAocXVlc3Rpb25zKSB7XG4gICAgdmFyIHVpID0gbmV3IGlucXVpcmVyLnVpLlByb21wdChwcm9tcHRNb2R1bGUucHJvbXB0cywgb3B0KTtcbiAgICB2YXIgcHJvbWlzZSA9IHVpLnJ1bihxdWVzdGlvbnMpO1xuXG4gICAgLy8gTW9ua2V5IHBhdGNoIHRoZSBVSSBvbiB0aGUgcHJvbWlzZSBvYmplY3Qgc29cbiAgICAvLyB0aGF0IGl0IHJlbWFpbnMgcHVibGljbHkgYWNjZXNzaWJsZS5cbiAgICBwcm9taXNlLnVpID0gdWk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcbiAgcHJvbXB0TW9kdWxlLnByb21wdHMgPSB7fTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwcm9tcHQgdHlwZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAgICAgUHJvbXB0IHR5cGUgbmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9tcHQgUHJvbXB0IGNvbnN0cnVjdG9yXG4gICAqIEByZXR1cm4ge2lucXVpcmVyfVxuICAgKi9cblxuICBwcm9tcHRNb2R1bGUucmVnaXN0ZXJQcm9tcHQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbXB0KSB7XG4gICAgcHJvbXB0TW9kdWxlLnByb21wdHNbbmFtZV0gPSBwcm9tcHQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHRoZSBkZWZhdWx0cyBwcm92aWRlciBwcm9tcHRzXG4gICAqL1xuXG4gIHByb21wdE1vZHVsZS5yZXN0b3JlRGVmYXVsdFByb21wdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWdpc3RlclByb21wdCgnbGlzdCcsIHJlcXVpcmUoJy4vcHJvbXB0cy9saXN0JykpO1xuICAgIHRoaXMucmVnaXN0ZXJQcm9tcHQoJ2lucHV0JywgcmVxdWlyZSgnLi9wcm9tcHRzL2lucHV0JykpO1xuICAgIHRoaXMucmVnaXN0ZXJQcm9tcHQoJ2NvbmZpcm0nLCByZXF1aXJlKCcuL3Byb21wdHMvY29uZmlybScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyUHJvbXB0KCdyYXdsaXN0JywgcmVxdWlyZSgnLi9wcm9tcHRzL3Jhd2xpc3QnKSk7XG4gICAgdGhpcy5yZWdpc3RlclByb21wdCgnZXhwYW5kJywgcmVxdWlyZSgnLi9wcm9tcHRzL2V4cGFuZCcpKTtcbiAgICB0aGlzLnJlZ2lzdGVyUHJvbXB0KCdjaGVja2JveCcsIHJlcXVpcmUoJy4vcHJvbXB0cy9jaGVja2JveCcpKTtcbiAgICB0aGlzLnJlZ2lzdGVyUHJvbXB0KCdwYXNzd29yZCcsIHJlcXVpcmUoJy4vcHJvbXB0cy9wYXNzd29yZCcpKTtcbiAgICB0aGlzLnJlZ2lzdGVyUHJvbXB0KCdlZGl0b3InLCByZXF1aXJlKCcuL3Byb21wdHMvZWRpdG9yJykpO1xuICB9O1xuXG4gIHByb21wdE1vZHVsZS5yZXN0b3JlRGVmYXVsdFByb21wdHMoKTtcblxuICByZXR1cm4gcHJvbXB0TW9kdWxlO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQ0xJIGhlbHBlciBpbnRlcmZhY2VcbiAqIEBwYXJhbSAge0FycmF5fE9iamVjdHxyeC5PYnNlcnZhYmxlfSBxdWVzdGlvbnMgLSBRdWVzdGlvbnMgc2V0dGluZ3MgYXJyYXlcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIGJlaW5nIHBhc3NlZCB0aGUgdXNlciBhbnN3ZXJzXG4gKiBAcmV0dXJuIHtpbnF1aXJlci51aS5Qcm9tcHR9XG4gKi9cblxuaW5xdWlyZXIucHJvbXB0ID0gaW5xdWlyZXIuY3JlYXRlUHJvbXB0TW9kdWxlKCk7XG5cbi8vIEV4cG9zZSBoZWxwZXIgZnVuY3Rpb25zIG9uIHRoZSB0b3AgbGV2ZWwgZm9yIGVhc2llc3QgdXNhZ2UgYnkgY29tbW9uIHVzZXJzXG5pbnF1aXJlci5yZWdpc3RlclByb21wdCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9tcHQpIHtcbiAgaW5xdWlyZXIucHJvbXB0LnJlZ2lzdGVyUHJvbXB0KG5hbWUsIHByb21wdCk7XG59O1xuaW5xdWlyZXIucmVzdG9yZURlZmF1bHRQcm9tcHRzID0gZnVuY3Rpb24gKCkge1xuICBpbnF1aXJlci5wcm9tcHQucmVzdG9yZURlZmF1bHRQcm9tcHRzKCk7XG59O1xuIl19