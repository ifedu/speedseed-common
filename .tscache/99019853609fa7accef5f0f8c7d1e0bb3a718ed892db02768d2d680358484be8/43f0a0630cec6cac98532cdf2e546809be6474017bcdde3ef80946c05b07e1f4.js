'use strict';
var match = function (arr, val) { return arr.some(function (x) { return x instanceof RegExp ? x.test(val) : x === val; }); };
module.exports = function (input, opts) {
    var args = [];
    var extraArgs = [];
    opts = Object.assign({
        useEquals: true
    }, opts);
    var makeArg = function (key, val) {
        key = '--' + (opts.allowCamelCase ? key : key.replace(/[A-Z]/g, '-$&').toLowerCase());
        if (opts.useEquals) {
            args.push(key + (val ? "=" + val : ''));
        }
        else {
            args.push(key);
            if (val) {
                args.push(val);
            }
        }
    };
    var makeAliasArg = function (key, val) {
        args.push("-" + key);
        if (val) {
            args.push(val);
        }
    };
    // TODO: use for-of loop and Object.entries when targeting Node.js 6
    Object.keys(input).forEach(function (key) {
        var val = input[key];
        var pushArg = makeArg;
        if (Array.isArray(opts.excludes) && match(opts.excludes, key)) {
            return;
        }
        if (Array.isArray(opts.includes) && !match(opts.includes, key)) {
            return;
        }
        if (typeof opts.aliases === 'object' && opts.aliases[key]) {
            key = opts.aliases[key];
            pushArg = makeAliasArg;
        }
        if (key === '_') {
            if (!Array.isArray(val)) {
                throw new TypeError("Expected key `_` to be Array, got " + typeof val);
            }
            extraArgs = val;
            return;
        }
        if (val === true) {
            pushArg(key, '');
        }
        if (val === false && !opts.ignoreFalse) {
            pushArg("no-" + key);
        }
        if (typeof val === 'string') {
            pushArg(key, val);
        }
        if (typeof val === 'number' && !Number.isNaN(val)) {
            pushArg(key, String(val));
        }
        if (Array.isArray(val)) {
            val.forEach(function (arrVal) {
                pushArg(key, arrVal);
            });
        }
    });
    for (var _i = 0, extraArgs_1 = extraArgs; _i < extraArgs_1.length; _i++) {
        var x = extraArgs_1[_i];
        args.push(String(x));
    }
    return args;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxkYXJnc1xcaW5kZXguanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcZGFyZ3NcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQU0sS0FBSyxHQUFHLFVBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLFlBQVksTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBN0MsQ0FBNkMsQ0FBQyxFQUE1RCxDQUE0RCxDQUFDO0FBRXpGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxLQUFLLEVBQUUsSUFBSTtJQUM1QixJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBRW5CLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3BCLFNBQVMsRUFBRSxJQUFJO0tBQ2YsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVULElBQU0sT0FBTyxHQUFHLFVBQUMsR0FBRyxFQUFFLEdBQUc7UUFDeEIsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFdEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENB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Q0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixHQUFHLENBQUMsT0FBTyxDQUFDLFVBQUEsTUFBTTtnQkFDakIsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxDQUFZLFVBQVMsRUFBVCx1QkFBUyxFQUFULHVCQUFTLEVBQVQsSUFBUztRQUFwQixJQUFNLENBQUMsa0JBQUE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JCO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWF0Y2ggPSAoYXJyLCB2YWwpID0+IGFyci5zb21lKHggPT4geCBpbnN0YW5jZW9mIFJlZ0V4cCA/IHgudGVzdCh2YWwpIDogeCA9PT0gdmFsKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaW5wdXQsIG9wdHMpID0+IHtcblx0Y29uc3QgYXJncyA9IFtdO1xuXHRsZXQgZXh0cmFBcmdzID0gW107XG5cblx0b3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdHVzZUVxdWFsczogdHJ1ZVxuXHR9LCBvcHRzKTtcblxuXHRjb25zdCBtYWtlQXJnID0gKGtleSwgdmFsKSA9PiB7XG5cdFx0a2V5ID0gJy0tJyArIChvcHRzLmFsbG93Q2FtZWxDYXNlID8ga2V5IDoga2V5LnJlcGxhY2UoL1tBLVpdL2csICctJCYnKS50b0xvd2VyQ2FzZSgpKTtcblxuXHRcdGlmIChvcHRzLnVzZUVxdWFscykge1xuXHRcdFx0YXJncy5wdXNoKGtleSArICh2YWwgPyBgPSR7dmFsfWAgOiAnJykpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhcmdzLnB1c2goa2V5KTtcblxuXHRcdFx0aWYgKHZhbCkge1xuXHRcdFx0XHRhcmdzLnB1c2godmFsKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Y29uc3QgbWFrZUFsaWFzQXJnID0gKGtleSwgdmFsKSA9PiB7XG5cdFx0YXJncy5wdXNoKGAtJHtrZXl9YCk7XG5cblx0XHRpZiAodmFsKSB7XG5cdFx0XHRhcmdzLnB1c2godmFsKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gVE9ETzogdXNlIGZvci1vZiBsb29wIGFuZCBPYmplY3QuZW50cmllcyB3aGVuIHRhcmdldGluZyBOb2RlLmpzIDZcblx0T2JqZWN0LmtleXMoaW5wdXQpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjb25zdCB2YWwgPSBpbnB1dFtrZXldO1xuXHRcdGxldCBwdXNoQXJnID0gbWFrZUFyZztcblxuXHRcdGlmIChBcnJheS5pc0FycmF5KG9wdHMuZXhjbHVkZXMpICYmIG1hdGNoKG9wdHMuZXhjbHVkZXMsIGtleSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShvcHRzLmluY2x1ZGVzKSAmJiAhbWF0Y2gob3B0cy5pbmNsdWRlcywga2V5KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2Ygb3B0cy5hbGlhc2VzID09PSAnb2JqZWN0JyAmJiBvcHRzLmFsaWFzZXNba2V5XSkge1xuXHRcdFx0a2V5ID0gb3B0cy5hbGlhc2VzW2tleV07XG5cdFx0XHRwdXNoQXJnID0gbWFrZUFsaWFzQXJnO1xuXHRcdH1cblxuXHRcdGlmIChrZXkgPT09ICdfJykge1xuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQga2V5IFxcYF9cXGAgdG8gYmUgQXJyYXksIGdvdCAke3R5cGVvZiB2YWx9YCk7XG5cdFx0XHR9XG5cblx0XHRcdGV4dHJhQXJncyA9IHZhbDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodmFsID09PSB0cnVlKSB7XG5cdFx0XHRwdXNoQXJnKGtleSwgJycpO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IGZhbHNlICYmICFvcHRzLmlnbm9yZUZhbHNlKSB7XG5cdFx0XHRwdXNoQXJnKGBuby0ke2tleX1gKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHB1c2hBcmcoa2V5LCB2YWwpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzTmFOKHZhbCkpIHtcblx0XHRcdHB1c2hBcmcoa2V5LCBTdHJpbmcodmFsKSk7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0dmFsLmZvckVhY2goYXJyVmFsID0+IHtcblx0XHRcdFx0cHVzaEFyZyhrZXksIGFyclZhbCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdGZvciAoY29uc3QgeCBvZiBleHRyYUFyZ3MpIHtcblx0XHRhcmdzLnB1c2goU3RyaW5nKHgpKTtcblx0fVxuXG5cdHJldHVybiBhcmdzO1xufTtcbiJdfQ==