/**
 * `confirm` type prompt
 */
var _ = require('lodash');
var util = require('util');
var chalk = require('chalk');
var Base = require('./base');
var observe = require('../utils/events');
/**
 * Module exports
 */
module.exports = Prompt;
/**
 * Constructor
 */
function Prompt() {
    Base.apply(this, arguments);
    var rawDefault = true;
    _.extend(this.opt, {
        filter: function (input) {
            var value = rawDefault;
            if (input != null && input !== '') {
                value = /^y(es)?/i.test(input);
            }
            return value;
        }
    });
    if (_.isBoolean(this.opt.default)) {
        rawDefault = this.opt.default;
    }
    this.opt.default = rawDefault ? 'Y/n' : 'y/N';
    return this;
}
util.inherits(Prompt, Base);
/**
 * Start the Inquiry session
 * @param  {Function} cb   Callback when prompt is done
 * @return {this}
 */
Prompt.prototype._run = function (cb) {
    this.done = cb;
    // Once user confirm (enter key)
    var events = observe(this.rl);
    events.keypress.takeUntil(events.line).forEach(this.onKeypress.bind(this));
    events.line.take(1).forEach(this.onEnd.bind(this));
    // Init
    this.render();
    return this;
};
/**
 * Render the prompt to screen
 * @return {Prompt} self
 */
Prompt.prototype.render = function (answer) {
    var message = this.getQuestion();
    if (typeof answer === 'boolean') {
        message += chalk.cyan(answer ? 'Yes' : 'No');
    }
    else {
        message += this.rl.line;
    }
    this.screen.render(message);
    return this;
};
/**
 * When user press `enter` key
 */
Prompt.prototype.onEnd = function (input) {
    this.status = 'answered';
    var output = this.opt.filter(input);
    this.render(output);
    this.screen.done();
    this.done(output);
};
/**
 * When user press a key
 */
Prompt.prototype.onKeypress = function () {
    this.render();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFxwcm9tcHRzXFxjb25maXJtLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGlucXVpcmVyXFxsaWJcXHByb21wdHNcXGNvbmZpcm0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFekM7O0dBRUc7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUV4Qjs7R0FFRztBQUVIO0lBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFNUIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBRXRCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNqQixNQUFNLEVBQUUsVUFBVSxLQUFLO1lBQ3JCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztZQUN2QixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNmLENBQUM7S0FDRixDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBVSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFOUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUU1Qjs7OztHQUlHO0FBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxFQUFFO0lBQ2xDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRWYsZ0NBQWdDO0lBQ2hDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRW5ELE9BQU87SUFDUCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFZCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBRUgsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxNQUFNO0lBQ3hDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVqQyxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sT0FBTyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU1QixNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEtBQUs7SUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFFekIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFFSCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRztJQUM1QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBgY29uZmlybWAgdHlwZSBwcm9tcHRcbiAqL1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbnZhciBvYnNlcnZlID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21wdDtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIFByb21wdCgpIHtcbiAgQmFzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIHZhciByYXdEZWZhdWx0ID0gdHJ1ZTtcblxuICBfLmV4dGVuZCh0aGlzLm9wdCwge1xuICAgIGZpbHRlcjogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSByYXdEZWZhdWx0O1xuICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaW5wdXQgIT09ICcnKSB7XG4gICAgICAgIHZhbHVlID0gL155KGVzKT8vaS50ZXN0KGlucHV0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChfLmlzQm9vbGVhbih0aGlzLm9wdC5kZWZhdWx0KSkge1xuICAgIHJhd0RlZmF1bHQgPSB0aGlzLm9wdC5kZWZhdWx0O1xuICB9XG5cbiAgdGhpcy5vcHQuZGVmYXVsdCA9IHJhd0RlZmF1bHQgPyAnWS9uJyA6ICd5L04nO1xuXG4gIHJldHVybiB0aGlzO1xufVxudXRpbC5pbmhlcml0cyhQcm9tcHQsIEJhc2UpO1xuXG4vKipcbiAqIFN0YXJ0IHRoZSBJbnF1aXJ5IHNlc3Npb25cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgIENhbGxiYWNrIHdoZW4gcHJvbXB0IGlzIGRvbmVcbiAqIEByZXR1cm4ge3RoaXN9XG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5fcnVuID0gZnVuY3Rpb24gKGNiKSB7XG4gIHRoaXMuZG9uZSA9IGNiO1xuXG4gIC8vIE9uY2UgdXNlciBjb25maXJtIChlbnRlciBrZXkpXG4gIHZhciBldmVudHMgPSBvYnNlcnZlKHRoaXMucmwpO1xuICBldmVudHMua2V5cHJlc3MudGFrZVVudGlsKGV2ZW50cy5saW5lKS5mb3JFYWNoKHRoaXMub25LZXlwcmVzcy5iaW5kKHRoaXMpKTtcblxuICBldmVudHMubGluZS50YWtlKDEpLmZvckVhY2godGhpcy5vbkVuZC5iaW5kKHRoaXMpKTtcblxuICAvLyBJbml0XG4gIHRoaXMucmVuZGVyKCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgcHJvbXB0IHRvIHNjcmVlblxuICogQHJldHVybiB7UHJvbXB0fSBzZWxmXG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoYW5zd2VyKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5nZXRRdWVzdGlvbigpO1xuXG4gIGlmICh0eXBlb2YgYW5zd2VyID09PSAnYm9vbGVhbicpIHtcbiAgICBtZXNzYWdlICs9IGNoYWxrLmN5YW4oYW5zd2VyID8gJ1llcycgOiAnTm8nKTtcbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlICs9IHRoaXMucmwubGluZTtcbiAgfVxuXG4gIHRoaXMuc2NyZWVuLnJlbmRlcihtZXNzYWdlKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV2hlbiB1c2VyIHByZXNzIGBlbnRlcmAga2V5XG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB0aGlzLnN0YXR1cyA9ICdhbnN3ZXJlZCc7XG5cbiAgdmFyIG91dHB1dCA9IHRoaXMub3B0LmZpbHRlcihpbnB1dCk7XG4gIHRoaXMucmVuZGVyKG91dHB1dCk7XG5cbiAgdGhpcy5zY3JlZW4uZG9uZSgpO1xuICB0aGlzLmRvbmUob3V0cHV0KTtcbn07XG5cbi8qKlxuICogV2hlbiB1c2VyIHByZXNzIGEga2V5XG4gKi9cblxuUHJvbXB0LnByb3RvdHlwZS5vbktleXByZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlbmRlcigpO1xufTtcbiJdfQ==