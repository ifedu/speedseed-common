'use strict';
var _ = require('lodash');
var inquirer = require('inquirer');
var diff = require('diff');
var chalk = require('chalk');
var logger = require('./util/log');
/**
 * `TerminalAdapter` is the default implementation of `Adapter`, an abstraction
 * layer that defines the I/O interactions.
 *
 * It provides a CLI interaction
 *
 * @constructor
 */
var TerminalAdapter = module.exports = function TerminalAdapter() {
    this.promptModule = inquirer.createPromptModule();
};
TerminalAdapter.prototype._colorDiffAdded = chalk.black.bgGreen;
TerminalAdapter.prototype._colorDiffRemoved = chalk.bgRed;
TerminalAdapter.prototype._colorLines = function colorLines(name, str) {
    return str.split('\n').map(function (line) {
        return this['_colorDiff' + name](line);
    }, this).join('\n');
};
/**
 * Prompt a user for one or more questions and pass
 * the answer(s) to the provided callback.
 *
 * It shares its interface with `Base.prompt`
 *
 * (Defined inside the constructor to keep interfaces separated between
 * instances)
 *
 * @param {Array} questions
 * @param {Function} callback
 */
TerminalAdapter.prototype.prompt = function () { };
/**
 * Shows a color-based diff of two strings
 *
 * @param {string} actual
 * @param {string} expected
 */
TerminalAdapter.prototype.diff = function _diff(actual, expected) {
    var msg = diff.diffLines(actual, expected).map(function (str) {
        if (str.added) {
            return this._colorLines('Added', str.value);
        }
        if (str.removed) {
            return this._colorLines('Removed', str.value);
        }
        return str.value;
    }, this).join('');
    // legend
    msg = '\n' +
        this._colorDiffRemoved('removed') +
        ' ' +
        this._colorDiffAdded('added') +
        '\n\n' +
        msg +
        '\n';
    console.log(msg);
    return msg;
};
/**
 * Logging utility
 * @type {env/log}
 */
TerminalAdapter.prototype.log = logger();
TerminalAdapter.prototype.prompt = function (questions, cb) {
    var promise = this.promptModule(questions);
    promise.then(cb || _.noop);
    return promise;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx5ZW9tYW4tZW52aXJvbm1lbnRcXGxpYlxcYWRhcHRlci5qcyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFx5ZW9tYW4tZW52aXJvbm1lbnRcXGxpYlxcYWRhcHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25DLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRW5DOzs7Ozs7O0dBT0c7QUFDSCxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBRUYsZUFBZSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDaEUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzFELGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLG9CQUFvQixJQUFJLEVBQUUsR0FBRztJQUNuRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxjQUFhLENBQUMsQ0FBQztBQUVsRDs7Ozs7R0FLRztBQUNILGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLGVBQWUsTUFBTSxFQUFFLFFBQVE7SUFDOUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRztRQUMxRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ25CLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEIsU0FBUztJQUNULEdBQUcsR0FBRyxJQUFJO1FBQ1IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztRQUNqQyxHQUFHO1FBQ0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDN0IsTUFBTTtRQUNOLEdBQUc7UUFDSCxJQUFJLENBQUM7SUFFUCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUV6QyxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLFNBQVMsRUFBRSxFQUFFO0lBQ3hELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIGlucXVpcmVyID0gcmVxdWlyZSgnaW5xdWlyZXInKTtcbnZhciBkaWZmID0gcmVxdWlyZSgnZGlmZicpO1xudmFyIGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKTtcbnZhciBsb2dnZXIgPSByZXF1aXJlKCcuL3V0aWwvbG9nJyk7XG5cbi8qKlxuICogYFRlcm1pbmFsQWRhcHRlcmAgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEFkYXB0ZXJgLCBhbiBhYnN0cmFjdGlvblxuICogbGF5ZXIgdGhhdCBkZWZpbmVzIHRoZSBJL08gaW50ZXJhY3Rpb25zLlxuICpcbiAqIEl0IHByb3ZpZGVzIGEgQ0xJIGludGVyYWN0aW9uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBUZXJtaW5hbEFkYXB0ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRlcm1pbmFsQWRhcHRlcigpIHtcbiAgdGhpcy5wcm9tcHRNb2R1bGUgPSBpbnF1aXJlci5jcmVhdGVQcm9tcHRNb2R1bGUoKTtcbn07XG5cblRlcm1pbmFsQWRhcHRlci5wcm90b3R5cGUuX2NvbG9yRGlmZkFkZGVkID0gY2hhbGsuYmxhY2suYmdHcmVlbjtcblRlcm1pbmFsQWRhcHRlci5wcm90b3R5cGUuX2NvbG9yRGlmZlJlbW92ZWQgPSBjaGFsay5iZ1JlZDtcblRlcm1pbmFsQWRhcHRlci5wcm90b3R5cGUuX2NvbG9yTGluZXMgPSBmdW5jdGlvbiBjb2xvckxpbmVzKG5hbWUsIHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICByZXR1cm4gdGhpc1snX2NvbG9yRGlmZicgKyBuYW1lXShsaW5lKTtcbiAgfSwgdGhpcykuam9pbignXFxuJyk7XG59O1xuXG4vKipcbiAqIFByb21wdCBhIHVzZXIgZm9yIG9uZSBvciBtb3JlIHF1ZXN0aW9ucyBhbmQgcGFzc1xuICogdGhlIGFuc3dlcihzKSB0byB0aGUgcHJvdmlkZWQgY2FsbGJhY2suXG4gKlxuICogSXQgc2hhcmVzIGl0cyBpbnRlcmZhY2Ugd2l0aCBgQmFzZS5wcm9tcHRgXG4gKlxuICogKERlZmluZWQgaW5zaWRlIHRoZSBjb25zdHJ1Y3RvciB0byBrZWVwIGludGVyZmFjZXMgc2VwYXJhdGVkIGJldHdlZW5cbiAqIGluc3RhbmNlcylcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBxdWVzdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cblRlcm1pbmFsQWRhcHRlci5wcm90b3R5cGUucHJvbXB0ID0gZnVuY3Rpb24gKCkge307XG5cbi8qKlxuICogU2hvd3MgYSBjb2xvci1iYXNlZCBkaWZmIG9mIHR3byBzdHJpbmdzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFjdHVhbFxuICogQHBhcmFtIHtzdHJpbmd9IGV4cGVjdGVkXG4gKi9cblRlcm1pbmFsQWRhcHRlci5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIF9kaWZmKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgdmFyIG1zZyA9IGRpZmYuZGlmZkxpbmVzKGFjdHVhbCwgZXhwZWN0ZWQpLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKHN0ci5hZGRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yTGluZXMoJ0FkZGVkJywgc3RyLnZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyLnJlbW92ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb2xvckxpbmVzKCdSZW1vdmVkJywgc3RyLnZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnZhbHVlO1xuICB9LCB0aGlzKS5qb2luKCcnKTtcblxuICAvLyBsZWdlbmRcbiAgbXNnID0gJ1xcbicgK1xuICAgIHRoaXMuX2NvbG9yRGlmZlJlbW92ZWQoJ3JlbW92ZWQnKSArXG4gICAgJyAnICtcbiAgICB0aGlzLl9jb2xvckRpZmZBZGRlZCgnYWRkZWQnKSArXG4gICAgJ1xcblxcbicgK1xuICAgIG1zZyArXG4gICAgJ1xcbic7XG5cbiAgY29uc29sZS5sb2cobXNnKTtcbiAgcmV0dXJuIG1zZztcbn07XG5cbi8qKlxuICogTG9nZ2luZyB1dGlsaXR5XG4gKiBAdHlwZSB7ZW52L2xvZ31cbiAqL1xuVGVybWluYWxBZGFwdGVyLnByb3RvdHlwZS5sb2cgPSBsb2dnZXIoKTtcblxuVGVybWluYWxBZGFwdGVyLnByb3RvdHlwZS5wcm9tcHQgPSBmdW5jdGlvbiAocXVlc3Rpb25zLCBjYikge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbXB0TW9kdWxlKHF1ZXN0aW9ucyk7XG4gIHByb21pc2UudGhlbihjYiB8fCBfLm5vb3ApO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG4iXX0=