'use strict';
var _ = require('lodash');
var MuteStream = require('mute-stream');
var readline = require('readline');
/**
 * Base interface class other can inherits from
 */
var UI = module.exports = function (opt) {
    // Instantiate the Readline interface
    // @Note: Don't reassign if already present (allow test to override the Stream)
    if (!this.rl) {
        this.rl = readline.createInterface(setupReadlineOptions(opt));
    }
    this.rl.resume();
    this.onForceClose = this.onForceClose.bind(this);
    // Make sure new prompt start on a newline when closing
    this.rl.on('SIGINT', this.onForceClose);
    process.on('exit', this.onForceClose);
};
/**
 * Handle the ^C exit
 * @return {null}
 */
UI.prototype.onForceClose = function () {
    this.close();
    console.log('\n'); // Line return
};
/**
 * Close the interface and cleanup listeners
 */
UI.prototype.close = function () {
    // Remove events listeners
    this.rl.removeListener('SIGINT', this.onForceClose);
    process.removeListener('exit', this.onForceClose);
    // Restore prompt functionnalities
    this.rl.output.unmute();
    // Close the readline
    this.rl.output.end();
    this.rl.pause();
    this.rl.close();
};
function setupReadlineOptions(opt) {
    opt = opt || {};
    // Default `input` to stdin
    var input = opt.input || process.stdin;
    // Add mute capabilities to the output
    var ms = new MuteStream();
    ms.pipe(opt.output || process.stdout);
    var output = ms;
    return _.extend({
        terminal: true,
        input: input,
        output: output
    }, _.omit(opt, ['input', 'output']));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxpbnF1aXJlclxcbGliXFx1aVxcYmFzZVVJLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGlucXVpcmVyXFxsaWJcXHVpXFxiYXNlVUkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFbkM7O0dBRUc7QUFFSCxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsR0FBRztJQUNyQyxxQ0FBcUM7SUFDckMsK0VBQStFO0lBQy9FLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpELHVEQUF1RDtJQUN2RCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFFSCxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRztJQUMxQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYztBQUNuQyxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUVILEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHO0lBQ25CLDBCQUEwQjtJQUMxQixJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVsRCxrQ0FBa0M7SUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFeEIscUJBQXFCO0lBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRiw4QkFBOEIsR0FBRztJQUMvQixHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUVoQiwyQkFBMkI7SUFDM0IsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDO0lBRXZDLHNDQUFzQztJQUN0QyxJQUFJLEVBQUUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ2QsUUFBUSxFQUFFLElBQUk7UUFDZCxLQUFLLEVBQUUsS0FBSztRQUNaLE1BQU0sRUFBRSxNQUFNO0tBQ2YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgTXV0ZVN0cmVhbSA9IHJlcXVpcmUoJ211dGUtc3RyZWFtJyk7XG52YXIgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpO1xuXG4vKipcbiAqIEJhc2UgaW50ZXJmYWNlIGNsYXNzIG90aGVyIGNhbiBpbmhlcml0cyBmcm9tXG4gKi9cblxudmFyIFVJID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0KSB7XG4gIC8vIEluc3RhbnRpYXRlIHRoZSBSZWFkbGluZSBpbnRlcmZhY2VcbiAgLy8gQE5vdGU6IERvbid0IHJlYXNzaWduIGlmIGFscmVhZHkgcHJlc2VudCAoYWxsb3cgdGVzdCB0byBvdmVycmlkZSB0aGUgU3RyZWFtKVxuICBpZiAoIXRoaXMucmwpIHtcbiAgICB0aGlzLnJsID0gcmVhZGxpbmUuY3JlYXRlSW50ZXJmYWNlKHNldHVwUmVhZGxpbmVPcHRpb25zKG9wdCkpO1xuICB9XG4gIHRoaXMucmwucmVzdW1lKCk7XG5cbiAgdGhpcy5vbkZvcmNlQ2xvc2UgPSB0aGlzLm9uRm9yY2VDbG9zZS5iaW5kKHRoaXMpO1xuXG4gIC8vIE1ha2Ugc3VyZSBuZXcgcHJvbXB0IHN0YXJ0IG9uIGEgbmV3bGluZSB3aGVuIGNsb3NpbmdcbiAgdGhpcy5ybC5vbignU0lHSU5UJywgdGhpcy5vbkZvcmNlQ2xvc2UpO1xuICBwcm9jZXNzLm9uKCdleGl0JywgdGhpcy5vbkZvcmNlQ2xvc2UpO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgdGhlIF5DIGV4aXRcbiAqIEByZXR1cm4ge251bGx9XG4gKi9cblxuVUkucHJvdG90eXBlLm9uRm9yY2VDbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbG9zZSgpO1xuICBjb25zb2xlLmxvZygnXFxuJyk7IC8vIExpbmUgcmV0dXJuXG59O1xuXG4vKipcbiAqIENsb3NlIHRoZSBpbnRlcmZhY2UgYW5kIGNsZWFudXAgbGlzdGVuZXJzXG4gKi9cblxuVUkucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAvLyBSZW1vdmUgZXZlbnRzIGxpc3RlbmVyc1xuICB0aGlzLnJsLnJlbW92ZUxpc3RlbmVyKCdTSUdJTlQnLCB0aGlzLm9uRm9yY2VDbG9zZSk7XG4gIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ2V4aXQnLCB0aGlzLm9uRm9yY2VDbG9zZSk7XG5cbiAgLy8gUmVzdG9yZSBwcm9tcHQgZnVuY3Rpb25uYWxpdGllc1xuICB0aGlzLnJsLm91dHB1dC51bm11dGUoKTtcblxuICAvLyBDbG9zZSB0aGUgcmVhZGxpbmVcbiAgdGhpcy5ybC5vdXRwdXQuZW5kKCk7XG4gIHRoaXMucmwucGF1c2UoKTtcbiAgdGhpcy5ybC5jbG9zZSgpO1xufTtcblxuZnVuY3Rpb24gc2V0dXBSZWFkbGluZU9wdGlvbnMob3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcblxuICAvLyBEZWZhdWx0IGBpbnB1dGAgdG8gc3RkaW5cbiAgdmFyIGlucHV0ID0gb3B0LmlucHV0IHx8IHByb2Nlc3Muc3RkaW47XG5cbiAgLy8gQWRkIG11dGUgY2FwYWJpbGl0aWVzIHRvIHRoZSBvdXRwdXRcbiAgdmFyIG1zID0gbmV3IE11dGVTdHJlYW0oKTtcbiAgbXMucGlwZShvcHQub3V0cHV0IHx8IHByb2Nlc3Muc3Rkb3V0KTtcbiAgdmFyIG91dHB1dCA9IG1zO1xuXG4gIHJldHVybiBfLmV4dGVuZCh7XG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgaW5wdXQ6IGlucHV0LFxuICAgIG91dHB1dDogb3V0cHV0XG4gIH0sIF8ub21pdChvcHQsIFsnaW5wdXQnLCAnb3V0cHV0J10pKTtcbn1cbiJdfQ==