'use strict';
var got = require('got');
var isPlainObj = require('is-plain-obj');
function ghGot(path, opts) {
    if (typeof path !== 'string') {
        return Promise.reject(new TypeError("Expected 'path' to be a string, got " + typeof path));
    }
    var env = process.env;
    opts = Object.assign({
        json: true,
        token: env.GITHUB_TOKEN,
        endpoint: env.GITHUB_ENDPOINT ? env.GITHUB_ENDPOINT.replace(/[^/]$/, '$&/') : 'https://api.github.com/'
    }, opts);
    opts.headers = Object.assign({
        'accept': 'application/vnd.github.v3+json',
        'user-agent': 'https://github.com/sindresorhus/gh-got'
    }, opts.headers);
    if (opts.token) {
        opts.headers.authorization = "token " + opts.token;
    }
    // https://developer.github.com/v3/#http-verbs
    if (opts.method && opts.method.toLowerCase() === 'put' && !opts.body) {
        opts.headers['content-length'] = 0;
    }
    // TODO: remove this when Got eventually supports it
    // https://github.com/sindresorhus/got/issues/174
    if (isPlainObj(opts.body)) {
        opts.headers['content-type'] = 'application/json';
        opts.body = JSON.stringify(opts.body);
    }
    var url = /^https?/.test(path) ? path : opts.endpoint + path;
    if (opts.stream) {
        return got.stream(url, opts);
    }
    return got(url, opts);
}
var helpers = [
    'get',
    'post',
    'put',
    'patch',
    'head',
    'delete'
];
ghGot.stream = function (url, opts) { return ghGot(url, Object.assign({}, opts, {
    json: false,
    stream: true
})); };
var _loop_1 = function (x) {
    var method = x.toUpperCase();
    ghGot[x] = function (url, opts) { return ghGot(url, Object.assign({}, opts, { method: method })); };
    ghGot.stream[x] = function (url, opts) { return ghGot.stream(url, Object.assign({}, opts, { method: method })); };
};
for (var _i = 0, helpers_1 = helpers; _i < helpers_1.length; _i++) {
    var x = helpers_1[_i];
    _loop_1(x);
}
module.exports = ghGot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxnaC1nb3RcXGluZGV4LmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGlmZWR1XFxBcHBEYXRhXFxSb2FtaW5nXFxudm1cXHY4LjQuMFxcbm9kZV9tb2R1bGVzXFxnZW5lcmF0b3Itc3BlZWRzZWVkXFxub2RlX21vZHVsZXNcXGdoLWdvdFxcaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUzQyxlQUFlLElBQUksRUFBRSxJQUFJO0lBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMseUNBQXVDLE9BQU8sSUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUV4QixJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNwQixJQUFJLEVBQUUsSUFBSTtRQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsWUFBWTtRQUN2QixRQUFRLEVBQUUsR0FBRyxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcseUJBQXlCO0tBQ3ZHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFVCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDNUIsUUFBUSxFQUFFLGdDQUFnQztRQUMxQyxZQUFZLEVBQUUsd0NBQXdDO0tBQ3RELEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRWpCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLFdBQVMsSUFBSSxDQUFDLEtBQU8sQ0FBQztJQUNwRCxDQUFDO0lBRUQsOENBQThDO0lBQzlDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxvREFBb0Q7SUFDcEQsaURBQWlEO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDbEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFFL0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBRUQsSUFBTSxPQUFPLEdBQUc7SUFDZixLQUFLO0lBQ0wsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7Q0FDUixDQUFDO0FBRUYsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFDLEdBQUcsRUFBRSxJQUFJLElBQUssT0FBQSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRTtJQUNoRSxJQUFJLEVBQUUsS0FBSztJQUNYLE1BQU0sRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDLEVBSDJCLENBRzNCLENBQUM7d0JBRU8sQ0FBQztJQUNYLElBQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFLLE9BQUEsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsRUFBN0MsQ0FBNkMsQ0FBQztJQUN4RSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQUMsR0FBRyxFQUFFLElBQUksSUFBSyxPQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQyxFQUFwRCxDQUFvRCxDQUFDO0FBQ3ZGLENBQUM7QUFKRCxHQUFHLENBQUMsQ0FBWSxVQUFPLEVBQVAsbUJBQU8sRUFBUCxxQkFBTyxFQUFQLElBQU87SUFBbEIsSUFBTSxDQUFDLGdCQUFBO1lBQUQsQ0FBQztDQUlYO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBnb3QgPSByZXF1aXJlKCdnb3QnKTtcbmNvbnN0IGlzUGxhaW5PYmogPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKTtcblxuZnVuY3Rpb24gZ2hHb3QocGF0aCwgb3B0cykge1xuXHRpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkICdwYXRoJyB0byBiZSBhIHN0cmluZywgZ290ICR7dHlwZW9mIHBhdGh9YCkpO1xuXHR9XG5cblx0Y29uc3QgZW52ID0gcHJvY2Vzcy5lbnY7XG5cblx0b3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGpzb246IHRydWUsXG5cdFx0dG9rZW46IGVudi5HSVRIVUJfVE9LRU4sXG5cdFx0ZW5kcG9pbnQ6IGVudi5HSVRIVUJfRU5EUE9JTlQgPyBlbnYuR0lUSFVCX0VORFBPSU5ULnJlcGxhY2UoL1teL10kLywgJyQmLycpIDogJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vJ1xuXHR9LCBvcHRzKTtcblxuXHRvcHRzLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHQnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMranNvbicsXG5cdFx0J3VzZXItYWdlbnQnOiAnaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9naC1nb3QnXG5cdH0sIG9wdHMuaGVhZGVycyk7XG5cblx0aWYgKG9wdHMudG9rZW4pIHtcblx0XHRvcHRzLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IGB0b2tlbiAke29wdHMudG9rZW59YDtcblx0fVxuXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvI2h0dHAtdmVyYnNcblx0aWYgKG9wdHMubWV0aG9kICYmIG9wdHMubWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09ICdwdXQnICYmICFvcHRzLmJvZHkpIHtcblx0XHRvcHRzLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gPSAwO1xuXHR9XG5cblx0Ly8gVE9ETzogcmVtb3ZlIHRoaXMgd2hlbiBHb3QgZXZlbnR1YWxseSBzdXBwb3J0cyBpdFxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2dvdC9pc3N1ZXMvMTc0XG5cdGlmIChpc1BsYWluT2JqKG9wdHMuYm9keSkpIHtcblx0XHRvcHRzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXHRcdG9wdHMuYm9keSA9IEpTT04uc3RyaW5naWZ5KG9wdHMuYm9keSk7XG5cdH1cblxuXHRjb25zdCB1cmwgPSAvXmh0dHBzPy8udGVzdChwYXRoKSA/IHBhdGggOiBvcHRzLmVuZHBvaW50ICsgcGF0aDtcblxuXHRpZiAob3B0cy5zdHJlYW0pIHtcblx0XHRyZXR1cm4gZ290LnN0cmVhbSh1cmwsIG9wdHMpO1xuXHR9XG5cblx0cmV0dXJuIGdvdCh1cmwsIG9wdHMpO1xufVxuXG5jb25zdCBoZWxwZXJzID0gW1xuXHQnZ2V0Jyxcblx0J3Bvc3QnLFxuXHQncHV0Jyxcblx0J3BhdGNoJyxcblx0J2hlYWQnLFxuXHQnZGVsZXRlJ1xuXTtcblxuZ2hHb3Quc3RyZWFtID0gKHVybCwgb3B0cykgPT4gZ2hHb3QodXJsLCBPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG5cdGpzb246IGZhbHNlLFxuXHRzdHJlYW06IHRydWVcbn0pKTtcblxuZm9yIChjb25zdCB4IG9mIGhlbHBlcnMpIHtcblx0Y29uc3QgbWV0aG9kID0geC50b1VwcGVyQ2FzZSgpO1xuXHRnaEdvdFt4XSA9ICh1cmwsIG9wdHMpID0+IGdoR290KHVybCwgT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge21ldGhvZH0pKTtcblx0Z2hHb3Quc3RyZWFtW3hdID0gKHVybCwgb3B0cykgPT4gZ2hHb3Quc3RyZWFtKHVybCwgT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge21ldGhvZH0pKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnaEdvdDtcbiJdfQ==