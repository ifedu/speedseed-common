/*istanbul ignore start*/ 'use strict';
exports.__esModule = true;
exports.canonicalize = exports.convertChangesToXML = exports.convertChangesToDMP = exports.parsePatch = exports.applyPatches = exports.applyPatch = exports.createPatch = exports.createTwoFilesPatch = exports.structuredPatch = exports.diffJson = exports.diffCss = exports.diffSentences = exports.diffTrimmedLines = exports.diffLines = exports.diffWordsWithSpace = exports.diffWords = exports.diffChars = exports.Diff = undefined;
/*istanbul ignore end*/
var /*istanbul ignore start*/ _base = require('./diff/base') /*istanbul ignore end*/;
/*istanbul ignore start*/
var _base2 = _interopRequireDefault(_base);
/*istanbul ignore end*/
var /*istanbul ignore start*/ _character = require('./diff/character') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _word = require('./diff/word') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _line = require('./diff/line') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _sentence = require('./diff/sentence') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _css = require('./diff/css') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _json = require('./diff/json') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _apply = require('./patch/apply') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _parse = require('./patch/parse') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _create = require('./patch/create') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _dmp = require('./convert/dmp') /*istanbul ignore end*/;
var /*istanbul ignore start*/ _xml = require('./convert/xml') /*istanbul ignore end*/;
/*istanbul ignore start*/
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* See LICENSE file for terms of use */
/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
exports.Diff = _base2.default;
/*istanbul ignore start*/ exports.diffChars = _character.diffChars;
/*istanbul ignore start*/ exports.diffWords = _word.diffWords;
/*istanbul ignore start*/ exports.diffWordsWithSpace = _word.diffWordsWithSpace;
/*istanbul ignore start*/ exports.diffLines = _line.diffLines;
/*istanbul ignore start*/ exports.diffTrimmedLines = _line.diffTrimmedLines;
/*istanbul ignore start*/ exports.diffSentences = _sentence.diffSentences;
/*istanbul ignore start*/ exports.diffCss = _css.diffCss;
/*istanbul ignore start*/ exports.diffJson = _json.diffJson;
/*istanbul ignore start*/ exports.structuredPatch = _create.structuredPatch;
/*istanbul ignore start*/ exports.createTwoFilesPatch = _create.createTwoFilesPatch;
/*istanbul ignore start*/ exports.createPatch = _create.createPatch;
/*istanbul ignore start*/ exports.applyPatch = _apply.applyPatch;
/*istanbul ignore start*/ exports.applyPatches = _apply.applyPatches;
/*istanbul ignore start*/ exports.parsePatch = _parse.parsePatch;
/*istanbul ignore start*/ exports.convertChangesToDMP = _dmp.convertChangesToDMP;
/*istanbul ignore start*/ exports.convertChangesToXML = _xml.convertChangesToXML;
/*istanbul ignore start*/ exports.canonicalize = _json.canonicalize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,