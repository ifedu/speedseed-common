'use strict';
var EventEmitter = require('events');
var http = require('http');
var https = require('https');
var PassThrough = require('stream').PassThrough;
var urlLib = require('url');
var querystring = require('querystring');
var duplexer3 = require('duplexer3');
var isStream = require('is-stream');
var getStream = require('get-stream');
var timedOut = require('timed-out');
var urlParseLax = require('url-parse-lax');
var lowercaseKeys = require('lowercase-keys');
var isRedirect = require('is-redirect');
var unzipResponse = require('unzip-response');
var createErrorClass = require('create-error-class');
var isRetryAllowed = require('is-retry-allowed');
var Buffer = require('safe-buffer').Buffer;
var pkg = require('./package');
function requestAsEventEmitter(opts) {
    opts = opts || {};
    var ee = new EventEmitter();
    var requestUrl = opts.href || urlLib.resolve(urlLib.format(opts), opts.path);
    var redirectCount = 0;
    var retryCount = 0;
    var redirectUrl;
    var get = function (opts) {
        var fn = opts.protocol === 'https:' ? https : http;
        var req = fn.request(opts, function (res) {
            var statusCode = res.statusCode;
            if (isRedirect(statusCode) && opts.followRedirect && 'location' in res.headers && (opts.method === 'GET' || opts.method === 'HEAD')) {
                res.resume();
                if (++redirectCount > 10) {
                    ee.emit('error', new got.MaxRedirectsError(statusCode, opts), null, res);
                    return;
                }
                var bufferString = Buffer.from(res.headers.location, 'binary').toString();
                redirectUrl = urlLib.resolve(urlLib.format(opts), bufferString);
                var redirectOpts = Object.assign({}, opts, urlLib.parse(redirectUrl));
                ee.emit('redirect', res, redirectOpts);
                get(redirectOpts);
                return;
            }
            setImmediate(function () {
                var response = typeof unzipResponse === 'function' && req.method !== 'HEAD' ? unzipResponse(res) : res;
                response.url = redirectUrl || requestUrl;
                response.requestUrl = requestUrl;
                ee.emit('response', response);
            });
        });
        req.once('error', function (err) {
            var backoff = opts.retries(++retryCount, err);
            if (backoff) {
                setTimeout(get, backoff, opts);
                return;
            }
            ee.emit('error', new got.RequestError(err, opts));
        });
        if (opts.gotTimeout) {
            timedOut(req, opts.gotTimeout);
        }
        setImmediate(function () {
            ee.emit('request', req);
        });
    };
    get(opts);
    return ee;
}
function asPromise(opts) {
    return new Promise(function (resolve, reject) {
        var ee = requestAsEventEmitter(opts);
        ee.on('request', function (req) {
            if (isStream(opts.body)) {
                opts.body.pipe(req);
                opts.body = undefined;
                return;
            }
            req.end(opts.body);
        });
        ee.on('response', function (res) {
            var stream = opts.encoding === null ? getStream.buffer(res) : getStream(res, opts);
            stream
                .catch(function (err) { return reject(new got.ReadError(err, opts)); })
                .then(function (data) {
                var statusCode = res.statusCode;
                var limitStatusCode = opts.followRedirect ? 299 : 399;
                res.body = data;
                if (opts.json && res.body) {
                    try {
                        res.body = JSON.parse(res.body);
                    }
                    catch (e) {
                        throw new got.ParseError(e, statusCode, opts, data);
                    }
                }
                if (statusCode < 200 || statusCode > limitStatusCode) {
                    throw new got.HTTPError(statusCode, opts);
                }
                resolve(res);
            })
                .catch(function (err) {
                Object.defineProperty(err, 'response', { value: res });
                reject(err);
            });
        });
        ee.on('error', reject);
    });
}
function asStream(opts) {
    var input = new PassThrough();
    var output = new PassThrough();
    var proxy = duplexer3(input, output);
    if (opts.json) {
        throw new Error('got can not be used as stream when options.json is used');
    }
    if (opts.body) {
        proxy.write = function () {
            throw new Error('got\'s stream is not writable when options.body is used');
        };
    }
    var ee = requestAsEventEmitter(opts);
    ee.on('request', function (req) {
        proxy.emit('request', req);
        if (isStream(opts.body)) {
            opts.body.pipe(req);
            return;
        }
        if (opts.body) {
            req.end(opts.body);
            return;
        }
        if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
            input.pipe(req);
            return;
        }
        req.end();
    });
    ee.on('response', function (res) {
        var statusCode = res.statusCode;
        res.pipe(output);
        if (statusCode < 200 || statusCode > 299) {
            proxy.emit('error', new got.HTTPError(statusCode, opts), null, res);
            return;
        }
        proxy.emit('response', res);
    });
    ee.on('redirect', proxy.emit.bind(proxy, 'redirect'));
    ee.on('error', proxy.emit.bind(proxy, 'error'));
    return proxy;
}
function normalizeArguments(url, opts) {
    if (typeof url !== 'string' && typeof url !== 'object') {
        throw new Error("Parameter `url` must be a string or object, not " + typeof url);
    }
    if (typeof url === 'string') {
        url = url.replace(/^unix:/, 'http://$&');
        url = urlParseLax(url);
        if (url.auth) {
            throw new Error('Basic authentication must be done with auth option');
        }
    }
    opts = Object.assign({
        protocol: 'http:',
        path: '',
        retries: 5
    }, url, opts);
    opts.headers = Object.assign({
        'user-agent': pkg.name + "/" + pkg.version + " (https://github.com/sindresorhus/got)",
        'accept-encoding': 'gzip,deflate'
    }, lowercaseKeys(opts.headers));
    var query = opts.query;
    if (query) {
        if (typeof query !== 'string') {
            opts.query = querystring.stringify(query);
        }
        opts.path = opts.path.split('?')[0] + "?" + opts.query;
        delete opts.query;
    }
    if (opts.json && opts.headers.accept === undefined) {
        opts.headers.accept = 'application/json';
    }
    var body = opts.body;
    if (body) {
        if (typeof body !== 'string' && !(body !== null && typeof body === 'object')) {
            throw new Error('options.body must be a ReadableStream, string, Buffer or plain Object');
        }
        opts.method = opts.method || 'POST';
        if (isStream(body) && typeof body.getBoundary === 'function') {
            // Special case for https://github.com/form-data/form-data
            opts.headers['content-type'] = opts.headers['content-type'] || "multipart/form-data; boundary=" + body.getBoundary();
        }
        else if (body !== null && typeof body === 'object' && !Buffer.isBuffer(body) && !isStream(body)) {
            opts.headers['content-type'] = opts.headers['content-type'] || 'application/x-www-form-urlencoded';
            body = opts.body = querystring.stringify(body);
        }
        if (opts.headers['content-length'] === undefined && opts.headers['transfer-encoding'] === undefined && !isStream(body)) {
            var length = typeof body === 'string' ? Buffer.byteLength(body) : body.length;
            opts.headers['content-length'] = length;
        }
    }
    opts.method = (opts.method || 'GET').toUpperCase();
    if (opts.hostname === 'unix') {
        var matches = /(.+):(.+)/.exec(opts.path);
        if (matches) {
            opts.socketPath = matches[1];
            opts.path = matches[2];
            opts.host = null;
        }
    }
    if (typeof opts.retries !== 'function') {
        var retries_1 = opts.retries;
        opts.retries = function (iter, err) {
            if (iter > retries_1 || !isRetryAllowed(err)) {
                return 0;
            }
            var noise = Math.random() * 100;
            return ((1 << iter) * 1000) + noise;
        };
    }
    if (opts.followRedirect === undefined) {
        opts.followRedirect = true;
    }
    if (opts.timeout) {
        opts.gotTimeout = opts.timeout;
        delete opts.timeout;
    }
    return opts;
}
function got(url, opts) {
    try {
        return asPromise(normalizeArguments(url, opts));
    }
    catch (err) {
        return Promise.reject(err);
    }
}
var helpers = [
    'get',
    'post',
    'put',
    'patch',
    'head',
    'delete'
];
helpers.forEach(function (el) {
    got[el] = function (url, opts) { return got(url, Object.assign({}, opts, { method: el })); };
});
got.stream = function (url, opts) { return asStream(normalizeArguments(url, opts)); };
var _loop_1 = function (el) {
    got.stream[el] = function (url, opts) { return got.stream(url, Object.assign({}, opts, { method: el })); };
};
for (var _i = 0, helpers_1 = helpers; _i < helpers_1.length; _i++) {
    var el = helpers_1[_i];
    _loop_1(el);
}
function stdError(error, opts) {
    if (error.code !== undefined) {
        this.code = error.code;
    }
    Object.assign(this, {
        message: error.message,
        host: opts.host,
        hostname: opts.hostname,
        method: opts.method,
        path: opts.path
    });
}
got.RequestError = createErrorClass('RequestError', stdError);
got.ReadError = createErrorClass('ReadError', stdError);
got.ParseError = createErrorClass('ParseError', function (e, statusCode, opts, data) {
    stdError.call(this, e, opts);
    this.statusCode = statusCode;
    this.statusMessage = http.STATUS_CODES[this.statusCode];
    this.message = e.message + " in \"" + urlLib.format(opts) + "\": \n" + data.slice(0, 77) + "...";
});
got.HTTPError = createErrorClass('HTTPError', function (statusCode, opts) {
    stdError.call(this, {}, opts);
    this.statusCode = statusCode;
    this.statusMessage = http.STATUS_CODES[this.statusCode];
    this.message = "Response code " + this.statusCode + " (" + this.statusMessage + ")";
});
got.MaxRedirectsError = createErrorClass('MaxRedirectsError', function (statusCode, opts) {
    stdError.call(this, {}, opts);
    this.statusCode = statusCode;
    this.statusMessage = http.STATUS_CODES[this.statusCode];
    this.message = 'Redirected 10 times. Aborting.';
});
module.exports = got;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,