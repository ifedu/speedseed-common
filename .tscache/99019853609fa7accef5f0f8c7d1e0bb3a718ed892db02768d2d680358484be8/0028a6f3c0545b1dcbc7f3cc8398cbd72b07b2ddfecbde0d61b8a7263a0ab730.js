var common = require('./common');
var fs = require('fs');
common.register('sort', _sort, {
    canReceivePipe: true,
    cmdOptions: {
        'r': 'reverse',
        'n': 'numerical',
    },
});
// parse out the number prefix of a line
function parseNumber(str) {
    var match = str.match(/^\s*(\d*)\s*(.*)$/);
    return { num: Number(match[1]), value: match[2] };
}
// compare two strings case-insensitively, but examine case for strings that are
// case-insensitive equivalent
function unixCmp(a, b) {
    var aLower = a.toLowerCase();
    var bLower = b.toLowerCase();
    return (aLower === bLower ?
        -1 * a.localeCompare(b) :
        aLower.localeCompare(bLower));
}
// compare two strings in the fashion that unix sort's -n option works
function numericalCmp(a, b) {
    var objA = parseNumber(a);
    var objB = parseNumber(b);
    if (objA.hasOwnProperty('num') && objB.hasOwnProperty('num')) {
        return ((objA.num !== objB.num) ?
            (objA.num - objB.num) :
            unixCmp(objA.value, objB.value));
    }
    else {
        return unixCmp(objA.value, objB.value);
    }
}
//@
//@ ### sort([options,] file [, file ...])
//@ ### sort([options,] file_array)
//@ Available options:
//@
//@ + `-r`: Reverse the result of comparisons
//@ + `-n`: Compare according to numerical value
//@
//@ Examples:
//@
//@ ```javascript
//@ sort('foo.txt', 'bar.txt');
//@ sort('-r', 'foo.txt');
//@ ```
//@
//@ Return the contents of the files, sorted line-by-line. Sorting multiple
//@ files mixes their content, just like unix sort does.
function _sort(options, files) {
    // Check if this is coming from a pipe
    var pipe = common.readFromPipe();
    if (!files && !pipe)
        common.error('no files given');
    files = [].slice.call(arguments, 1);
    if (pipe) {
        files.unshift('-');
    }
    var lines = [];
    files.forEach(function (file) {
        if (file !== '-') {
            if (!fs.existsSync(file)) {
                common.error('no such file or directory: ' + file, { continue: true });
                return;
            }
            else if (fs.statSync(file).isDirectory()) {
                common.error('read failed: ' + file + ': Is a directory', {
                    continue: true,
                });
                return;
            }
        }
        var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');
        lines = lines.concat(contents.trimRight().split(/\r*\n/));
    });
    var sorted;
    sorted = lines.sort(options.numerical ? numericalCmp : unixCmp);
    if (options.reverse) {
        sorted = sorted.reverse();
    }
    return sorted.join('\n') + '\n';
}
module.exports = _sort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxpZmVkdVxcQXBwRGF0YVxcUm9hbWluZ1xcbnZtXFx2OC40LjBcXG5vZGVfbW9kdWxlc1xcZ2VuZXJhdG9yLXNwZWVkc2VlZFxcbm9kZV9tb2R1bGVzXFxzaGVsbGpzXFxzcmNcXHNvcnQuanMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcaWZlZHVcXEFwcERhdGFcXFJvYW1pbmdcXG52bVxcdjguNC4wXFxub2RlX21vZHVsZXNcXGdlbmVyYXRvci1zcGVlZHNlZWRcXG5vZGVfbW9kdWxlc1xcc2hlbGxqc1xcc3JjXFxzb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqQyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQzdCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLFVBQVUsRUFBRTtRQUNWLEdBQUcsRUFBRSxTQUFTO1FBQ2QsR0FBRyxFQUFFLFdBQVc7S0FDakI7Q0FDRixDQUFDLENBQUM7QUFFSCx3Q0FBd0M7QUFDeEMscUJBQXFCLEdBQUc7SUFDdEIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BELENBQUM7QUFFRCxnRkFBZ0Y7QUFDaEYsOEJBQThCO0FBQzlCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztJQUNuQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLE1BQU0s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QyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxNQUFNLENBQUM7SUFDWCxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQztJQUVoRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNwQixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ3NvcnQnLCBfc29ydCwge1xuICBjYW5SZWNlaXZlUGlwZTogdHJ1ZSxcbiAgY21kT3B0aW9uczoge1xuICAgICdyJzogJ3JldmVyc2UnLFxuICAgICduJzogJ251bWVyaWNhbCcsXG4gIH0sXG59KTtcblxuLy8gcGFyc2Ugb3V0IHRoZSBudW1iZXIgcHJlZml4IG9mIGEgbGluZVxuZnVuY3Rpb24gcGFyc2VOdW1iZXIoc3RyKSB7XG4gIHZhciBtYXRjaCA9IHN0ci5tYXRjaCgvXlxccyooXFxkKilcXHMqKC4qKSQvKTtcbiAgcmV0dXJuIHsgbnVtOiBOdW1iZXIobWF0Y2hbMV0pLCB2YWx1ZTogbWF0Y2hbMl0gfTtcbn1cblxuLy8gY29tcGFyZSB0d28gc3RyaW5ncyBjYXNlLWluc2Vuc2l0aXZlbHksIGJ1dCBleGFtaW5lIGNhc2UgZm9yIHN0cmluZ3MgdGhhdCBhcmVcbi8vIGNhc2UtaW5zZW5zaXRpdmUgZXF1aXZhbGVudFxuZnVuY3Rpb24gdW5peENtcChhLCBiKSB7XG4gIHZhciBhTG93ZXIgPSBhLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBiTG93ZXIgPSBiLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAoYUxvd2VyID09PSBiTG93ZXIgP1xuICAgICAgLTEgKiBhLmxvY2FsZUNvbXBhcmUoYikgOiAvLyB1bml4IHNvcnQgdHJlYXRzIGNhc2Ugb3Bwb3NpdGUgaG93IGphdmFzY3JpcHQgZG9lc1xuICAgICAgYUxvd2VyLmxvY2FsZUNvbXBhcmUoYkxvd2VyKSk7XG59XG5cbi8vIGNvbXBhcmUgdHdvIHN0cmluZ3MgaW4gdGhlIGZhc2hpb24gdGhhdCB1bml4IHNvcnQncyAtbiBvcHRpb24gd29ya3NcbmZ1bmN0aW9uIG51bWVyaWNhbENtcChhLCBiKSB7XG4gIHZhciBvYmpBID0gcGFyc2VOdW1iZXIoYSk7XG4gIHZhciBvYmpCID0gcGFyc2VOdW1iZXIoYik7XG4gIGlmIChvYmpBLmhhc093blByb3BlcnR5KCdudW0nKSAmJiBvYmpCLmhhc093blByb3BlcnR5KCdudW0nKSkge1xuICAgIHJldHVybiAoKG9iakEubnVtICE9PSBvYmpCLm51bSkgP1xuICAgICAgICAob2JqQS5udW0gLSBvYmpCLm51bSkgOlxuICAgICAgICB1bml4Q21wKG9iakEudmFsdWUsIG9iakIudmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5peENtcChvYmpBLnZhbHVlLCBvYmpCLnZhbHVlKTtcbiAgfVxufVxuXG4vL0Bcbi8vQCAjIyMgc29ydChbb3B0aW9ucyxdIGZpbGUgWywgZmlsZSAuLi5dKVxuLy9AICMjIyBzb3J0KFtvcHRpb25zLF0gZmlsZV9hcnJheSlcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1yYDogUmV2ZXJzZSB0aGUgcmVzdWx0IG9mIGNvbXBhcmlzb25zXG4vL0AgKyBgLW5gOiBDb21wYXJlIGFjY29yZGluZyB0byBudW1lcmljYWwgdmFsdWVcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIHNvcnQoJ2Zvby50eHQnLCAnYmFyLnR4dCcpO1xuLy9AIHNvcnQoJy1yJywgJ2Zvby50eHQnKTtcbi8vQCBgYGBcbi8vQFxuLy9AIFJldHVybiB0aGUgY29udGVudHMgb2YgdGhlIGZpbGVzLCBzb3J0ZWQgbGluZS1ieS1saW5lLiBTb3J0aW5nIG11bHRpcGxlXG4vL0AgZmlsZXMgbWl4ZXMgdGhlaXIgY29udGVudCwganVzdCBsaWtlIHVuaXggc29ydCBkb2VzLlxuZnVuY3Rpb24gX3NvcnQob3B0aW9ucywgZmlsZXMpIHtcbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBjb21pbmcgZnJvbSBhIHBpcGVcbiAgdmFyIHBpcGUgPSBjb21tb24ucmVhZEZyb21QaXBlKCk7XG5cbiAgaWYgKCFmaWxlcyAmJiAhcGlwZSkgY29tbW9uLmVycm9yKCdubyBmaWxlcyBnaXZlbicpO1xuXG4gIGZpbGVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gIGlmIChwaXBlKSB7XG4gICAgZmlsZXMudW5zaGlmdCgnLScpO1xuICB9XG5cbiAgdmFyIGxpbmVzID0gW107XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICBpZiAoZmlsZSAhPT0gJy0nKSB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZSkpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgZmlsZSwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChmcy5zdGF0U3luYyhmaWxlKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIGNvbW1vbi5lcnJvcigncmVhZCBmYWlsZWQ6ICcgKyBmaWxlICsgJzogSXMgYSBkaXJlY3RvcnknLCB7XG4gICAgICAgICAgY29udGludWU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnRzID0gZmlsZSA9PT0gJy0nID8gcGlwZSA6IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuICAgIGxpbmVzID0gbGluZXMuY29uY2F0KGNvbnRlbnRzLnRyaW1SaWdodCgpLnNwbGl0KC9cXHIqXFxuLykpO1xuICB9KTtcblxuICB2YXIgc29ydGVkO1xuICBzb3J0ZWQgPSBsaW5lcy5zb3J0KG9wdGlvbnMubnVtZXJpY2FsID8gbnVtZXJpY2FsQ21wIDogdW5peENtcCk7XG5cbiAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgIHNvcnRlZCA9IHNvcnRlZC5yZXZlcnNlKCk7XG4gIH1cblxuICByZXR1cm4gc29ydGVkLmpvaW4oJ1xcbicpICsgJ1xcbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NvcnQ7XG4iXX0=